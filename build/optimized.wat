(module
 (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
 (type $i32_=>_none (func (param i32)))
 (type $i32_i32_i32_=>_none (func (param i32 i32 i32)))
 (type $i32_=>_i32 (func (param i32) (result i32)))
 (type $i32_i32_=>_none (func (param i32 i32)))
 (type $none_=>_i32 (func (result i32)))
 (type $none_=>_none (func))
 (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
 (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
 (type $none_=>_f32 (func (result f32)))
 (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
 (memory $0 1)
 (data (i32.const 16) "(\00\00\00\01\00\00\00\01\00\00\00(\00\00\00a\00l\00l\00o\00c\00a\00t\00i\00o\00n\00 \00t\00o\00o\00 \00l\00a\00r\00g\00e")
 (data (i32.const 80) "\1e\00\00\00\01\00\00\00\01\00\00\00\1e\00\00\00~\00l\00i\00b\00/\00r\00t\00/\00t\00l\00s\00f\00.\00t\00s")
 (data (i32.const 132) "\01")
 (data (i32.const 144) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\90\00\00\00\90")
 (data (i32.const 176) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00I\00n\00d\00e\00x\00 \00o\00u\00t\00 \00o\00f\00 \00r\00a\00n\00g\00e")
 (data (i32.const 240) "\1a\00\00\00\01\00\00\00\01\00\00\00\1a\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 288) "\1c\00\00\00\01\00\00\00\01\00\00\00\1c\00\00\00I\00n\00v\00a\00l\00i\00d\00 \00l\00e\00n\00g\00t\00h")
 (data (i32.const 340) "\01")
 (data (i32.const 352) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00`\01\00\00`\01")
 (data (i32.const 388) "\01")
 (data (i32.const 400) "\10\00\00\00\01\00\00\00\04\00\00\00\10\00\00\00\90\01\00\00\90\01")
 (data (i32.const 436) "\01")
 (data (i32.const 448) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\c0\01\00\00\c0\01")
 (data (i32.const 484) "\01")
 (data (i32.const 496) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\f0\01\00\00\f0\01")
 (data (i32.const 532) "\01")
 (data (i32.const 544) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00 \02\00\00 \02")
 (data (i32.const 580) "\01")
 (data (i32.const 592) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00P\02\00\00P\02")
 (data (i32.const 628) "\01")
 (data (i32.const 640) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\80\02\00\00\80\02")
 (data (i32.const 676) "\01")
 (data (i32.const 688) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\b0\02\00\00\b0\02")
 (data (i32.const 724) "\01")
 (data (i32.const 736) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\e0\02\00\00\e0\02")
 (data (i32.const 772) "\01")
 (data (i32.const 784) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\10\03\00\00\10\03")
 (data (i32.const 820) "\01")
 (data (i32.const 832) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00@\03\00\00@\03")
 (data (i32.const 868) "\01")
 (data (i32.const 880) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00p\03\00\00p\03")
 (data (i32.const 916) "\01")
 (data (i32.const 928) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\a0\03\00\00\a0\03")
 (data (i32.const 964) "\01")
 (data (i32.const 976) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00\d0\03\00\00\d0\03")
 (data (i32.const 1008) " \00\00\00\01\00\00\00\00\00\00\00 \00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08")
 (data (i32.const 1056) "\10\00\00\00\01\00\00\00\08\00\00\00\10\00\00\00\00\04\00\00\00\04\00\00 \00\00\00\08")
 (data (i32.const 1088) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00~\00l\00i\00b\00/\00t\00y\00p\00e\00d\00a\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 1152) "^\00\00\00\01\00\00\00\01\00\00\00^\00\00\00E\00l\00e\00m\00e\00n\00t\00 \00t\00y\00p\00e\00 \00m\00u\00s\00t\00 \00b\00e\00 \00n\00u\00l\00l\00a\00b\00l\00e\00 \00i\00f\00 \00a\00r\00r\00a\00y\00 \00i\00s\00 \00h\00o\00l\00e\00y")
 (data (i32.const 1265) "\04\00\00\01\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\t\00\00\00\n\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\0f\00\00\00\10\00\00\00\11\00\00\00\12\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\14\00\00\00\15\00\00\00\t\00\00\00\16\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\17\00\00\00\18\00\00\00\11\00\00\00\19\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\1a\00\00\00\1b\00\00\00\t\00\00\00\1c\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\1d\00\00\00\1e\00\00\00\11\00\00\00\1f\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00 \00\00\00!\00\00\00\t\00\00\00\"\00\00\00\0b\00\00\00#\00\00\00$\00\00\00%\00\00\00&\00\00\00\'\00\00\00\11\00\00\00(\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e`\00\00\00\00\00\00\00D\00\00\00E\00\00\00a\00\00\00b\00\00\00c\00\00\00d\00\00\00e\00\00\00f\00\00\00D\00\00\00E\00\00\00g\00\00\00h\00\00\00i\00\00\00j\00\00\00k\00\00\00\00\00\00\00D\00\00\00E")
 (data (i32.const 2304) "\10\00\00\00\01\00\00\00\t\00\00\00\10\00\00\00\00\05\00\00\00\05\00\00\00\04\00\00\00\01")
 (data (i32.const 2337) "\04\00\00\01\00\00\00\00\00\00\00\00\04")
 (data (i32.const 2492) "l\00\00\00m")
 (data (i32.const 2508) "n\00\00\00o\00\00\00p\00\00\00q\00\00\00r\00\00\00s")
 (data (i32.const 2544) "t\00\00\00u\00\00\00v\00\00\00w\00\00\00x\00\00\00y\00\00\00z")
 (data (i32.const 2608) "{\00\00\00|\00\00\00}\00\00\00~\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\82\00\00\00{\00\00\00|\00\00\00\83\00\00\00\84\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\82\00\00\00{\00\00\00|\00\00\00}\00\00\00~\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\85\00\00\00{\00\00\00|\00\00\00\83\00\00\00\84\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\85\00\00\00{\00\00\00|\00\00\00}\00\00\00~\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\86\00\00\00{\00\00\00|\00\00\00\83\00\00\00\84\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\87\00\00\00{\00\00\00|\00\00\00}\00\00\00~\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\00\00\00\00{\00\00\00|\00\00\00\83\00\00\00\84\00\00\00\7f\00\00\00\80\00\00\00\81")
 (data (i32.const 2904) "\88")
 (data (i32.const 2928) "\89\00\00\00\8a\00\00\00\8b\00\00\00\8c\00\00\00\8d\00\00\00\8e")
 (data (i32.const 2960) "\8f")
 (data (i32.const 2992) "\90\00\00\00\91\00\00\00\92\00\00\00\93\00\00\00\94\00\00\00\95")
 (data (i32.const 3024) "\96\00\00\00\97\00\00\00\98\00\00\00\99\00\00\00\9a")
 (data (i32.const 3056) "\9b\00\00\00\9c\00\00\00\9d\00\00\00\9e\00\00\00\9f")
 (data (i32.const 3084) "\a0\00\00\00\a1\00\00\00\a2\00\00\00\a3\00\00\00\a4\00\00\00\a5")
 (data (i32.const 3376) "\10\00\00\00\01\00\00\00\t\00\00\00\10\00\00\000\t\00\000\t\00\00\00\04\00\00\00\01")
 (data (i32.const 3409) "\04\00\00\01\00\00\00\00\00\00\00\00\04\00\00\a6\00\00\00\a6\00\00\00\a6\00\00\00\a6\00\00\00\a6\00\00\00\a6\00\00\00\a7\00\00\00\a6\00\00\00\a8\00\00\00\a8\00\00\00\a8\00\00\00\a8\00\00\00\a8\00\00\00\a8\00\00\00\a9\00\00\00\a8\00\00\00\aa\00\00\00\aa\00\00\00\aa\00\00\00\aa\00\00\00\aa\00\00\00\aa\00\00\00\ab\00\00\00\aa\00\00\00\ac\00\00\00\ac\00\00\00\ac\00\00\00\ac\00\00\00\ac\00\00\00\ac\00\00\00\ad\00\00\00\ac\00\00\00\ae\00\00\00\ae\00\00\00\ae\00\00\00\ae\00\00\00\ae\00\00\00\ae\00\00\00\af\00\00\00\ae\00\00\00\b0\00\00\00\b0\00\00\00\b0\00\00\00\b0\00\00\00\b0\00\00\00\b0\00\00\00\b1\00\00\00\b0\00\00\00\b2\00\00\00\b2\00\00\00\b2\00\00\00\b2\00\00\00\b2\00\00\00\b2\00\00\00\b3\00\00\00\b2\00\00\00\b4\00\00\00\b4\00\00\00\b4\00\00\00\b4\00\00\00\b4\00\00\00\b4\00\00\00\b5\00\00\00\b4\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b6\00\00\00\b7\00\00\00\b6\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b8\00\00\00\b9\00\00\00\b8\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\ba\00\00\00\bb\00\00\00\ba")
 (data (i32.const 4448) "\10\00\00\00\01\00\00\00\t\00\00\00\10\00\00\00`\0d\00\00`\0d\00\00\00\04\00\00\00\01")
 (data (i32.const 4481) "\04\00\00\01\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\t\00\00\00\n\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\0f\00\00\00\10\00\00\00\bc\00\00\00\12\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\14\00\00\00\15\00\00\00\t\00\00\00\16\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\17\00\00\00\18\00\00\00\bc\00\00\00\19\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00\1a\00\00\00\1b\00\00\00\bd\00\00\00\be\00\00\00\bf\00\00\00\c0\00\00\00\c1\00\00\00\c2\00\00\00\1d\00\00\00\1e\00\00\00\bc\00\00\00\c3\00\00\00\c4\00\00\00\c5\00\00\00\c6\00\00\00\c7\00\00\00 \00\00\00!\00\00\00\t\00\00\00\"\00\00\00\0b\00\00\00\c8\00\00\00\c9\00\00\00\ca\00\00\00&\00\00\00\'\00\00\00\bc\00\00\00(\00\00\00\13\00\00\00\0c\00\00\00\0d\00\00\00\0e\00\00\00)\00\00\00\00\00\00\00*\00\00\00*\00\00\00*\00\00\00\cb\00\00\00\cc\00\00\00\cd\00\00\00*\00\00\00*\00\00\00\00\00\00\00*\00\00\00*\00\00\00\cb\00\00\00\cc\00\00\00\cd\00\00\00*\00\00\00*\00\00\00*\00\00\00\00\00\00\00*\00\00\00\cb\00\00\00\cc\00\00\00\cd\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00\00\00\00\00\cb\00\00\00\cc\00\00\00\cd\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00\00\00\00\00*\00\00\00\cd\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00\cb\00\00\00\00\00\00\00\cd\00\00\00*\00\00\00\ce\00\00\00\ce\00\00\00\ce\00\00\00\ce\00\00\00\ce\00\00\00\ce\00\00\00-\00\00\00\ce\00\00\00*\00\00\00*\00\00\00*\00\00\00*\00\00\00\cb\00\00\00\cc\00\00\00\cd\00\00\00\00\00\00\00.\00\00\00.\00\00\00.\00\00\00.\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\00.\00\00\000\00\00\000\00\00\000\00\00\000\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\000\00\00\002\00\00\002\00\00\002\00\00\002\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\002\00\00\004\00\00\004\00\00\004\00\00\004\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\004\00\00\006\00\00\006\00\00\006\00\00\006\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\006\00\00\008\00\00\008\00\00\008\00\00\008\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\008\00\00\00:\00\00\00:\00\00\00:\00\00\00:\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\00:\00\00\00<\00\00\00<\00\00\00<\00\00\00<\00\00\00\cf\00\00\00\d0\00\00\00\d1\00\00\00<\00\00\00>\00\00\00?\00\00\00@\00\00\00A\00\00\00B\00\00\00C\00\00\00D\00\00\00E\00\00\00F\00\00\00G\00\00\00H\00\00\00\00\00\00\00I\00\00\00J\00\00\00D\00\00\00E\00\00\00K\00\00\00L\00\00\00M\00\00\00N\00\00\00O\00\00\00P\00\00\00D\00\00\00E\00\00\00Q\00\00\00R\00\00\00S\00\00\00T\00\00\00U\00\00\00\00\00\00\00D\00\00\00E\00\00\00V\00\00\00\d2\00\00\00X\00\00\00\d3\00\00\00Z\00\00\00\d4\00\00\00D\00\00\00E\00\00\00\\\00\00\00\d5\00\00\00^\00\00\00_\00\00\00`\00\00\00\00\00\00\00D\00\00\00E\00\00\00a\00\00\00b\00\00\00c\00\00\00d\00\00\00e\00\00\00f\00\00\00D\00\00\00E\00\00\00g\00\00\00\d6\00\00\00i\00\00\00j\00\00\00k\00\00\00\00\00\00\00D\00\00\00E")
 (data (i32.const 5520) "\10\00\00\00\01\00\00\00\t\00\00\00\10\00\00\00\90\11\00\00\90\11\00\00\00\04\00\00\00\01")
 (data (i32.const 5553) "\04\00\00\01\00\00\00\00\00\00\00\00\04\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d7\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d8\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\d9\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\da\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\db\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dc\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\dd\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\de\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\df\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e0\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1\00\00\00\e1")
 (data (i32.const 6592) "\10\00\00\00\01\00\00\00\n\00\00\00\10\00\00\00\c0\15\00\00\c0\15\00\00\00\04\00\00\00\01")
 (data (i32.const 6624) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00a\00r\00r\00a\00y\00b\00u\00f\00f\00e\00r\00.\00t\00s")
 (data (i32.const 6692) "\01")
 (data (i32.const 6704) "\10\00\00\00\01\00\00\00\0d\00\00\00\10\00\00\000\1a\00\000\1a")
 (data (i32.const 6740) "\01")
 (data (i32.const 6752) "\10\00\00\00\01\00\00\00\0f\00\00\00\10\00\00\00`\1a\00\00`\1a")
 (data (i32.const 6788) "\01")
 (data (i32.const 6800) "\10\00\00\00\01\00\00\00\11\00\00\00\10\00\00\00\90\1a\00\00\90\1a")
 (data (i32.const 6836) "\01")
 (data (i32.const 6848) "@\00\00\00\01\00\00\00\00\00\00\00@\00\00\00\00\00\00\ff\00\00\aa\ff\aa\00\00\ff\aa\00\aa\ff\00\aa\00\ff\00\aa\aa\ff\aa\aa\00\ff\aa\aa\aa\ff\00\00\00\ff\00\00\ff\ff\ff\00\00\ff\ff\00\ff\ff\00\ff\00\ff\00\ff\ff\ff\ff\ff\00\ff\ff\ff\ff\ff")
 (data (i32.const 6928) "\10\00\00\00\01\00\00\00&\00\00\00\10\00\00\00\d0\1a\00\00\d0\1a\00\00@\00\00\00\10")
 (data (i32.const 6961) "@\00\00\01\00\00\00\00\00\00\00\00@\00\00\f3\af\11\ff\ff\c3\cb\11*]\\\"_\\\18C\c3\f2\15\ff\ff\ff\ff\ff*]\\~\cd}\00\d0\cdt\00\18\f7\ff\ff\ff\c3[3\ff\ff\ff\ff\ff\c5*a\\\e5\c3\9e\16\f5\e5*x\\#\"x\\|\b5 \03\fd4@\c5\d5\cd\bf\02\d1\c1\e1\f1\fb\c9\e1n\fdu\00\ed{=\\\c3\c5\16\ff\ff\ff\ff\ff\ff\ff\f5\e5*\b0\\|\b5 \01\e9\e1\f1\edE*]\\#\"]\\~\c9\fe!\d0\fe\0d\c8\fe\10\d8\fe\18?\d8#\fe\168\01#7\"]\\\c9\bfRN\c4INKEY\a4P\c9F\cePOIN\d4SCREEN\a4ATT\d2A\d4TA\c2VAL\a4COD\c5VA\ccLE\ceSI\ceCO\d3TA\ceAS\ceAC\d3AT\ceL\ceEX\d0IN\d4SQ\d2SG\ceAB\d3PEE\cbI\ceUS\d2STR\a4CHR\a4NO\d4BI\ceO\d2AN\c4<\bd>\bd<\beLIN\c5THE\ceT\cfSTE\d0DEF F\ceCA\d4FORMA\d4MOV\c5ERAS\c5OPEN \a3CLOSE \a3MERG\c5VERIF\d9BEE\d0CIRCL\c5IN\cbPAPE\d2FLAS\c8BRIGH\d4INVERS\c5OVE\d2OU\d4LPRIN\d4LLIS\d4STO\d0REA\c4DAT\c1RESTOR\c5NE\d7BORDE\d2CONTINU\c5DI\cdRE\cdFO\d2GO T\cfGO SU\c2INPU\d4LOA\c4LIS\d4LE\d4PAUS\c5NEX\d4POK\c5PRIN\d4PLO\d4RU\ceSAV\c5RANDOMIZ\c5I\c6CL\d3DRA\d7CLEA\d2RETUR\ceCOP\d9BHY65TGVNJU74RFCMKI83EDX\0eLO92WSZ \0dP01QA\e3\c4\e0\e4\b4\bc\bd\bb\af\b0\b1\c0\a7\a6\be\ad\b2\ba\e5\a5\c2\e1\b3\b9\c1\b8~\dc\da\\\b7{}\d8\bf\ae\aa\ab\dd\de\df\7f\b5\d6|\d5]\db\b6\d9[\d7\0c\07\06\04\05\08\n\0b\t\0f\e2*?\cd\c8\cc\cb^\ac-+=.,;\"\c7<\c3>\c5/\c9`\c6:\d0\ce\a8\ca\d3\d4\d1\d2\a9\cf./\11\ff\ff\01\fe\fe\edx/\e6\1f(\0eg}\14\c0\d6\08\cb<0\faS_ \f4-\cb\008\e6z<\c8\fe(\c8\fe\19\c8{ZW\fe\18\c9\cd\8e\02\c0!\00\\\cb~ \07#5+ \026\ff}!\04\\\bd \ee\cd\1e\03\d0!\00\\\be(.\eb!\04\\\be(\'\cb~ \04\eb\cb~\c8_w#6\05#:\t\\w#\fdN\07\fdV\01\e5\cd3\03\e1w2\08\\\fd\cb\01\ee\c9#6\05#5\c0:\n\\w#~\18\eaB\16\00{\fe\'\d0\fe\18 \03\cbx\c0!\05\02\19~7\c9{\fe:8/\0d\faO\03(\03\c6O\c9!\eb\01\04(\03!\05\02\16\00\19~\c9!)\02\cb@(\f4\cbZ(\n\fd\cb0^\c0\04\c0\c6 \c9\c6\a5\c9\fe0\d8\0d\fa\9d\03 \19!T\02\cbh(\d3\fe80\07\d6 \04\c8\c6\08\c9\d66\04\c8\c6\fe\c9!0\02\fe9(\ba\fe0(\b6\e6\07\c6\80\04\c8\ee\0f\c9\04\c8\cbh!0\02 \a4\d6\10\fe\"(\06\fe \c0>_\c9>@\c9\f3}\cb=\cb=/\e6\03O\06\00\dd!\d1\03\dd\t:H\\\e68\0f\0f\0f\f6\08\00\00\00\04\0c\0d \fd\0e?\05\c2\d6\03\ee\10\d3\feDO\cbg \tz\b3(\tyM\1b\dd\e9M\0c\dd\e9\fb\c9\ef1\'\c0\034\ecl\98\1f\f5\04\a1\0f8!\92\\~\a7 ^#N#Fx\17\9f\b9 T#\be Px\c6<\f2%\04\e2l\04\06\fa\04\d6\0c0\fb\c6\0c\c5!n\04\cd\064\cd\b43\ef\048\f1\86w\ef\c0\0218\cd\94\1e\fe\0b0\"\ef\e0\04\e04\80CU\9f\80\01\0545q\038\cd\99\1e\c5\cd\99\1e\e1PYz\b3\c8\1b\c3\b5\03\cf\n\89\02\d0\12\86\89\n\97`u\89\12\d5\17\1f\89\1b\90A\02\89$\d0S\ca\89.\9d6\b1\898\ffI>\89C\ffjs\89O\a7\00T\89\\\00\00\00\89i\14\f6$\89v\f1\10\05\cd\fb$:;\\\87\fa\8a\1c\e1\d0\e5\cd\f1+bk\0d\f8\t\cb\fe\c9!?\05\e5!\80\1f\cb\7f(\03!\98\0c\08\13\dd+\f3>\02G\10\fe\d3\fe\ee\0f\06\a4- \f5\05%\f2\d8\04\06/\10\fe\d3\fe>\0d\067\10\fe\d3\fe\01\0e;\08o\c3\07\05z\b3(\0c\ddn\00|\adg>\017\c3%\05l\18\f4y\cbx\10\fe0\04\06B\10\fe\d3\fe\06> \ef\05\af<\cb\15\c2\14\05\1b\dd#\061>\7f\db\fe\1f\d0z<\c2\fe\04\06;\10\fe\c9\f5:H\\\e68\0f\0f\0f\d3\fe>\7f\db\fe\1f\fb8\02\cf\0c\f1\c9\14\08\15\f3>\0f\d3\fe!?\05\e5\db\fe\1f\e6 \f6\02O\bf\c0\cd\e7\050\fa!\15\04\10\fe+|\b5 \f9\cd\e3\050\eb\06\9c\cd\e3\050\e4>\c6\b80\e0$ \f1\06\c9\cd\e7\050\d5x\fe\d40\f4\cd\e7\05\d0y\ee\03O&\00\06\b0\18\1f\08 \070\0f\ddu\00\18\0f\cb\11\ad\c0y\1fO\13\18\07\dd~\00\ad\c0\dd#\1b\08\06\b2.\01\cd\e3\05\d0>\cb\b8\cb\15\06\b0\d2\ca\05|\adgz\b3 \ca|\fe\01\c9\cd\e7\05\d0>\16= \fd\a7\04\c8>\7f\db\fe\1f\d0\a9\e6 (\f3y/O\e6\07\f6\08\d3\fe7\c9\f1:t\\\d6\e02t\\\cd\8c\1c\cd0%(<\01\11\00:t\\\a7(\02\0e\"\f7\d5\dd\e1\06\0b> \12\13\10\fc\dd6\01\ff\cd\f1+!\f6\ff\0b\t\030\0f:t\\\a7 \02\cf\0ex\b1(\n\01\n\00\dd\e5\e1#\eb\ed\b0\df\fe\e4 I:t\\\fe\03\ca\8a\1c\e7\cd\b2(\cb\f90\0b!\00\00:t\\=(\15\cf\01\c2\8a\1c\cd0%(\18#~\ddw\0b#~\ddw\0c#\ddq\0e>\01\cbq(\01<\ddw\00\eb\e7\fe) \da\e7\cd\ee\1b\eb\c3Z\07\fe\aa \1f:t\\\fe\03\ca\8a\1c\e7\cd\ee\1b\dd6\0b\00\dd6\0c\1b!\00@\ddu\0d\ddt\0e\18M\fe\af O:t\\\fe\03\ca\8a\1c\e7\cdH  \0c:t\\\a7\ca\8a\1c\cd\e6\1c\18\0f\cd\82\1c\df\fe,(\0c:t\\\a7\ca\8a\1c\cd\e6\1c\18\04\e7\cd\82\1c\cd\ee\1b\cd\99\1e\ddq\0b\ddp\0c\cd\99\1e\ddq\0d\ddp\0e`i\dd6\00\03\18D\fe\ca(\t\cd\ee\1b\dd6\0e\80\18\17:t\\\a7\c2\8a\1c\e7\cd\82\1c\cd\ee\1b\cd\99\1e\ddq\0d\ddp\0e\dd6\00\00*Y\\\ed[S\\7\edR\ddu\0b\ddt\0c*K\\\edR\ddu\0f\ddt\10\eb:t\\\a7\cap\t\e5\01\11\00\dd\t\dd\e5\11\11\00\af7\cdV\05\dd\e10\f2>\fe\cd\01\16\fd6R\03\0e\80\dd~\00\dd\be\ef \02\0e\f6\fe\040\d9\11\c0\t\c5\cd\n\0c\c1\dd\e5\d1!\f0\ff\19\06\n~< \03y\80O\13\1a\be# \01\0c\d7\10\f6\cby \b3>\0d\d7\e1\dd~\00\fe\03(\0c:t\\=\ca\08\08\fe\02\ca\b6\08\e5\ddn\fa\ddf\fb\dd^\0b\ddV\0c|\b5(\0d\edR8&(\07\dd~\00\fe\03 \1d\e1|\b5 \06\ddn\0d\ddf\0e\e5\dd\e1:t\\\fe\027 \01\a7>\ff\cdV\05\d8\cf\1a\dd^\0b\ddV\0c\e5|\b5 \06\13\13\13\eb\18\0c\ddn\fa\ddf\fb\eb7\edR8\t\11\05\00\19DM\cd\05\1f\e1\dd~\00\a7(>|\b5(\13+F+N+\03\03\03\dd\"_\\\cd\e8\19\dd*_\\*Y\\+\ddN\0b\ddF\0c\c5\03\03\03\dd~\fd\f5\cdU\16#\f1w\d1#s#r#\e5\dd\e17>\ff\c3\02\08\eb*Y\\+\dd\"_\\\ddN\0b\ddF\0c\c5\cd\e5\19\c1\e5\c5\cdU\16\dd*_\\#\ddN\0f\ddF\10\t\"K\\\ddf\0e|\e6\c0 \n\ddn\0d\"B\\\fd6\n\00\d1\dd\e17>\ff\c3\02\08\ddN\0b\ddF\0c\c5\03\f76\80\eb\d1\e5\e5\dd\e17>\ff\cd\02\08\e1\ed[S\\~\e6\c0 \19\1a\13\be# \02\1a\be\1b+0\08\e5\eb\cd\b8\19\e1\18\ec\cd,\t\18\e2~O\fe\80\c8\e5*K\\~\fe\80(%\b9(\08\c5\cd\b8\19\c1\eb\18\f0\e6\e0\fe\a0 \12\d1\d5\e5#\13\1a\be \06\170\f7\e1\18\03\e1\18\e0>\ff\d1\eb<7\cd,\t\18\c4 \10\08\"_\\\eb\cd\b8\19\cd\e8\19\eb*_\\\08\08\d5\cd\b8\19\"_\\*S\\\e3\c5\088\07+\cdU\16#\18\03\cdU\16#\c1\d1\edSS\\\ed[_\\\c5\d5\eb\ed\b0\e1\c1\d5\cd\e8\19\d1\c9\e5>\fd\cd\01\16\af\11\a1\t\cd\n\0c\fd\cb\02\ee\cd\d4\15\dd\e5\11\11\00\af\cd\c2\04\dd\e1\062v\10\fd\dd^\0b\ddV\0c>\ff\dd\e1\c3\c2\04\80Start tape, then press any key\ae\0dProgram:\a0\0dNumber array:\a0\0dCharacter array:\a0\0dBytes:\a0\cd\03\0b\fe \d2\d9\n\fe\068i\fe\180e!\0b\n_\16\00\19^\19\e5\c3\03\0bNW\10)TSR7PO_^]\\[ZTS\0c>\"\b9 \11\fd\cb\01N \t\04\0e\02>\18\b8 \03\05\0e!\c3\d9\0d:\91\\\f5\fd6W\01> \cde\0b\f12\91\\\c9\fd\cb\01N\c2\cd\0e\0e!\cdU\0c\05\c3\d9\0d\cd\03\0by==\e6\10\18Z>?\18l\11\87\n2\0f\\\18\0b\11m\n\18\03\11\87\n2\0e\\*Q\\s#r\c9\11\f4\t\cd\80\n*\0e\\W}\fe\16\da\11\" )DJ>\1f\918\0c\c6\02O\fd\cb\01N \16>\16\90\da\9f\1e<G\04\fd\cb\02F\c2U\0c\fd\be1\da\86\0c\c3\d9\0d|\cd\03\0b\81=\e6\1f\c8W\fd\cb\01\c6> \cd;\0c\15 \f8\c9\cd$\0b\fd\cb\01N \1a\fd\cb\02F \08\edC\88\\\"\84\\\c9\edC\8a\\\edC\82\\\"\86\\\c9\fdqE\"\80\\\c9\fd\cb\01N \14\edK\88\\*\84\\\fd\cb\02F\c8\edK\8a\\*\86\\\c9\fdNE*\80\\\c9\fe\808=\fe\900&G\cd8\0b\cd\03\0b\11\92\\\18G!\92\\\cd>\0b\cb\18\9f\e6\0fO\cb\18\9f\e6\f0\b1\0e\04w#\0d \fb\c9\d6\a50\t\c6\15\c5\edK{\\\18\0b\cd\10\0c\c3\03\0b\c5\edK6\\\eb!;\\\cb\86\fe  \02\cb\c6&\00o)))\t\c1\eby=>! \0e\05O\fd\cb\01N(\06\d5\cd\cd\0e\d1y\b9\d5\ccU\0c\d1\c5\e5:\91\\\06\ff\1f8\01\04\1f\1f\9fO>\08\a7\fd\cb\01N(\05\fd\cb0\ce7\eb\08\1a\a0\ae\a9\12\088\13\14#= \f2\eb%\fd\cb\01N\cc\db\0b\e1\c1\0d#\c9\08> \83_\08\18\e6|\0f\0f\0f\e6\03\f6Xg\ed[\8f\\~\ab\a2\ab\fd\cbWv(\08\e6\c7\cbW \02\ee8\fd\cbWf(\08\e6\f8\cbo \02\ee\07w\c9\e5&\00\e3\18\04\11\95\00\f5\cdA\0c8\t> \fd\cb\01F\cc;\0c\1a\e6\7f\cd;\0c\1a\13\870\f5\d1\feH(\03\fe\82\d8z\fe\03\d8> \d5\d9\d7\d9\d1\c9\f5\eb<\cb~#(\fb= \f8\eb\f1\fe \d8\1a\d6A\c9\fd\cb\01N\c0\11\d9\0d\d5x\fd\cb\02F\c2\02\0d\fd\be18\1b\c0\fd\cb\02f(\16\fd^-\1d(Z>\00\cd\01\16\ed{?\\\fd\cb\02\a6\c9\cf\04\fd5R E>\18\902\8c\\*\8f\\\e5:\91\\\f5>\fd\cd\01\16\af\11\f8\0c\cd\n\0c\fd\cb\02\ee!;\\\cb\de\cb\ae\d9\cd\d4\15\d9\fe (E\fe\e2(A\f6 \fen(;>\fe\cd\01\16\f12\91\\\e1\"\8f\\\cd\fe\0d\fdF1\04\0e!\c5\cd\9b\0e|\0f\0f\0f\e6\03\f6Xg\11\e0Z\1aN\06 \eb\12q\13#\10\fa\c1\c9\80scroll\bf\cf\0c\fe\028\80\fd\861\d6\19\d0\edD\c5G*\8f\\\e5*\91\\\e5\cdM\0dx\f5!k\\Fx<w!\89\\\be8\034\06\18\cd\00\0e\f1= \e8\e1\fduW\e1\"\8f\\\edK\88\\\fd\cb\02\86\cd\d9\0d\fd\cb\02\c6\c1\c9\af*\8d\\\fd\cb\02F(\04g\fdn\0e\"\8f\\!\91\\ \02~\0f\ae\e6U\aew\c9\cd\af\0d!<\\\cb\ae\cb\c6\cdM\0d\fdF1\cdD\0e!\c0Z:\8d\\\05\18\07\0e +w\0d \fb\10\f7\fd61\02>\fd\cd\01\16*Q\\\11\f4\t\a7s#r#\11\a8\10?8\f6\01!\17\18*!\00\00\"}\\\fd\cb0\86\cd\94\0d>\fe\cd\01\16\cdM\0d\06\18\cdD\0e*Q\\\11\f4\ts#r\fd6R\01\01!\18!\00[\fd\cb\01N \12x\fd\cb\02F(\05\fd\861\d6\18\c5G\cd\9b\0e\c1>!\91_\16\00\19\c3\dc\n\06\17\cd\9b\0e\0e\08\c5\e5x\e6\07x \0c\eb!\e0\f8\19\eb\01 \00=\ed\b0\eb!\e0\ff\19\ebG\e6\07\0f\0f\0fOx\06\00\ed\b0\06\07\t\e6\f8 \db\e1$\c1\0d \cd\cd\88\0e!\e0\ff\19\eb\ed\b0\06\01\c5\cd\9b\0e\0e\08\c5\e5x\e6\07\0f\0f\0fOx\06\00\0dT]6\00\13\ed\b0\11\01\07\19=\e6\f8G \e5\e1$\c1\0d \dc\cd\88\0ebk\13:\8d\\\fd\cb\02F(\03:H\\w\0b\ed\b0\c1\0e!\c9|\0f\0f\0f=\f6Pg\ebah)))))DM\c9>\18\90W\0f\0f\0f\e6\e0oz\e6\18\f6@g\c9\f3\06\b0!\00@\e5\c5\cd\f4\0e\c1\e1$|\e6\07 \n}\c6 o?\9f\e6\f8\84g\10\e7\18\0d\f3!\00[\06\08\c5\cd\f4\0e\c1\10\f9>\04\d3\fb\fb!\00[\fduF\afGw#\10\fc\fd\cb0\8e\0e!\c3\d9\0dx\fe\03\9f\e6\02\d3\fbW\cdT\1f8\n>\04\d3\fb\fb\cd\df\0e\cf\0c\db\fb\87\f80\eb\0e ^#\06\08\cb\12\cb\13\cb\1a\db\fb\1f0\fbz\d3\fb\10\f0\0d \e9\c9*=\\\e5!\7f\10\e5\eds=\\\cd\d4\15\f5\16\00\fd^\ff!\c8\00\cd\b5\03\f1!8\0f\e5\fe\1801\fe\078-\fe\108:\01\02\00W\fe\168\0c\03\fd\cb7~\ca\1e\10\cd\d4\15_\cd\d4\15\d5*[\\\fd\cb\07\86\cdU\16\c1#p#q\18\n\fd\cb\07\86*[\\\cdR\16\12\13\edS[\\\c9_\16\00!\99\0f\19^\19\e5*[\\\c9\tfjP\b5p~\cf\d4*I\\\fd\cb7n\c2\97\10\cdn\19\cd\95\16z\b3\ca\97\10\e5#N#F!\n\00\tDM\cd\05\1f\cd\97\10*Q\\\e3\e5>\ff\cd\01\16\e1+\fd5\0f\cdU\18\fd4\0f*Y\\####\"[\\\e1\cd\15\16\c9\fd\cb7n \08!I\\\cd\0f\19\18m\fd6\00\10\18\1d\cd1\10\18\05~\fe\0d\c8#\"[\\\c9\cd1\10\01\01\00\c3\e8\19\cd\d4\15\cd\d4\15\e1\e1\e1\"=\\\fd\cb\00~\c0\f9\c97\cd\95\11\edR\19#\c1\d8\c5DMbk#\1a\e6\f0\fe\10 \t#\1a\d6\17\ce\00 \01#\a7\edB\t\eb8\e6\c9\fd\cb7n\c0*I\\\cdn\19\eb\cd\95\16!J\\\cd\1c\19\cd\95\17>\00\c3\01\16\fd\cb7~(\a8\c3\81\0f\fd\cb0f(\a1\fd6\00\ff\16\00\fd^\fe!\90\1a\cd\b5\03\c30\0f\e5\cd\90\11+\cd\e5\19\"[\\\fd6\07\00\e1\c9\fd\cb\02^\c4\1d\11\a7\fd\cb\01n\c8:\08\\\fd\cb\01\ae\f5\fd\cb\02n\c4n\0d\f1\fe 0R\fe\100-\fe\060\nG\e6\01Ox\1f\c6\12\18* \t!j\\>\08\aew\18\0e\fe\0e\d8\d6\0d!A\\\bew \026\00\fd\cb\02\de\bf\c9G\e6\07O>\10\cbX \01<\fdq\d3\11\0d\11\18\06:\0d\\\11\a8\10*O\\##s#r7\c9\cdM\0d\fd\cb\02\9e\fd\cb\02\ae*\8a\\\e5*=\\\e5!g\11\e5\eds=\\*\82\\\e57\cd\95\11\eb\cd}\18\eb\cd\e1\18*\8a\\\e3\eb\cdM\0d:\8b\\\928& \06{\fd\96P0\1e> \d5\cd\f4\t\d1\18\e9\16\00\fd^\fe!\90\1a\cd\b5\03\fd6\00\ff\ed[\8a\\\18\02\d1\e1\e1\"=\\\c1\d5\cd\d9\0d\e1\"\82\\\fd6&\00\c9*a\\+\a7\ed[Y\\\fd\cb7n\c8\ed[a\\\d8*c\\\c9~\fe\0e\01\06\00\cc\e8\19~#\fe\0d \f1\c9\f3>\ff\ed[\b2\\\d9\edK\b4\\\ed[8\\*{\\\d9G>\07\d3\fe>?\edG\00\00\00\00\00\00bk6\02+\bc \fa\a7\edR\19#0\065(\035(\f3+\d9\edC\b4\\\edS8\\\"{\\\d9\04(\19\"\b4\\\11\af>\01\a8\00\eb\ed\b8\eb#\"{\\+\01@\00\edC8\\\"\b2\\!\00<\"6\\*\b2\\6>+\f9++\"=\\\edV\fd!:\\\fb!\b6\\\"O\\\11\af\15\01\15\00\eb\ed\b0\eb+\"W\\#\"S\\\"K\\6\80#\"Y\\6\0d#6\80#\"a\\\"c\\\"e\\>82\8d\\2\8f\\2H\\!#\05\"\t\\\fd5\c6\fd5\ca!\c6\15\11\10\\\01\0e\00\ed\b0\fd\cb\01\ce\cd\df\0e\fd61\02\cdk\0d\af\118\15\cd\n\0c\fd\cb\02\ee\18\07\fd61\02\cd\95\17\cd\b0\16>\00\cd\01\16\cd,\0f\cd\17\1b\fd\cb\00~ \12\fd\cb0f(@*Y\\\cd\a7\11\fd6\00\ff\18\dd*Y\\\"]\\\cd\fb\19x\b1\c2]\15\df\fe\0d(\c0\fd\cb0F\c4\af\0d\cdn\0d>\19\fd\96O2\8c\\\fd\cb\01\fe\fd6\00\ff\fd6\n\01\cd\8a\1bv\fd\cb\01\ae\fd\cb0N\c4\cd\0e::\\<\f5!\00\00\fdt7\fdt&\"\0b\\!\01\00\"\16\\\cd\b0\16\fd\cb7\ae\cdn\0d\fd\cb\02\ee\f1G\fe\n8\02\c6\07\cd\ef\15> \d7x\11\91\13\cd\n\0c\af\116\15\cd\n\0c\edKE\\\cd\1b\1a>:\d7\fdN\0d\06\00\cd\1b\1a\cd\97\10::\\<(\1b\fe\t(\04\fe\15 \03\fd4\0d\01\03\00\11p\\!D\\\cb~(\01\t\ed\b8\fd6\n\ff\fd\cb\01\9e\c3\ac\12\80O\cbNEXT without FO\d2Variable not foun\e4Subscript wron\e7Out of memor\f9Out of scree\eeNumber too bi\e7RETURN without GOSU\c2End of fil\e5STOP statemen\f4Invalid argumen\f4Integer out of rang\e5Nonsense in BASI\c3BREAK - CONT repeat\f3Out of DAT\c1Invalid file nam\e5No room for lin\e5STOP in INPU\d4FOR without NEX\d4Invalid I/O devic\e5Invalid colou\f2BREAK into progra\edRAMTOP no goo\e4Statement los\f4Invalid strea\edFN without DE\c6Parameter erro\f2Tape loading erro\f2,\a0\7f 1982 Sinclair Research Lt\e4>\10\01\00\00\c3\13\13\edCI\\*]\\\eb!U\15\e5*a\\7\edR\e5`i\cdn\19 \06\cd\b8\19\cd\e8\19\c1y=\b0((\c5\03\03\03\03+\ed[S\\\d5\cdU\16\e1\"S\\\c1\c5\13*a\\++\ed\b8*I\\\eb\c1p+q+s+r\f1\c3\a2\12\f4\t\a8\10K\f4\t\c4\15S\81\0f\c4\15R\f4\t\c4\15P\80\cf\12\01\00\06\00\0b\00\01\00\01\00\06\00\10\00\fd\cb\02n \04\fd\cb\02\de\cd\e6\15\d8(\fa\cf\07\d9\e5*Q\\##\18\08\1e0\83\d9\e5*Q\\^#V\eb\cd,\16\e1\d9\c9\87\c6\16o&\\^#Vz\b3 \02\cf\17\1b*O\\\19\"Q\\\fd\cb0\a6####N!-\16\cd\dc\16\d0\16\00^\19\e9K\06S\12P\1b\00\fd\cb\02\c6\fd\cb\01\ae\fd\cb0\e6\18\04\fd\cb\02\86\fd\cb\01\8e\c3M\0d\fd\cb\01\ce\c9\01\01\00\e5\cd\05\1f\e1\cdd\16*e\\\eb\ed\b8\c9\f5\e5!K\\>\0e^#V\e3\a7\edR\19\e30\t\d5\eb\t\ebr+s#\d1#= \e8\eb\d1\f1\a7\edRDM\03\19\eb\c9\00\00\eb\11\8f\16~\e6\c0 \f7V#^\c9*c\\+\cdU\16##\c1\edCa\\\c1\eb#\c9*Y\\6\0d\"[\\#6\80#\"a\\*a\\\"c\\*c\\\"e\\\e5!\92\\\"h\\\e1\c9\ed[Y\\\c3\e5\19#~\a7\c8\b9# \f87\c9\cd\1e\17\cd\01\17\01\00\00\11\e2\a3\eb\198\07\01\d4\15\tN#F\ebq#p\c9\e5*O\\\t###N\eb!\16\17\cd\dc\16N\06\00\t\e9K\05S\03P\01\e1\c9\cd\94\1e\fe\108\02\cf\17\c6\03\07!\10\\O\06\00\tN#F+\c9\ef\018\cd\1e\17x\b1(\16\eb*O\\\t###~\eb\feK(\08\feS(\04\feP \cf\cd]\17s#r\c9\e5\cd\f1+x\b1 \02\cf\0e\c5\1a\e6\dfO!z\17\cd\dc\160\f1N\06\00\t\c1\e9K\06S\08P\n\00\1e\01\18\06\1e\06\18\02\1e\10\0bx\b1 \d5W\e1\c9\18\90\eds?\\\fd6\02\10\cd\af\0d\fd\cb\02\c6\fdF1\cdD\0e\fd\cb\02\86\fd\cb0\c6*I\\\ed[l\\\a7\edR\198\"\d5\cdn\19\11\c0\02\eb\edR\e3\cdn\19\c1\c5\cd\b8\19\c1\t8\0e\ebV#^+\edSl\\\18\ed\"l\\*l\\\cdn\19(\01\eb\cd3\18\fd\cb\02\a6\c9>\03\18\02>\02\fd6\02\00\cd0%\c4\01\16\df\cdp 8\14\df\fe;(\04\fe, \06\e7\cd\82\1c\18\08\cd\e6\1c\18\03\cd\de\1c\cd\ee\1b\cd\99\1ex\e6?gi\"I\\\cdn\19\1e\01\cdU\18\d7\fd\cb\02f(\f6:k\\\fd\96O \ee\ab\c8\e5\d5!l\\\cd\0f\19\d1\e1\18\e0\edKI\\\cd\80\19\16>(\05\11\00\00\cb\13\fds-~\fe@\c1\d0\c5\cd(\1a###\fd\cb\01\86z\a7(\05\d7\fd\cb\01\c6\d5\eb\fd\cb0\96!;\\\cb\96\fd\cb7n(\02\cb\d6*_\\\a7\edR \05>?\cd\c1\18\cd\e1\18\eb~\cd\b6\18#\fe\0d(\06\eb\cd7\19\18\e0\d1\c9\fe\0e\c0######~\c9\d9*\8f\\\e5\cb\bc\cb\fd\"\8f\\!\91\\V\d56\00\cd\f4\t\e1\fdtW\e1\"\8f\\\d9\c9*[\\\a7\edR\c0:A\\\cb\07(\04\c6C\18\16!;\\\cb\9e>K\cbV(\0b\cb\de<\fd\cb0^(\02>C\d5\cd\c1\18\d1\c9^#V\e5\eb#\cdn\19\cd\95\16\e1\fd\cb7n\c0r+s\c9{\a7\f8\18\0d\af\t<8\fc\edB=(\f1\c3\ef\15\cd\1b-00\fe!8,\fd\cb\01\96\fe\cb($\fe: \0e\fd\cb7n \16\fd\cb0V(\14\18\0e\fe\" \n\f5:j\\\ee\042j\\\f1\fd\cb\01\d6\d7\c9\e5*S\\T]\c1\cd\80\19\d0\c5\cd\b8\19\eb\18\f4~\b8\c0#~+\b9\c9###\"]\\\0e\00\15\c8\e7\bb \04\a7\c9#~\cd\b6\18\"]\\\fe\" \01\0d\fe:(\04\fe\cb \04\cbA(\df\fe\0d \e3\157\c9\e5~\fe@8\17\cbo(\14\87\fa\c7\19?\01\05\000\02\0e\12\17#~0\fb\18\06##N#F#\t\d1\a7\edRDM\19\eb\c9\cd\dd\19\c5x/Gy/O\03\cdd\16\eb\e1\19\d5\ed\b0\e1\c9*Y\\+\"]\\\e7!\92\\\"e\\\cd;-\cd\a2-8\04!\f0\d8\t\da\8a\1c\c3\c5\16\d5\e5\af\cbx  `i\1e\ff\18\08\d5V#^\e5\eb\1e \01\18\fc\cd*\19\01\9c\ff\cd*\19\0e\f6\cd*\19}\cd\ef\15\e1\d1\c9\b1\cb\bc\bf\c4\af\b4\93\91\92\95\98\98\98\98\98\98\98\7f\81.lnpH\94V?A+\17\1f7wD\0fY+C-Q:mB\0dI\\D\15]\01=\02\06\00g\1e\06\cb\05\f0\1c\06\00\ed\1e\00\ee\1c\00#\1f\04=\06\cc\06\05\03\1d\04\00\ab\1d\05\cd\1f\05\89 \05\02,\05\b2\1b\00\b7\11\03\a1\1e\05\f9\17\08\00\80\1e\03O\1e\00_\1e\03\ac\1e\00k\0d\t\00\dc\"\06\00:\1f\05\ed\1d\05\'\1e\03B\1e\t\05\82#\00\ac\0e\05\c9\1f\05\f5\17\0b\0b\0b\0b\08\00\f8\03\t\05 #\07\07\07\07\07\07\08\00z\1e\06\00\94\"\05`\1f\06,\n\006\17\06\00\e5\16\n\00\93\17\n,\n\00\93\17\n\00\93\17\00\93\17\fd\cb\01\be\cd\fb\19\af2G\\=2:\\\18\01\e7\cd\bf\16\fd4\0d\fa\8a\1c\df\06\00\fe\0d(z\fe:(\eb!v\1b\e5O\e7y\d6\ce\da\8a\1cO!H\1a\tN\t\18\03*t\\~#\"t\\\01R\1b\c5O\fe 0\0c!\01\1c\06\00\tN\t\e5\df\05\c9\df\b9\c2\8a\1c\e7\c9\cdT\1f8\02\cf\14\fd\cb\n~ q*B\\\cb|(\14!\fe\ff\"E\\*a\\+\ed[Y\\\1b:D\\\183\cdn\19:D\\(\19\a7 CG~\e6\c0x(\0f\cf\ff\c1\cd0%\c8*U\\>\c0\a6\c0\af\fe\01\ce\00V#^\edSE\\#^#V\eb\19#\"U\\\eb\"]\\W\1e\00\fd6\n\ff\15\fdr\0d\ca(\1b\14\cd\8b\19(\08\cf\16\cd0%\c0\c1\c1\df\fe\0d(\ba\fe:\ca(\1b\c3\8a\1c\0f\1dK\tg\0b{\8eq\b4\81\cf\cd\de\1c\bf\c1\cc\ee\1b\eb*t\\N#F\eb\c5\c9\cd\b2(\fd67\000\08\fd\cb7\ce \18\cf\01\cc\96)\fd\cb\01v \0d\af\cd0%\c4\f1+!q\\\b6w\eb\edCr\\\"M\\\c9\c1\cdV\1c\cd\ee\1b\c9:;\\\f5\cd\fb$\f1\fdV\01\aa\e6@ $\cbz\c2\ff*\c9\cd\b2(\f5y\f6\9f< \14\f1\18\a9\e7\cd\82\1c\fe, \t\e7\cd\fb$\fd\cb\01v\c0\cf\0b\cd\fb$\fd\cb\01v\c8\18\f4\fd\cb\01~\fd\cb\02\86\c4M\0d\f1:t\\\d6\13\cd\fc!\cd\ee\1b*\8f\\\"\8d\\!\91\\~\07\ae\e6\aa\aew\c9\cd0%(\13\fd\cb\02\86\cdM\0d!\90\\~\f6\f8w\fd\cbW\b6\df\cd\e2!\18\9f\c3\05\06\fe\0d(\04\fe: \9c\cd0%\c8\ef\a08\c9\cf\08\c1\cd0%(\n\ef\028\eb\cd\e94\da\b3\1b\c3)\1b\fe\cd \t\e7\cd\82\1c\cd\ee\1b\18\06\cd\ee\1b\ef\a18\ef\c0\02\01\e0\018\cd\ff*\"h\\+~\cb\fe\01\06\00\t\078\06\0e\0d\cdU\16#\e5\ef\02\028\e1\eb\0e\n\ed\b0*E\\\ebs#r\fdV\0d\14#r\cd\da\1d\d0\fdF8*E\\\"B\\:G\\\edDW*]\\\1e\f3\c5\edKU\\\cd\86\1d\edCU\\\c18\11\e7\f6 \b8(\03\e7\18\e8\e7>\01\922D\\\c9\cf\11~\fe:(\18#~\e6\c07\c0F#N\edCB\\#N#F\e5\tDM\e1\16\00\c5\cd\8b\19\c1\d0\18\e0\fd\cb7N\c2.\1c*M\\\cb~(\1f#\"h\\\ef\e0\e2\0f\c0\028\cd\da\1d\d8*h\\\11\0f\00\19^#V#f\eb\c3s\1e\cf\00\ef\e1\e0\e26\00\02\01\037\00\048\a7\c987\c9\e7\cd\1f\1c\cd0%()\df\"_\\*W\\~\fe,(\t\1e\e4\cd\86\1d0\02\cf\0d\cdw\00\cdV\1c\df\"W\\*_\\\fd6&\00\cdx\00\df\fe,(\c9\cd\ee\1b\c9\cd0% \0b\cd\fb$\fe,\c4\ee\1b\e7\18\f5>\e4G\ed\b9\11\00\02\c3\8b\19\cd\99\1e`i\cdn\19+\"W\\\c9\cd\99\1ex\b1 \04\edKx\\\edCv\\\c9*n\\\fdV6\18\0c\cd\99\1e`i\16\00|\fe\f00,\"B\\\fdr\n\c9\cd\85\1e\edy\c9\cd\85\1e\02\c9\cd\d5-8\15(\02\edD\f5\cd\99\1e\f1\c9\cd\d5-\18\03\cd\a2-8\01\c8\cf\n\cdg\1e\01\00\00\cdE\1e\18\03\cd\99\1ex\b1 \04\edK\b2\\\c5\ed[K\\*Y\\+\cd\e5\19\cdk\0d*e\\\112\00\19\d1\edR0\08*\b4\\\a7\edR0\02\cf\15\eb\"\b2\\\d1\c16>+\f9\c5\eds=\\\eb\e9\d1\fdf\0d$\e33\edKE\\\c5\e5\eds=\\\d5\cdg\1e\01\14\00*e\\\t8\n\eb!P\00\198\03\edr\d8.\03\c3U\00\01\00\00\cd\05\1fDM\c9\c1\e1\d1z\fe>(\0b;\e3\eb\eds=\\\c5\c3s\1e\d5\e5\cf\06\cd\99\1ev\0bx\b1(\0cx\a1< \01\03\fd\cb\01n(\ee\fd\cb\01\ae\c9>\7f\db\fe\1f\d8>\fe\db\fe\1f\c9\cd0%(\05>\ce\c39\1e\fd\cb\01\f6\cd\8d,0\16\e7\fe$ \05\fd\cb\01\b6\e7\fe( <\e7\fe)( \cd\8d,\d2\8a\1c\eb\e7\fe$ \02\eb\e7\eb\01\06\00\cdU\16##6\0e\fe, \03\e7\18\e0\fe) \13\e7\fe= \0e\e7:;\\\f5\cd\fb$\f1\fd\ae\01\e6@\c2\8a\1c\cd\ee\1b\cd0%\e1\c8\e9>\03\18\02>\02\cd0%\c4\01\16\cdM\0d\cd\df\1f\cd\ee\1b\c9\df\cdE (\0d\cdN (\fb\cd\fc\1f\cdN (\f3\fe)\c8\cd\c3\1f>\0d\d7\c9\df\fe\ac \0d\cdy\1c\cd\c3\1f\cd\07#>\16\18\10\fe\ad \12\e7\cd\82\1c\cd\c3\1f\cd\99\1e>\17\d7y\d7x\d7\c9\cd\f2!\d0\cdp \d0\cd\fb$\cd\c3\1f\fd\cb\01v\cc\f1+\c2\e3-x\b1\0b\c8\1a\13\d7\18\f7\fe)\c8\fe\0d\c8\fe:\c9\df\fe;(\14\fe, \n\cd0%(\0b>\06\d7\18\06\fe\'\c0\cd\f5\1f\e7\cdE  \01\c1\bf\c9\fe#7\c0\e7\cd\82\1c\a7\cd\c3\1f\cd\94\1e\fe\10\d2\0e\16\cd\01\16\a7\c9\cd0%(\08>\01\cd\01\16\cdn\0d\fd6\02\01\cd\c1 \cd\ee\1b\edK\88\\:k\\\b88\03\0e!G\edC\88\\>\19\902\8c\\\fd\cb\02\86\cd\d9\0d\c3n\0d\cdN (\fb\fe( \0e\e7\cd\df\1f\df\fe)\c2\8a\1c\e7\c3\b2!\fe\ca \11\e7\cd\1f\1c\fd\cb7\fe\fd\cb\01v\c2\8a\1c\18\0d\cd\8d,\d2\af!\cd\1f\1c\fd\cb7\be\cd0%\ca\b2!\cd\bf\16!q\\\cb\b6\cb\ee\01\01\00\cb~ \0b:;\\\e6@ \02\0e\03\b6w\f76\0dy\0f\0f0\05>\"\12+w\"[\\\fd\cb7~ ,*]\\\e5*=\\\e5!:!\e5\fd\cb0f(\04\eds=\\*a\\\cd\a7\11\fd6\00\ff\cd,\0f\fd\cb\01\be\cd\b9!\18\03\cd,\0f\fd6\"\00\cd\d6! \n\cd\1d\11\edK\82\\\cd\d9\0d!q\\\cb\ae\cb~\cb\be \1c\e1\e1\"=\\\e1\"_\\\fd\cb\01\fe\cd\b9!*_\\\fd6&\00\"]\\\18\17*c\\\ed[a\\7\edRDM\cd\b2*\cd\ff*\18\03\cd\fc\1f\cdN \ca\c1 \c9*a\\\"]\\\df\fe\e2(\0c:q\\\cdY\1c\df\fe\0d\c8\cf\0b\cd0%\c8\cf\10*Q\\####~\feK\c9\e7\cd\f2!\d8\df\fe,(\f6\fe;(\f2\c3\8a\1c\fe\d9\d8\fe\df?\d8\f5\e7\f1\d6\c9\f5\cd\82\1c\f1\a7\cd\c3\1f\f5\cd\94\1eW\f1\d7z\d7\c9\d6\11\ce\00(\1d\d6\02\ce\00(V\fe\01z\06\01 \04\07\07\06\04Oz\fe\020\16y!\91\\\188z\06\078\05\07\07\07\068Oz\fe\n8\02\cf\13!\8f\\\fe\088\0b~(\07\b0/\e6$(\01xOy\cdl\">\07\ba\9f\cdl\"\07\07\e6PG>\08\ba\9f\ae\a0\aew#x\c9\9fz\0f\06\80 \03\0f\06@Oz\fe\08(\04\fe\020\bdy!\8f\\\cdl\"y\0f\0f\0f\18\d8\cd\94\1e\fe\080\a9\d3\fe\07\07\07\cbo \02\ee\072H\\\c9>\af\90\da\f9$G\a7\1f7\1f\a7\1f\a8\e6\f8\a8gy\07\07\07\a8\e6\c7\a8\07\07oy\e6\07\c9\cd\07#\cd\aa\"G\04~\07\10\fd\e6\01\c3(-\cd\07#\cd\e5\"\c3M\0d\edC}\\\cd\aa\"G\04>\fe\0f\10\fdG~\fdNW\cbA \01\a0\cbQ \02\a8/w\c3\db\0b\cd\14#G\c5\cd\14#Y\c1QO\c9\cd\d5-\da\f9$\0e\01\c8\0e\ff\c9\df\fe,\c2\8a\1c\e7\cd\82\1c\cd\ee\1b\ef*=8~\fe\810\05\ef\028\18\a1\ef\a386\83\ef\c5\028\cd}$\c5\ef1\e1\048~\fe\800\08\ef\02\028\c1\c3\dc\"\ef\c2\01\c0\02\03\01\e0\0f\c0\011\e0\011\e0\a0\c1\028\fd4b\cd\94\1eo\e5\cd\94\1e\e1g\"}\\\c1\c3 $\df\fe,(\06\cd\ee\1b\c3w$\e7\cd\82\1c\cd\ee\1b\ef\c5\a2\04\1f100\00\06\028\c3w$\c0\02\c1\021*\e1\01\e1*\0f\e0\05*\e0\01=8~\fe\810\07\ef\02\028\c3w$\cd}$\c5\ef\02\e1\01\05\c1\02\011\e1\04\c2\02\011\e1\04\e2\e5\e0\03\a2\041\1f\c5\02 \c0\02\c2\02\c1\e5\04\e0\e2\04\0f\e1\01\c1\02\e0\04\e2\e5\04\03\c2*\e1*\0f\028\1a\fe\81\c1\daw$\c5\ef\018:}\\\cd(-\ef\c0\0f\018:~\\\cd(-\ef\c5\0f\e0\e58\c1\05(<\18\14\ef\e11\e3\04\e2\e4\04\03\c1\02\e4\04\e2\e3\04\0f\c2\028\c5\ef\c0\02\e1\0f18:}\\\cd(-\ef\03\e0\e2\0f\c0\01\e08:~\\\cd(-\ef\038\cd\b7$\c1\10\c6\ef\02\02\018:}\\\cd(-\ef\03\018:~\\\cd(-\ef\038\cd\b7$\c3M\0d\ef1(42\00\01\05\e5\01\05*8\cd\d5-8\06\e6\fc\c6\040\02>\fc\f5\cd(-\ef\e5\01\051\1f\c4\021\a2\04\1f\c1\01\c0\021\041\0f\a1\03\1b\c3\028\c1\c9\cd\07#y\b80\06i\d5\af_\18\07\b1\c8hA\d5\16\00`x\1f\858\03\bc8\07\94O\d9\c1\c5\18\04O\d5\d9\c1*}\\x\84Gy<\858\0d(\0d=O\cd\e5\"\d9y\10\d9\d1\c9(\f3\cf\n\df\06\00\c5O!\96%\cd\dc\16y\d2\84&\06\00N\t\e9\cdt\00\03\fe\0d\ca\8a\1c\fe\" \f3\cdt\00\fe\"\c9\e7\fe( \06\cdy\1c\df\fe)\c2\8a\1c\fd\cb\01~\c9\cd\07#*6\\\11\00\01\19y\0f\0f\0f\e6\e0\a8_y\e6\18\ee@W\06`\c5\d5\e5\1a\ae(\04< \1a=O\06\07\14#\1a\ae\a9 \0f\10\f7\c1\c1\c1>\80\90\01\01\00\f7\12\18\n\e1\11\08\00\19\d1\c1\10\d3H\c3\b2*\cd\07#y\0f\0f\0fO\e6\e0\a8oy\e6\03\eeXg~\c3(-\"\1c(O.\f2+\12\a8V\a5W\a7\84\a6\8f\c4\e6\aa\bf\ab\c7\a9\ce\00\e7\c3\ff$\df#\e5\01\00\00\cd\0f% \1b\cd\0f%(\fb\cd0%(\11\f7\e1\d5~#\12\13\fe\" \f8~#\fe\"(\f2\0b\d1!;\\\cb\b6\cb~\c4\b2*\c3\12\'\e7\cd\fb$\fe)\c2\8a\1c\e7\c3\12\'\c3\bd\'\cd0%((\edKv\\\cd+-\ef\a1\0f47\16\044\80A\00\00\802\02\a1\0318\cd\a2-\edCv\\~\a7(\03\d6\10w\18\t\cd0%(\04\ef\a384\e7\c3\c3&\01Z\10\e7\fe#\ca\0d\'!;\\\cb\b6\cb~(\1f\cd\8e\02\0e\00 \13\cd\1e\030\0e\15_\cd3\03\f5\01\01\00\f7\f1\12\0e\01\06\00\cd\b2*\c3\12\'\cd\"%\c45%\e7\c3\db%\cd\"%\c4\80%\e7\18H\cd\"%\c4\cb\"\e7\18?\cd\88,0V\feA0<\cd0% #\cd\9b,\df\01\06\00\cdU\16#6\0e#\eb*e\\\0e\05\a7\edB\"e\\\ed\b0\eb+\cdw\00\18\0e\df#~\fe\0e \fa#\cd\b43\"]\\\fd\cb\01\f6\18\14\cd\b2(\da.\1c\cc\96):;\\\fe\c08\04#\cd\b43\183\01\db\t\fe-(\'\01\18\10\fe\ae( \d6\af\da\8a\1c\01\f0\04\fe\14(\14\d2\8a\1c\06\10\c6\dcO\fe\df0\02\cb\b1\fe\ee8\02\cb\b9\c5\e7\c3\ff$\df\fe( \0c\fd\cb\01v \17\cdR*\e7\18\f0\06\00O!\95\'\cd\dc\160\06N!\ed&\tF\d1z\b88:\a7\ca\18\00\c5!;\\{\fe\ed \06\cbv \02\1e\99\d5\cd0%(\t{\e6?G\ef;8\18\t{\fd\ae\01\e6@\c2\8a\1c\d1!;\\\cb\f6\cb{ \02\cb\b6\c1\18\c1\d5y\fd\cb\01v \15\e6?\c6\08O\fe\10 \04\cb\f1\18\088\d7\fe\17(\02\cb\f9\c5\e7\c3\ff$+\cf-\c3*\c4/\c5^\c6=\ce>\cc<\cd\c7\c9\c8\ca\c9\cb\c5\c7\c6\c8\00\06\08\08\n\02\03\05\05\05\05\05\05\06\cd0% 5\e7\cd\8d,\d2\8a\1c\e7\fe$\f5 \01\e7\fe( \12\e7\fe)(\10\cd\fb$\df\fe, \03\e7\18\f5\fe)\c2\8a\1c\e7!;\\\cb\b6\f1(\02\cb\f6\c3\12\'\e7\e6\dfG\e7\d6$O \01\e7\e7\e5*S\\+\11\ce\00\c5\cd\86\1d\c10\02\cf\18\e5\cd\ab(\e6\df\b8 \08\cd\ab(\d6$\b9(\0c\e1+\11\00\02\c5\cd\8b\19\c1\18\d7\a7\cc\ab(\d1\d1\edS]\\\cd\ab(\e5\fe)(B#~\fe\0e\16@(\07+\cd\ab(#\16\00#\e5\d5\cd\fb$\f1\fd\ae\01\e6@ +\e1\eb*e\\\01\05\00\edB\"e\\\ed\b0\eb+\cd\ab(\fe)(\0d\e5\df\fe, \0d\e7\e1\cd\ab(\18\be\e5\df\fe)(\02\cf\19\d1\eb\"]\\*\0b\\\e3\"\0b\\\d5\e7\e7\cd\fb$\e1\"]\\\e1\"\0b\\\e7\c3\12\'#~\fe!8\fa\c9\fd\cb\01\f6\df\cd\8d,\d2\8a\1c\e5\e6\1fO\e7\e5\fe(((\cb\f1\fe$(\11\cb\e9\cd\88,0\0f\cd\88,0\16\cb\b1\e7\18\f6\e7\fd\cb\01\b6:\0c\\\a7(\06\cd0%\c2Q)A\cd0% \08y\e6\e0\cb\ffO\187*K\\~\e6\7f(-\b9 \"\17\87\f2?)80\d1\d5\e5#\1a\13\fe (\fa\f6 \be(\f4\f6\80\be \06\1a\cd\88,0\15\e1\c5\cd\b8\19\eb\c1\18\ce\cb\f8\d1\df\fe((\t\cb\e8\18\0d\d1\d1\d1\e5\df\cd\88,0\03\e7\18\f8\e1\cb\10\cbp\c9*\0b\\~\fe)\ca\ef(~\f6`G#~\fe\0e(\07+\cd\ab(#\cb\a8x\b9(\12#####\cd\ab(\fe)\ca\ef(\cd\ab(\18\d9\cbi \0c#\ed[e\\\cd\c03\eb\"e\\\d1\d1\af<\c9\afG\cby K\cb~ \0e<#N#F#\eb\cd\b2*\df\c3I*###F\cbq(\n\05(\e8\eb\df\fe( a\eb\eb\18$\e5\df\e1\fe,( \cby(R\cbq \06\fe) <\e7\c9\fe)(l\fe\cc 2\df+\"]\\\18^!\00\00\e5\e7\e1y\fe\c0 \t\df\fe)(Q\fe\cc(\e5\c5\e5\cd\ee*\e3\eb\cd\cc*8\19\0b\cd\f4*\t\d1\c1\10\b3\cby f\e5\cbq \13BK\df\fe)(\02\cf\02\e7\e1\11\05\00\cd\f4*\t\c9\cd\ee*\e3\cd\f4*\c1\t#BK\eb\cd\b1*\df\fe)(\07\fe, \db\cdR*\e7\fe((\f8\fd\cb\01\b6\c9\cd0%\c4\f1+\e7\fe)(P\d5\af\f5\c5\11\01\00\df\e1\fe\cc(\17\f1\cd\cd*\f5PY\e5\df\e1\fe\cc(\t\fe)\c2\8a\1cbk\18\13\e5\e7\e1\fe)(\0c\f1\cd\cd*\f5\df`i\fe) \e6\f1\e3\19+\e3\a7\edR\01\00\008\07#\a7\fa *DM\d1\fd\cb\01\b6\cd0%\c8\af\fd\cb\01\b6\c5\cd\a93\c1*e\\w#s#r#q#p#\"e\\\c9\af\d5\e5\f5\cd\82\1c\f1\cd0%(\12\f5\cd\99\1e\d1x\b17(\05\e1\e5\a7\edBz\de\00\e1\d1\c9\eb#^#V\c9\cd0%\c8\cd\a90\da\15\1f\c9*M\\\fd\cb7N(^\01\05\00\03#~\fe (\fa0\0b\fe\108\11\fe\160\0d#\18\ed\cd\88,8\e7\fe$\ca\c0+y*Y\\+\cdU\16##\eb\d5*M\\\1b\d6\06G(\11#~\fe!8\fa\f6 \13\12\10\f4\f6\80\12>\c0*M\\\ae\f6 \e1\cd\ea+\e5\ef\028\e1\01\05\00\a7\edB\18@\fd\cb\01v(\06\11\06\00\19\18\e7*M\\\edKr\\\fd\cb7F 0x\b1\c8\e5\f7\d5\c5T]#6 \ed\b8\e5\cd\f1+\e1\e3\a7\edB\t0\02DM\e3\ebx\b1(\02\ed\b0\c1\d1\e1\ebx\b1\c8\d5\ed\b0\e1\c9+++~\e5\c5\cd\c6+\c1\e1\03\03\03\c3\e8\19>\df*M\\\a6\f5\cd\f1+\eb\t\c5+\"M\\\03\03\03*Y\\+\cdU\16*M\\\c1\c5\03\ed\b8\eb#\c1p+q\f1+w*Y\\+\c9*e\\+F+N+V+^+~\"e\\\c9\cd\b2(\c2\8a\1c\cd0% \08\cb\b1\cd\96)\cd\ee\1b8\08\c5\cd\b8\19\cd\e8\19\c1\cb\f9\06\00\c5!\01\00\cbq \02.\05\eb\e7&\ff\cd\cc*\da *\e1\c5$\e5`i\cd\f4*\eb\df\fe,(\e8\fe) \bb\e7\c1yh&\00##)\19\da\15\1f\d5\c5\e5DM*Y\\+\cdU\16#w\c1\0b\0b\0b#q#p\c1x#wbk\1b6\00\cbq(\026 \c1\ed\b8\c1p+q+= \f8\c9\cd\1b-?\d8\feA?\d0\fe[\d8\fea?\d0\fe{\c9\fe\c4 \19\11\00\00\e7\d61\ce\00 \n\eb?\edj\da\ad1\eb\18\efBK\c3+-\fe.(\0f\cd;-\fe. (\e7\cd\1b-8\"\18\n\e7\cd\1b-\da\8a\1c\ef\a08\ef\a1\c0\028\df\cd\"-8\0b\ef\e0\a4\05\c0\04\0f8\e7\18\ef\feE(\03\fee\c0\06\ff\e7\fe+(\05\fe- \02\04\e7\cd\1b-8\cb\c5\cd;-\cd\d5-\c1\da\ad1\a7\fa\ad1\04(\02\edD\c3O-\fe0\d8\fe:?\c9\cd\1b-\d8\d60O\06\00\fd!:\\\af_QHG\cd\b6*\ef8\a7\c9\f5\ef\a08\f1\cd\"-\d8\ef\01\a4\04\0f8\cdt\00\18\f1\07\0f0\02/<\f5!\92\\\cd\0b5\ef\a48\f1\cb?0\0d\f5\ef\c1\e0\00\04\043\02\05\e18\f1(\08\f5\ef1\048\f1\18\e5\ef\028\c9#N#~\a9\91_#~\89\a9W\c9\0e\00\e56\00#q#{\a9\91w#z\89\a9w#6\00\e1\c9\ef8~\a7(\05\ef\a2\0f\'8\ef\028\e5\d5\ebF\cd\7f-\af\90\cbyBK{\d1\e1\c9W\17\9f_O\afG\cd\b6*\ef4\ef\1a \9a\85\04\'8\cd\a2-\d8\f5\05\04(\03\f17\c9\f1\c9\ef16\00\0b17\00\0d\028>0\d7\c9*8>-\d7\ef\a0\c3\c4\c5\028\d9\e5\d9\ef1\'\c2\03\e2\01\c2\028~\a7 G\cd\7f-\06\10z\a7 \06\b3(\tS\06\08\d5\d9\d1\d9\18W\ef\e28~\d6~\cd\c1-W:\ac\\\922\ac\\z\cdO-\ef1\'\c1\03\e18\cd\d5-\e52\a1\\=\17\9f<!\ab\\w#\86w\e1\c3\cf.\d6\80\fe\1c8\13\cd\c1-\d6\07G!\ac\\\86wx\edD\cdO-\18\92\eb\cd\ba/\d9\cb\fa}\d9\d6\80G\cb#\cb\12\d9\cb\13\cb\12\d9!\aa\\\0e\05~\8f\'w+\0d \f8\10\e7\af!\a6\\\11\a1\\\06\t\edo\0e\ff\edo \04\0d\0c \n\12\13\fd4q\fd4r\0e\00\cb@(\01#\10\e7:\ab\\\d6\t8\n\fd5q>\04\fd\beo\18A\ef\02\e28\eb\cd\ba/\d9>\80\95.\00\cb\fa\d9\cd\dd/\fd~q\fe\088\06\d9\cb\12\d9\18 \01\00\02{\cd\8b/_z\cd\8b/W\c5\d9\c1\10\f1!\a1\\y\fdNq\tw\fd4q\18\d3\f5!\a1\\\fdNq\06\00\tA\f1+~\ce\00w\a7(\05\fe\n?0\08\10\f16\01\04\fd4r\fdpq\ef\028\d9\e1\d9\edK\ab\\!\a1\\x\fe\t8\04\fe\fc8&\a7\cc\ef\15\af\90\faR/G\18\0cy\a7(\03~#\0d\cd\ef\15\10\f4y\a7\c8\04>.\d7>0\10\fbA\18\e6P\15\06\01\cdJ/>E\d7Jy\a7\f2\83/\edDO>-\18\02>+\d7\06\00\c3\1b\1a\d5o&\00]T))\19)Y\19L}\d1\c9~6\00\a7\c8#\cb~\cb\fe+\c8\c5\01\05\00\tAO7+~/\ce\00w\10\f8y\c1\c9\e5\f5N#Fw#yN\c5#N#F\ebW^\d5#V#^\d5\d9\d1\e1\c1\d9#V#^\f1\e1\c9\a7\c8\fe!0\16\c5G\d9\cb-\cb\1a\cb\1b\d9\cb\1a\cb\1b\10\f2\c1\d0\cd\040\c0\d9\af.\00W]\d9\11\00\00\c9\1c\c0\14\c0\d9\1c \01\14\d9\c9\eb\cdn4\eb\1a\b6 &\d5#\e5#^#V###~#N#F\e1\eb\t\eb\8e\0f\ce\00 \0b\9fw#s#r+++\d1\c9+\d1\cd\932\d9\e5\d9\d5\e5\cd\9b/G\eb\cd\9b/O\b80\03xA\eb\f5\90\cd\ba/\cd\dd/\f1\e1w\e5ha\19\d9\eb\edJ\eb|\8do\1f\ad\d9\eb\e1\1f0\08>\01\cd\dd/4(#\d9}\e6\80\d9#w+(\1f{\edD?_z/\ce\00W\d9{/\ce\00_z/\ce\000\07\1f\d94\ca\ad1\d9W\d9\af\c3U1\c5\06\10|M!\00\00)8\n\cb\11\170\03\198\02\10\f3\c1\c9\cd\e94\d8#\ae\cb\fe+\c9\1a\b6 \"\d5\e5\d5\cd\7f-\eb\e3A\cd\7f-x\a9O\e1\cd\a90\eb\e18\nz\b3 \01O\cd\8e-\d1\c9\d1\cd\932\af\cd\c00\d8\d9\e5\d9\d5\eb\cd\c00\eb8Z\e5\cd\ba/x\a7\edb\d9\e5\edb\d9\06!\18\110\05\19\d9\edZ\d9\d9\cb\1c\cb\1d\d9\cb\1c\cb\1d\d9\cb\18\cb\19\d9\cb\19\1f\10\e4\eb\d9\eb\d9\c1\e1x\81 \01\a7=?\17?\1f\f2F10h\a7< \088\06\d9\cbz\d9 \\w\d9x\d90\15~\a7>\80(\01\af\d9\a2\cd\fb/\07w8.#w+\18)\06 \d9\cbz\d9 \12\07\cb\13\cb\12\d9\cb\13\cb\12\d95(\d7\10\ea\18\d7\170\0c\cd\040 \07\d9\16\80\d94(\18\e5#\d9\d5\d9\c1x\17\cb\16\1fw#q#r#s\e1\d1\d9\e1\d9\c9\cf\05\cd\932\eb\af\cd\c008\f4\eb\cd\c00\d8\d9\e5\d9\d5\e5\cd\ba/\d9\e5`i\d9ah\af\06\df\18\10\17\cb\11\d9\cb\11\cb\10\d9)\d9\edj\d98\10\edR\d9\edR\d90\0f\19\d9\edZ\d9\a7\18\08\a7\edR\d9\edR\d97\04\fa\d21\f5(\e1_Q\d9YP\f1\cb\18\f1\cb\18\d9\c1\e1x\91\c3=1~\a7\c8\fe\810\066\00> \18Q\fe\91 \1a###>\80\a6+\b6+ \03>\80\ae+ 6w#6\ff+>\18\1830,\d5/\c6\91#V#^++\0e\00\cbz(\01\0d\cb\fa\06\08\90\808\04Z\16\00\90(\07G\cb:\cb\1b\10\fa\cd\8e-\d1\c9~\d6\a0\f0\edD\d5\eb+G\cb8\cb8\cb8(\056\00+\10\fb\e6\07(\tG>\ff\cb\'\10\fc\a6w\eb\d1\c9\cd\962\eb~\a7\c0\d5\cd\7f-\af#w+w\06\91z\a7 \08\b3B(\10SX\06\89\eb\05)0\fc\cb\t\cb\1c\cb\1d\eb+s+r+p\d1\c9\00\b0\00@\b0\00\010\00\f1I\0f\da\a2@\b0\00\n\8f6<4\a13\0f0\ca0\af1Q8\1b5$5;5;5;5;5;5;5\140-5;5;5;5;5;5;5\9c5\de5\bc4E6n4i6\de5t6\b57\aa7\da738C8\e27\137\c46\af6J8\924j4\ac4\a54\b34\1f6\c95\015\c03\a06\866\c63z6\065\f94\9b6\837\142\a23O-\972I4\1b4-4\0f4\cd\bf5x2g\\\d9\e3\d9\edSe\\\d9~#\e5\a7\f2\803W\e6`\0f\0f\0f\0f\c6|oz\e6\1f\18\0e\fe\180\08\d9\01\fb\ffT]\t\d9\07o\11\d72&\00\19^#V!e3\e3\d5\d9\edKf\\\c9\f1:g\\\d9\18\c3\d5\e5\01\05\00\cd\05\1f\e1\d1\c9\ed[e\\\cd\c03\edSe\\\c9\cd\a93\ed\b0\c9bk\cd\a93\d9\e5\d9\e3\c5~\e6\c0\07\07O\0c~\e6? \02#~\c6P\12>\05\91#\13\06\00\ed\b0\c1\e3\d9\e1\d9G\af\05\c8\12\13\18\fa\a7\c8\f5\d5\11\00\00\cd\c83\d1\f1=\18\f2O\07\07\81O\06\00\t\c9\d5*h\\\cd\064\cd\c03\e1\c9bk\d9\e5!\c52\d9\cd\f73\cd\c83\d9\e1\d9\c9\e5\eb*h\\\cd\064\eb\cd\c03\eb\e1\c9\06\05\1aN\eb\12q#\13\10\f7\eb\c9G\cd^31\0f\c0\02\a0\c21\e0\04\e2\c1\038\cd\c63\cdb3\0f\01\c2\025\ee\e1\038\c9\06\ff\18\06\cd\e94\d8\06\00~\a7(\0b#x\e6\80\b6\17?\1fw+\c9\d5\e5\cd\7f-\e1x\b1/O\cd\8e-\d1\c9\cd\e94\d8\d5\11\01\00#\cb\16+\9fO\cd\8e-\d1\c9\cd\99\1e\edx\18\04\cd\99\1e\n\c3(-\cd\99\1e!+-\e5\c5\c9\cd\f1+\0bx\b1 #\1a\cd\8d,8\t\d6\908\19\fe\150\15<=\87\87\87\fe\a80\0c\edK{\\\81O0\01\04\c3+-\cf\t\e5\c5G~#\b6#\b6#\b6x\c1\e1\c07\c9\cd\e94\d8>\ff\18\06\cd\e94\18\05\af#\ae+\07\e5>\00w#w#\17w\1f#w#w\e1\c9\eb\cd\e94\eb\d87\18\e7\eb\cd\e94\eb\d0\a7\18\de\eb\cd\e94\eb\d0\d5\1b\af\12\1b\12\d1\c9x\d6\08\cbW \01=\0f0\08\f5\e5\cd<4\d1\eb\f1\cbW \07\0f\f5\cd\0f0\183\0f\f5\cd\f1+\d5\c5\cd\f1+\e1|\b5\e3x \0b\b1\c1(\04\f1?\18\16\f1\18\13\b1(\0d\1a\968\t \ed\0b\13#\e3+\18\df\c1\f1\a7\f5\ef\a08\f1\f5\dc\015\f1\f5\d4\f94\f1\0f\d4\015\c9\cd\f1+\d5\c5\cd\f1+\e1\e5\d5\c5\tDM\f7\cd\b2*\c1\e1x\b1(\02\ed\b0\c1\e1x\b1(\02\ed\b0*e\\\11\fb\ff\e5\19\d1\c9\cd\d5-8\0e \0c\f5\01\01\00\f7\f1\12\cd\b2*\eb\c9\cf\n*]\\\e5x\c6\e3\9f\f5\cd\f1+\d5\03\f7\e1\edS]\\\d5\ed\b0\eb+6\0d\fd\cb\01\be\cd\fb$\df\fe\0d \07\e1\f1\fd\ae\01\e6@\c2\8a\1c\"]\\\fd\cb\01\fe\cd\fb$\e1\"]\\\18\a0\01\01\00\f7\"[\\\e5*Q\\\e5>\ff\cd\01\16\cd\e3-\e1\cd\15\16\d1*[\\\a7\edRDM\cd\b2*\eb\c9\cd\94\1e\fe\10\d2\9f\1e*Q\\\e5\cd\01\16\cd\e6\15\01\00\000\03\0c\f7\12\cd\b2*\e1\cd\15\16\c3\bf5\cd\f1+x\b1(\01\1a\c3(-\cd\f1+\c3+-\d9\e5!g\\5\e1 \04#\d9\c9\d9^{\17\9fW\19\d9\c9\13\13\1a\1b\1b\a7 \ef\d9#\d9\c9\f1\d9\e3\d9\c9\ef\c0\021\e0\05\'\e0\01\c0\04\03\e08\c9\ef16\00\04:8\c91:\c0\03\e0\010\00\03\a1\038\c9\ef=4\f18\aa;)\041\'\c3\031\0f\a1\03\88\136Xef\9dxe@\a2`2\c9\e7!\f7\af$\eb/\b0\b0\14\ee~\bb\94X\f1:~\f8\cf\e38\cd\d5- \078\03\860\t\cf\058\07\960\04\edDw\c9\ef\02\a08\c9\ef=17\00\048\cf\t\a0\028~6\80\cd(-\ef48\00\03\0114\f0L\cc\cc\cd\037\00\08\01\a1\03\0184\ef\014\f01r\17\f8\04\01\a2\03\a2\03142 \04\a2\03\8c\11\ac\14\tV\da\a5Y0\c5\\\90\aa\9epoa\a1\cb\da\96\a41\9f\b4\e7\a0\fe\\\fc\ea\1bC\ca6\ed\a7\9c~^\f0n#\80\93\04\0f8\c9\ef=4\ee\"\f9\83n\041\a2\0f\'\031\0f1\0f1*\a1\0317\c0\00\04\028\c9\a1\03\016\00\02\1b8\c9\ef9*\a1\03\e0\00\06\1b3\03\ef911\041\0f\a1\03\86\14\e6\\\1f\0b\a3\8f8\ee\e9\15c\bb#\ee\92\0d\cd\ed\f1#]\1b\ea\048\c9\ef1\1f\01 \058\c9\cd\972~\fe\818\0e\ef\a1\1b\01\0516\a3\01\00\06\1b3\03\ef\a0\0111\041\0f\a1\03\8c\10\b2\13\0eU\e4\8dX9\bc[\98\fd\9e\006u\a0\db\e8\b4cB\c4\e6\b5\t6\be\e96s\1b]\ec\d8\dec\be\f0a\a1\b3\0c\04\0f8\c9\ef11\04\a1\03\1b(\a1\0f\05$1\0f8\c9\ef\"\a3\03\1b8\c9\ef10\00\1e\a28\ef\0110\00\07%\048\c3\c46\0210\00\t\a0\017\00\06\a1\01\05\02\a18\c9\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
 (data (i32.const 22601) "\10\10\10\10\00\10\00\00$$\00\00\00\00\00\00$~$$~$\00\00\08>(>\n>\08\00bd\08\10&F\00\00\10(\10*D:\00\00\08\10\00\00\00\00\00\00\04\08\08\08\08\04\00\00 \10\10\10\10 \00\00\00\14\08>\08\14\00\00\00\08\08>\08\08\00\00\00\00\00\00\08\08\10\00\00\00\00>\00\00\00\00\00\00\00\00\18\18\00\00\00\02\04\08\10 \00\00<FJRb<\00\00\18(\08\08\08>\00\00<B\02<@~\00\00<B\0c\02B<\00\00\08\18(H~\08\00\00~@|\02B<\00\00<@|BB<\00\00~\02\04\08\10\10\00\00<B<BB<\00\00<BB>\02<\00\00\00\00\10\00\00\10\00\00\00\10\00\00\10\10 \00\00\04\08\10\08\04\00\00\00\00>\00>\00\00\00\00\10\08\04\08\10\00\00<B\04\08\00\08\00\00<JV^@<\00\00<BB~BB\00\00|B|BB|\00\00<B@@B<\00\00xDBBDx\00\00~@|@@~\00\00~@|@@@\00\00<B@NB<\00\00BB~BBB\00\00>\08\08\08\08>\00\00\02\02\02BB<\00\00DHpHDB\00\00@@@@@~\00\00BfZBBB\00\00BbRJFB\00\00<BBBB<\00\00|BB|@@\00\00<BBRJ<\00\00|BB|DB\00\00<@<\02B<\00\00\fe\10\10\10\10\10\00\00BBBBB<\00\00BBBB$\18\00\00BBBBZ$\00\00B$\18\18$B\00\00\82D(\10\10\10\00\00~\04\08\10 ~\00\00\0e\08\08\08\08\0e\00\00\00@ \10\08\04\00\00p\10\10\10\10p\00\00\108T\10\10\10\00\00\00\00\00\00\00\00\ff\00\1c\"x  ~\00\00\008\04<D<\00\00  <\"\"<\00\00\00\1c   \1c\00\00\04\04<DD<\00\00\008Dx@<\00\00\0c\10\18\10\10\10\00\00\00<DD<\048\00@@xDDD\00\00\10\000\10\108\00\00\04\00\04\04\04$\18\00 (00($\00\00\10\10\10\10\10\0c\00\00\00hTTTT\00\00\00xDDDD\00\00\008DDD8\00\00\00xDDx@@\00\00<DD<\04\06\00\00\1c    \00\00\008@8\04x\00\00\108\10\10\10\0c\00\00\00DDDD8\00\00\00DD((\10\00\00\00DTTT(\00\00\00D(\10(D\00\00\00DDD<\048\00\00|\08\10 |\00\00\0e\080\08\08\0e\00\00\08\08\08\08\08\08\00\00p\10\0c\10\10p\00\00\14(\00\00\00\00\00<B\99\a1\a1\99B<")
 (data (i32.const 23360) "\10\00\00\00\01\00\00\00\03\00\00\00\10\00\00\00@\1b\00\00@\1b\00\00\00@\00\00\00@")
 (data (i32.const 23392) "N\00\00\00\01\00\00\00\01\00\00\00N\00\00\00Z\00X\00 \00S\00p\00e\00c\00t\00r\00u\00m\00 \00i\00n\00s\00t\00a\00n\00c\00e\00 \00i\00s\00 \00n\00o\00t\00 \00i\00n\00i\00t\00i\00a\00l\00i\00z\00e\00d")
 (data (i32.const 23492) "\01")
 (data (i32.const 23508) "\01")
 (data (i32.const 23520) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00~\00l\00i\00b\00/\00s\00t\00a\00t\00i\00c\00a\00r\00r\00a\00y\00.\00t\00s")
 (data (i32.const 23584) "&\00\00\00\01\00\00\00\01\00\00\00&\00\00\00E\00n\00d\00 \00o\00f\00 \00f\00i\00l\00e\00 \00r\00e\00a\00c\00h\00e\00d")
 (data (i32.const 23648) "D\00\00\00\01\00\00\00\01\00\00\00D\00\00\00s\00r\00c\00/\00a\00s\00s\00e\00m\00b\00l\00y\00/\00u\00t\00i\00l\00s\00/\00B\00i\00n\00a\00r\00y\00R\00e\00a\00d\00e\00r\00.\00t\00s")
 (data (i32.const 23744) "<\00\00\00\01\00\00\00\01\00\00\00<\00\00\00$\00L\00o\00a\00d\00B\00y\00t\00e\00s\00I\00n\00v\00a\00l\00i\00d\00H\00e\00a\00d\00e\00r\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 23824) " \00\00\00\01\00\00\00\01\00\00\00 \00\00\00$\00M\00a\00i\00n\00E\00x\00e\00c\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 23872) "0\00\00\00\01\00\00\00\01\00\00\000\00\00\00$\00S\00a\00v\00e\00B\00y\00t\00e\00s\00R\00o\00u\00t\00i\00n\00e\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 23936) "0\00\00\00\01\00\00\00\01\00\00\000\00\00\00$\00L\00o\00a\00d\00B\00y\00t\00e\00s\00R\00o\00u\00t\00i\00n\00e\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 24000) ".\00\00\00\01\00\00\00\01\00\00\00.\00\00\00$\00L\00o\00a\00d\00B\00y\00t\00e\00s\00R\00e\00s\00u\00m\00e\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 24064) "$\00\00\00\01\00\00\00\01\00\00\00$\00\00\00$\00T\00o\00k\00e\00n\00T\00a\00b\00l\00e\00A\00d\00d\00r\00e\00s\00s")
 (data (i32.const 24128) "\16\00\00\00\01\00\00\00\01\00\00\00\16\00\00\00$\00T\00o\00k\00e\00n\00C\00o\00u\00n\00t")
 (data (i32.const 24176) "\18\00\00\00\01\00\00\00\01\00\00\00\18\00\00\00$\00T\00o\00k\00e\00n\00O\00f\00f\00s\00e\00t")
 (data (i32.const 24228) "\01")
 (data (i32.const 24240) "b\00\00\00\01\00\00\00\01\00\00\00b\00\00\00s\00r\00c\00/\00a\00s\00s\00e\00m\00b\00l\00y\00/\00s\00p\00e\00c\00t\00r\00u\00m\00/\00m\00a\00c\00h\00i\00n\00e\00/\00s\00p\00e\00c\00t\00r\00u\00m\00-\00m\00a\00c\00h\00i\00n\00e\00.\00t\00s")
 (data (i32.const 24372) "\01")
 (data (i32.constc\00\00\02\00\00\00\10\00\00\00\00\00\00\00\93\00\00\00\02\00\00\00\10\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\93\00\00\00\02")
 (table $0 299 funcref)
 (elem (i32.const 1) $src/assembly/Z80Cpu/AluADD $src/assembly/Z80Cpu/AluADC $src/assembly/Z80Cpu/AluSUB $src/assembly/Z80Cpu/AluSBC $src/assembly/Z80Cpu/AluAND $src/assembly/Z80Cpu/AluXOR $src/assembly/Z80Cpu/AluOR $src/assembly/Z80Cpu/AluCP $src/assembly/Z80Cpu/LdQQNN $src/assembly/Z80Cpu/LdBCiA $src/assembly/Z80Cpu/IncQQ $src/assembly/Z80Cpu/IncQ $src/assembly/Z80Cpu/DecQ $src/assembly/Z80Cpu/LdQN $src/assembly/Z80Cpu/Rlca $src/assembly/Z80Cpu/ExAf $src/assembly/Z80Cpu/AddHlQQ $src/assembly/Z80Cpu/LdABci $src/assembly/Z80Cpu/DecQQ $src/assembly/Z80Cpu/Rrca $src/assembly/Z80Cpu/Djnz $src/assembly/Z80Cpu/LdDEiA $src/assembly/Z80Cpu/Rla $src/assembly/Z80Cpu/JrE $src/assembly/Z80Cpu/LdADei $src/assembly/Z80Cpu/Rra $src/assembly/Z80Cpu/JrNz $src/assembly/Z80Cpu/LdNNiHl $src/assembly/Z80Cpu/Daa $src/assembly/Z80Cpu/JrZ $src/assembly/Z80Cpu/LdHlNNi $src/assembly/Z80Cpu/Cpl $src/assembly/Z80Cpu/JrNc $src/assembly/Z80Cpu/LdNNiA $src/assembly/Z80Cpu/IncHli $src/assembly/Z80Cpu/DecHli $src/assembly/Z80Cpu/LdHliN $src/assembly/Z80Cpu/Scf $src/assembly/Z80Cpu/JrC $src/assembly/Z80Cpu/LdANNi $src/assembly/Z80Cpu/Ccf $src/assembly/Z80Cpu/LdQW $src/assembly/Z80Cpu/LdQHli $src/assembly/Z80Cpu/LdHliQ $src/assembly/Z80Cpu/Halt $src/assembly/Z80Cpu/AddAQ $src/assembly/Z80Cpu/AddAHli $src/assembly/Z80Cpu/AdcAQ $src/assembly/Z80Cpu/AdcAHli $src/assembly/Z80Cpu/SubAQ $src/assembly/Z80Cpu/SubAHli $src/assembly/Z80Cpu/SbcAQ $src/assembly/Z80Cpu/SbcAHli $src/assembly/Z80Cpu/AndAQ $src/assembly/Z80Cpu/AndAHli $src/assembly/Z80Cpu/XorAQ $src/assembly/Z80Cpu/XorAHli $src/assembly/Z80Cpu/OrAQ $src/assembly/Z80Cpu/OrAHli $src/assembly/Z80Cpu/CpAQ $src/assembly/Z80Cpu/CpAHli $src/assembly/Z80Cpu/RetNz $src/assembly/Z80Cpu/PopBc $src/assembly/Z80Cpu/JpNz $src/assembly/Z80Cpu/Jp $src/assembly/Z80Cpu/CallNz $src/assembly/Z80Cpu/PushBc $src/assembly/Z80Cpu/AluAN $src/assembly/Z80Cpu/RstN $src/assembly/Z80Cpu/RetZ $src/assembly/Z80Cpu/Ret $src/assembly/Z80Cpu/JpZ $src/assembly/Z80Cpu/CallZ $src/assembly/Z80Cpu/Call $src/assembly/Z80Cpu/RetNc $src/assembly/Z80Cpu/PopDe $src/assembly/Z80Cpu/JpNc $src/assembly/Z80Cpu/OutNA $src/assembly/Z80Cpu/CallNc $src/assembly/Z80Cpu/PushDe $src/assembly/Z80Cpu/RetC $src/assembly/Z80Cpu/Exx $src/assembly/Z80Cpu/JpC $src/assembly/Z80Cpu/InAN $src/assembly/Z80Cpu/CallC $src/assembly/Z80Cpu/RetPo $src/assembly/Z80Cpu/PopHl $src/assembly/Z80Cpu/JpPo $src/assembly/Z80Cpu/ExSpiHl $src/assembly/Z80Cpu/CallPo $src/assembly/Z80Cpu/PushHl $src/assembly/Z80Cpu/RetPe $src/assembly/Z80Cpu/JpHli $src/assembly/Z80Cpu/JpPe $src/assembly/Z80Cpu/ExDeHl $src/assembly/Z80Cpu/CallPe $src/assembly/Z80Cpu/RetP $src/assembly/Z80Cpu/PopAf $src/assembly/Z80Cpu/JpP $src/assembly/Z80Cpu/Di $src/assembly/Z80Cpu/CallP $src/assembly/Z80Cpu/PushAf $src/assembly/Z80Cpu/RetM $src/assembly/Z80Cpu/LdSpHl $src/assembly/Z80Cpu/JpM $src/assembly/Z80Cpu/Ei $src/assembly/Z80Cpu/CallM $src/assembly/Z80Cpu/Swapnib $src/assembly/Z80Cpu/Mirror $src/assembly/Z80Cpu/TestN $src/assembly/Z80Cpu/BslaDeB $src/assembly/Z80Cpu/BsraDeB $src/assembly/Z80Cpu/BsrlDeB $src/assembly/Z80Cpu/BsrfDeB $src/assembly/Z80Cpu/BrlcDeB $src/assembly/Z80Cpu/Mul $src/assembly/Z80Cpu/AddHlA $src/assembly/Z80Cpu/AddDeA $src/assembly/Z80Cpu/AddBcA $src/assembly/Z80Cpu/AddHlNN $src/assembly/Z80Cpu/AddDeNN $src/assembly/Z80Cpu/AddBcNN $src/assembly/Z80Cpu/InQCi $src/assembly/Z80Cpu/OutCiQ $src/assembly/Z80Cpu/SbcHlQQ $src/assembly/Z80Cpu/LdNNiQQ $src/assembly/Z80Cpu/Neg $src/assembly/Z80Cpu/Retn $src/assembly/Z80Cpu/ImN $src/assembly/Z80Cpu/LdXrA $src/assembly/Z80Cpu/AdcHlQQ $src/assembly/Z80Cpu/LdQQNNi $src/assembly/Z80Cpu/LdAXr $src/assembly/Z80Cpu/Rrd $src/assembly/Z80Cpu/Rld $src/assembly/Z80Cpu/PushNN $src/assembly/Z80Cpu/OutInB $src/assembly/Z80Cpu/NextReg $src/assembly/Z80Cpu/NextRegA $src/assembly/Z80Cpu/PixelDn $src/assembly/Z80Cpu/PixelAd $src/assembly/Z80Cpu/SetAE $src/assembly/Z80Cpu/JpInC $src/assembly/Z80Cpu/Ldi $src/assembly/Z80Cpu/Cpi $src/assembly/Z80Cpu/Ini $src/assembly/Z80Cpu/Outi $src/assembly/Z80Cpu/Ldix $src/assembly/Z80Cpu/Ldws $src/assembly/Z80Cpu/Ldd $src/assembly/Z80Cpu/Cpd $src/assembly/Z80Cpu/Ind $src/assembly/Z80Cpu/Outd $src/assembly/Z80Cpu/Lddx $src/assembly/Z80Cpu/Ldir $src/assembly/Z80Cpu/Cpir $src/assembly/Z80Cpu/Inir $src/assembly/Z80Cpu/Otir $src/assembly/Z80Cpu/Ldirx $src/assembly/Z80Cpu/Ldpirx $src/assembly/Z80Cpu/Lddr $src/assembly/Z80Cpu/Cpdr $src/assembly/Z80Cpu/Indr $src/assembly/Z80Cpu/Otdr $src/assembly/Z80Cpu/Lddrx $src/assembly/Z80Cpu/RlcQ $src/assembly/Z80Cpu/RlcHli $src/assembly/Z80Cpu/RrcQ $src/assembly/Z80Cpu/RrcHli $src/assembly/Z80Cpu/RlQ $src/assembly/Z80Cpu/RlHli $src/assembly/Z80Cpu/RrQ $src/assembly/Z80Cpu/RrHli $src/assembly/Z80Cpu/SlaQ $src/assembly/Z80Cpu/SlaHli $src/assembly/Z80Cpu/SraQ $src/assembly/Z80Cpu/SraHli $src/assembly/Z80Cpu/SllQ $src/assembly/Z80Cpu/SllHli $src/assembly/Z80Cpu/SrlQ $src/assembly/Z80Cpu/SrlHli $src/assembly/Z80Cpu/BitNQ $src/assembly/Z80Cpu/BitNHli $src/assembly/Z80Cpu/ResNQ $src/assembly/Z80Cpu/ResNHli $src/assembly/Z80Cpu/SetNQ $src/assembly/Z80Cpu/SetNHli $src/assembly/Z80Cpu/AddIxQQ $src/assembly/Z80Cpu/LdIxNN $src/assembly/Z80Cpu/LdNNiIx $src/assembly/Z80Cpu/IncIx $src/assembly/Z80Cpu/IncXh $src/assembly/Z80Cpu/DecXh $src/assembly/Z80Cpu/LdXhN $src/assembly/Z80Cpu/LdIxNNi $src/assembly/Z80Cpu/DecIx $src/assembly/Z80Cpu/IncXl $src/assembly/Z80Cpu/DecXl $src/assembly/Z80Cpu/LdXlN $src/assembly/Z80Cpu/IncIxi $src/assembly/Z80Cpu/DecIxi $src/assembly/Z80Cpu/LdIxiN $src/assembly/Z80Cpu/LdQXh $src/assembly/Z80Cpu/LdQXl $src/assembly/Z80Cpu/LdQIxi $src/assembly/Z80Cpu/LdIxiQ $src/assembly/Z80Cpu/AluAXh $src/assembly/Z80Cpu/AluAXl $src/assembly/Z80Cpu/AluAIxi $src/assembly/Z80Cpu/PopIx $src/assembly/Z80Cpu/ExSpiIx $src/assembly/Z80Cpu/PushIx $src/assembly/Z80Cpu/JpIxi $src/assembly/Z80Cpu/LdSpIx $src/assembly/Z80Cpu/XrlcQ $src/assembly/Z80Cpu/XrrcQ $src/assembly/Z80Cpu/XrlQ $src/assembly/Z80Cpu/XrrQ $src/assembly/Z80Cpu/XSlaQ $src/assembly/Z80Cpu/XSraQ $src/assembly/Z80Cpu/XSllQ $src/assembly/Z80Cpu/XSrlQ $src/assembly/Z80Cpu/XBitN $src/assembly/Z80Cpu/XResNQ $src/assembly/Z80Cpu/XSetNQ $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|0 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|1 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|2 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|3 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/test-machine/test-devices/readSimpleMemory $src/assembly/test-machine/test-devices/writeSimpleMemory $src/assembly/test-machine/test-devices/readSimpleIo $src/assembly/test-machine/test-devices/writeSimpleIo $src/assembly/test-machine/test-devices/simpleWriteTbBlueIndex $src/assembly/test-machine/test-devices/simpleWriteTbBlueValue $src/assembly/spectrum/machine/spectrum-48/sp48GetCpuConfiguration $src/assembly/spectrum/machine/spectrum-48/sp48GetMemoryConfiguration $src/assembly/spectrum/machine/spectrum-48/sp48GetScreenConfiguration $src/assembly/spectrum/machine/spectrum-48/sp48SerializeMachineState $src/assembly/spectrum/machine/spectrum-48/sp48RestoreMachineState $src/assembly/spectrum/machine/spectrum-48/sp48ResetMemoryDevice $src/assembly/spectrum/machine/spectrum-48/sp48GetKnownRomAddress $src/assembly/spectrum/machine/spectrum-48/sp48Read|trampoline $src/assembly/spectrum/machine/spectrum-48/sp48Write|trampoline $src/assembly/spectrum/machine/spectrum-48/sp48CloneMemory $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|1 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-48/sp48GetRamBank|trampoline $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|7 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|8 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-48/sp48ResetPortDevice $src/assembly/spectrum/machine/spectrum-48/sp48ReadPort $src/assembly/spectrum/machine/spectrum-48/sp48WritePort $src/assembly/spectrum/machine/spectrum-48/sp48Read|trampoline $src/assembly/spectrum/machine/spectrum-48/sp48Write|trampoline $src/assembly/spectrum/machine/spectrum-48/sp48ResetInterruptDevice $src/assembly/spectrum/machine/spectrum-48/sp48ResetInterruptDevice $src/assembly/spectrum/machine/spectrum-48/sp48IsInterruptRaised $src/assembly/spectrum/machine/spectrum-48/sp48IsInterruptRevoked $src/assembly/spectrum/machine/spectrum-48/sp48CheckForInterrupt $src/assembly/spectrum/machine/spectrum-48/sp48ResetScreenDevice $src/assembly/spectrum/machine/spectrum-48/sp48StartNewScreenFrame $src/assembly/spectrum/machine/spectrum-48/sp48GetRenderingTactTable $src/assembly/spectrum/machine/spectrum-48/sp48GetFlashToggleFrames $src/assembly/spectrum/machine/spectrum-48/sp48GetBorderColor $src/assembly/spectrum/machine/spectrum-48/sp48SetBorderColor $src/assembly/spectrum/machine/spectrum-48/sp48RenderScreen $src/assembly/spectrum/machine/spectrum-48/sp48GetContentionValue $src/assembly/spectrum/machine/spectrum-48/sp48GetPixelBuffer $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice $src/assembly/spectrum/machine/spectrum-48/sp48StartNewBeeperFrame $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice $src/assembly/spectrum/machine/spectrum-48/sp48GetBeeperSamples $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/spectrum/machine/spectrum-48/sp48GetLastEarBit $src/assembly/spectrum/machine/spectrum-48/sp48GetSamplesPerFrame $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|3 $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/spectrum/machine/spectrum-48/sp48ResetKeyboardDevice $src/assembly/spectrum/machine/spectrum-48/sp48SetKeyStatus $src/assembly/spectrum/machine/spectrum-48/sp48GetKeyStatus $src/assembly/spectrum/machine/spectrum-48/sp48GetKeyLineStatus $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|12 $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice)
 (global $~lib/rt/tlsf/ROOT (mut i32) (i32.const 0))
 (global $~lib/rt/tlsf/collectLock (mut i32) (i32.const 0))
 (global $~argumentsLength (mut i32) (i32.const 0))
 (global $src/assembly/test-machine/test-devices/simpleMemory (mut i32) (i32.const 0))
 (global $src/assembly/test-machine/test-devices/memoryAccessLog (mut i32) (i32.const 6720))
 (global $src/assembly/test-machine/test-devices/cpu (mut i32) (i32.const 0))
 (global $src/assembly/test-machine/test-devices/fakeInput (mut i32) (i32.const 0))
 (global $src/assembly/test-machine/test-devices/inputIndex (mut i32) (i32.const -1))
 (global $src/assembly/test-machine/test-devices/ioAccessLog (mut i32) (i32.const 6768))
 (global $src/assembly/test-machine/test-devices/tbBlueAccessLog (mut i32) (i32.const 6816))
 (global $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/spectrum (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/memory (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/interruptRaised (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/interruptRevoked (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenBorderColor (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1 (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2 (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1 (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2 (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-machine/machineType (mut i32) (i32.const 0))
 (global $src/assembly/spectrum/machine/spectrum-machine/spectrum (mut i32) (i32.const 0))
 (global $src/assembly/index/UINT8ARRAY_ID i32 (i32.const 11))
 (global $src/assembly/index/UINT32ARRAY_ID i32 (i32.const 7))
 (global $~lib/rt/__rtti_base i32 (i32.const 24384))
 (global $src/assembly/Z80Cpu/Z80Cpu i32 (i32.const 5))
 (global $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState i32 (i32.const 20))
 (global $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions i32 (i32.const 25))
 (export "__setArgumentsLength" (func $~setArgumentsLength))
 (export "memory" (memory $0))
 (export "__alloc" (func $~lib/rt/tlsf/__alloc))
 (export "__retain" (func $~lib/rt/pure/__retain))
 (export "__release" (func $~lib/rt/pure/__release))
 (export "__collect" (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice))
 (export "__rtti_base" (global $~lib/rt/__rtti_base))
 (export "UINT8ARRAY_ID" (global $src/assembly/index/UINT8ARRAY_ID))
 (export "UINT32ARRAY_ID" (global $src/assembly/index/UINT32ARRAY_ID))
 (export "initTestMachine" (func $src/assembly/index/initTestMachine))
 (export "getTestMachineState" (func $src/assembly/index/getTestMachineState))
 (export "updateTestMachineState" (func $src/assembly/index/updateTestMachineState))
 (export "getTestMachineMemory" (func $src/assembly/index/getTestMachineMemory))
 (export "updateTestMachineMemory" (func $src/assembly/index/updateTestMachineMemory))
 (export "initTestMachineCode" (func $src/assembly/index/initTestMachineCode))
 (export "initTestMachineInput" (func $src/assembly/index/initTestMachineInput))
 (export "runTestMachine" (func $src/assembly/index/runTestMachine))
 (export "resetMemoryAccessLog" (func $src/assembly/index/resetMemoryAccessLog))
 (export "resetIoAccessLog" (func $src/assembly/index/resetIoAccessLog))
 (export "resetTbBlueAccessLog" (func $src/assembly/index/resetTbBlueAccessLog))
 (export "getTestMachineIoAccessLog" (func $src/assembly/index/getTestMachineIoAccessLog))
 (export "getTestMachineMemoryAccessLog" (func $src/assembly/index/getTestMachineMemoryAccessLog))
 (export "getTestMachineTbBlueAccessLog" (func $src/assembly/index/getTestMachineTbBlueAccessLog))
 (export "enableExtendedInstructions" (func $src/assembly/index/enableExtendedInstructions))
 (export "initSpectrumMachine" (func $src/assembly/index/initSpectrumMachine))
 (export "getCurrentMachineType" (func $src/assembly/index/getCurrentMachineType))
 (export "turnOnSpectrumMachine" (func $src/assembly/index/turnOnSpectrumMachine))
 (export "resetSpectrumMachine" (func $src/assembly/index/resetSpectrumMachine))
 (export "getSpectrumMachineState" (func $src/assembly/index/getSpectrumMachineState))
 (export "updateSpectrumMachineState" (func $src/assembly/index/updateSpectrumMachineState))
 (export "executeCycle" (func $src/assembly/index/executeCycle))
 (export "sendKeyAction" (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|3))
 (export "setTapeStream" (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|3))
 (export "Z80Cpu" (global $src/assembly/Z80Cpu/Z80Cpu))
 (export "Z80Cpu#get:tactsInFrame" (func $src/assembly/Z80Cpu/Z80Cpu#get:tactsInFrame))
 (export "Z80Cpu#set:tactsInFrame" (func $src/assembly/Z80Cpu/Z80Cpu#setTactsInFrame))
 (export "Z80Cpu#get:frameCount" (func $src/assembly/Z80Cpu/Z80Cpu#get:frameCount))
 (export "Z80Cpu#set:frameCount" (func $src/assembly/Z80Cpu/Z80Cpu#set:frameCount))
 (export "Z80Cpu#get:frameTacts" (func $src/assembly/Z80Cpu/Z80Cpu#get:frameTacts))
 (export "Z80Cpu#set:frameTacts" (func $src/assembly/Z80Cpu/Z80Cpu#set:frameTacts))
 (export "Z80Cpu#get:stateFlags" (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:overflow))
 (export "Z80Cpu#set:stateFlags" (func $src/assembly/Z80Cpu/Z80Cpu#set:stateFlags))
 (export "Z80Cpu#get:useGateArrayContention" (func $src/assembly/Z80Cpu/Z80Cpu#get:useGateArrayContention))
 (export "Z80Cpu#set:useGateArrayContention" (func $src/assembly/Z80Cpu/Z80Cpu#set:useGateArrayContention))
 (export "Z80Cpu#get:iff1" (func $src/assembly/Z80Cpu/Z80Cpu#get:iff1))
 (export "Z80Cpu#set:iff1" (func $src/assembly/Z80Cpu/Z80Cpu#set:iff1))
 (export "Z80Cpu#get:iff2" (func $src/assembly/Z80Cpu/Z80Cpu#get:iff2))
 (export "Z80Cpu#set:iff2" (func $src/assembly/Z80Cpu/Z80Cpu#set:iff2))
 (export "Z80Cpu#get:interruptMode" (func $src/assembly/Z80Cpu/Z80Cpu#get:interruptMode))
 (export "Z80Cpu#set:interruptMode" (func $src/assembly/Z80Cpu/Z80Cpu#set:interruptMode))
 (export "Z80Cpu#get:isInterruptBlocked" (func $src/assembly/Z80Cpu/Z80Cpu#get:isInterruptBlocked))
 (export "Z80Cpu#set:isInterruptBlocked" (func $src/assembly/Z80Cpu/Z80Cpu#set:isInterruptBlocked))
 (export "Z80Cpu#get:isInOpExecution" (func $src/assembly/Z80Cpu/Z80Cpu#get:isInOpExecution))
 (export "Z80Cpu#set:isInOpExecution" (func $src/assembly/Z80Cpu/Z80Cpu#set:isInOpExecution))
 (export "Z80Cpu#get:executionFlowStatus" (func $src/assembly/Z80Cpu/Z80Cpu#get:executionFlowStatus))
 (export "Z80Cpu#set:executionFlowStatus" (func $src/assembly/Z80Cpu/Z80Cpu#set:executionFlowStatus))
 (export "Z80Cpu#get:memoryReadStatus" (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryReadStatus))
 (export "Z80Cpu#set:memoryReadStatus" (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryReadStatus))
 (export "Z80Cpu#get:memoryWriteStatus" (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryWriteStatus))
 (export "Z80Cpu#set:memoryWriteStatus" (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryWriteStatus))
 (export "Z80Cpu#get:prefixMode" (func $src/assembly/Z80Cpu/Z80Cpu#get:prefixMode))
 (export "Z80Cpu#set:prefixMode" (func $src/assembly/Z80Cpu/Z80Cpu#set:prefixMode))
 (export "Z80Cpu#get:indexMode" (func $src/assembly/Z80Cpu/Z80Cpu#get:indexMode))
 (export "Z80Cpu#set:indexMode" (func $src/assembly/Z80Cpu/Z80Cpu#set:indexMode))
 (export "Z80Cpu#get:maskableInterruptModeEntered" (func $src/assembly/Z80Cpu/Z80Cpu#get:maskableInterruptModeEntered))
 (export "Z80Cpu#set:maskableInterruptModeEntered" (func $src/assembly/Z80Cpu/Z80Cpu#set:maskableInterruptModeEntered))
 (export "Z80Cpu#get:opCode" (func $src/assembly/Z80Cpu/Z80Cpu#get:opCode))
 (export "Z80Cpu#set:opCode" (func $src/assembly/Z80Cpu/Z80Cpu#set:opCode))
 (export "Z80Cpu#get:allowExtendedInstructionSet" (func $src/assembly/Z80Cpu/Z80Cpu#get:allowExtendedInstructionSet))
 (export "Z80Cpu#set:allowExtendedInstructionSet" (func $src/assembly/Z80Cpu/Z80Cpu#set:allowExtendedInstructionSet))
 (export "Z80Cpu#constructor" (func $src/assembly/Z80Cpu/Z80Cpu#constructor|trampoline))
 (export "Z80Cpu#setMemoryHandlers" (func $src/assembly/Z80Cpu/Z80Cpu#setMemoryHandlers))
 (export "Z80Cpu#setPortHandlers" (func $src/assembly/Z80Cpu/Z80Cpu#setPortHandlers))
 (export "Z80Cpu#setTactsInFrame" (func $src/assembly/Z80Cpu/Z80Cpu#setTactsInFrame))
 (export "Z80Cpu#incTact" (func $src/assembly/Z80Cpu/Z80Cpu#incTact))
 (export "Z80Cpu#turnOn" (func $src/assembly/Z80Cpu/Z80Cpu#turnOn))
 (export "Z80Cpu#get:memoryReader" (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryReader))
 (export "Z80Cpu#set:memoryReader" (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryReader))
 (export "Z80Cpu#get:memoryWriter" (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryWriter))
 (export "Z80Cpu#set:memoryWriter" (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryWriter))
 (export "Z80Cpu#get:portReader" (func $src/assembly/Z80Cpu/Z80Cpu#get:portReader))
 (export "Z80Cpu#set:portReader" (func $src/assembly/Z80Cpu/Z80Cpu#set:portReader))
 (export "Z80Cpu#get:portWriter" (func $src/assembly/Z80Cpu/Z80Cpu#get:portWriter))
 (export "Z80Cpu#set:portWriter" (func $src/assembly/Z80Cpu/Z80Cpu#set:portWriter))
 (export "Z80Cpu#get:tbBlueIndexWriter" (func $src/assembly/Z80Cpu/Z80Cpu#get:tbBlueIndexWriter))
 (export "Z80Cpu#set:tbBlueIndexWriter" (func $src/assembly/Z80Cpu/Z80Cpu#set:tbBlueIndexWriter))
 (export "Z80Cpu#get:tbBlueValueWriter" (func $src/assembly/Z80Cpu/Z80Cpu#get:tbBlueValueWriter))
 (export "Z80Cpu#set:tbBlueValueWriter" (func $src/assembly/Z80Cpu/Z80Cpu#set:tbBlueValueWriter))
 (export "Z80Cpu#getCpuState" (func $src/assembly/Z80Cpu/Z80Cpu#getCpuState))
 (export "Z80Cpu#updateCpuState" (func $src/assembly/Z80Cpu/Z80Cpu#updateCpuState))
 (export "Z80Cpu#serializeCpuState" (func $src/assembly/Z80Cpu/Z80Cpu#serializeCpuState))
 (export "Z80Cpu#restoreCpuState" (func $src/assembly/Z80Cpu/Z80Cpu#restoreCpuState))
 (export "Z80Cpu#get:a" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:a))
 (export "Z80Cpu#set:a" (func $src/assembly/Z80Cpu/Z80Cpu#set:a))
 (export "Z80Cpu#get:f" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:f))
 (export "Z80Cpu#set:f" (func $src/assembly/Z80Cpu/Z80Cpu#set:f))
 (export "Z80Cpu#get:af" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:af))
 (export "Z80Cpu#set:af" (func $src/assembly/Z80Cpu/Z80Cpu#set:af))
 (export "Z80Cpu#get:b" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:b))
 (export "Z80Cpu#set:b" (func $src/assembly/Z80Cpu/Z80Cpu#set:b))
 (export "Z80Cpu#get:c" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:c))
 (export "Z80Cpu#set:c" (func $src/assembly/Z80Cpu/Z80Cpu#set:c))
 (export "Z80Cpu#get:bc" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:bc))
 (export "Z80Cpu#set:bc" (func $src/assembly/Z80Cpu/Z80Cpu#set:bc))
 (export "Z80Cpu#get:d" (func $src/assembly/Z80Cpu/Z80Cpu#get:d))
 (export "Z80Cpu#set:d" (func $src/assembly/Z80Cpu/Z80Cpu#set:d))
 (export "Z80Cpu#get:e" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:e))
 (export "Z80Cpu#set:e" (func $src/assembly/Z80Cpu/Z80Cpu#set:e))
 (export "Z80Cpu#get:de" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:de))
 (export "Z80Cpu#set:de" (func $src/assembly/Z80Cpu/Z80Cpu#set:de))
 (export "Z80Cpu#get:h" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:h))
 (export "Z80Cpu#set:h" (func $src/assembly/Z80Cpu/Z80Cpu#set:h))
 (export "Z80Cpu#get:l" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:l))
 (export "Z80Cpu#set:l" (func $src/assembly/Z80Cpu/Z80Cpu#set:l))
 (export "Z80Cpu#get:hl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:hl))
 (export "Z80Cpu#set:hl" (func $src/assembly/Z80Cpu/Z80Cpu#set:hl))
 (export "Z80Cpu#get:_af_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_af_))
 (export "Z80Cpu#set:_af_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_af_))
 (export "Z80Cpu#get:_bc_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_bc_))
 (export "Z80Cpu#set:_bc_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_bc_))
 (export "Z80Cpu#get:_de_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_de_))
 (export "Z80Cpu#set:_de_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_de_))
 (export "Z80Cpu#get:_hl_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_hl_))
 (export "Z80Cpu#set:_hl_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_hl_))
 (export "Z80Cpu#get:i" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:i))
 (export "Z80Cpu#set:i" (func $src/assembly/Z80Cpu/Z80Cpu#set:i))
 (export "Z80Cpu#get:r" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:r))
 (export "Z80Cpu#set:r" (func $src/assembly/Z80Cpu/Z80Cpu#set:r))
 (export "Z80Cpu#get:pc" (func $src/assembly/Z80Cpu/Z80Cpu#get:pc))
 (export "Z80Cpu#set:pc" (func $src/assembly/Z80Cpu/Z80Cpu#set:pc))
 (export "Z80Cpu#get:sp" (func $src/assembly/Z80Cpu/Z80Cpu#get:sp))
 (export "Z80Cpu#set:sp" (func $src/assembly/Z80Cpu/Z80Cpu#set:sp))
 (export "Z80Cpu#get:xh" (func $src/assembly/Z80Cpu/Z80Cpu#get:xh))
 (export "Z80Cpu#set:xh" (func $src/assembly/Z80Cpu/Z80Cpu#set:xh))
 (export "Z80Cpu#get:xl" (func $src/assembly/Z80Cpu/Z80Cpu#get:xl))
 (export "Z80Cpu#set:xl" (func $src/assembly/Z80Cpu/Z80Cpu#set:xl))
 (export "Z80Cpu#get:ix" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:pc))
 (export "Z80Cpu#set:ix" (func $src/assembly/Z80Cpu/Z80Cpu#set:ix))
 (export "Z80Cpu#get:yh" (func $src/assembly/Z80Cpu/Z80Cpu#get:yh))
 (export "Z80Cpu#set:yh" (func $src/assembly/Z80Cpu/Z80Cpu#set:yh))
 (export "Z80Cpu#get:yl" (func $src/assembly/Z80Cpu/Z80Cpu#get:yl))
 (export "Z80Cpu#set:yl" (func $src/assembly/Z80Cpu/Z80Cpu#set:yl))
 (export "Z80Cpu#get:iy" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:sp))
 (export "Z80Cpu#set:iy" (func $src/assembly/Z80Cpu/Z80Cpu#set:iy))
 (export "Z80Cpu#get:wh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xh))
 (export "Z80Cpu#set:wh" (func $src/assembly/Z80Cpu/Z80Cpu#set:wh))
 (export "Z80Cpu#get:wl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xl))
 (export "Z80Cpu#set:wl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:xl))
 (export "Z80Cpu#get:wz" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:ix))
 (export "Z80Cpu#set:wz" (func $src/assembly/Z80Cpu/Z80Cpu#set:wz))
 (export "Z80Cpu#getReg8" (func $src/assembly/Z80Cpu/Z80Cpu#getReg8))
 (export "Z80Cpu#setReg8" (func $src/assembly/Z80Cpu/Z80Cpu#setReg8))
 (export "Z80Cpu#getReg16" (func $src/assembly/Z80Cpu/Z80Cpu#getReg16))
 (export "Z80Cpu#setReg16" (func $src/assembly/Z80Cpu/Z80Cpu#setReg16))
 (export "Z80Cpu#getIndexReg" (func $src/assembly/Z80Cpu/Z80Cpu#getIndexReg))
 (export "Z80Cpu#setIndexReg" (func $src/assembly/Z80Cpu/Z80Cpu#setIndexReg))
 (export "Z80Cpu#get:sFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:sFlag))
 (export "Z80Cpu#get:zFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:zFlag))
 (export "Z80Cpu#get:r5Flag" (func $src/assembly/Z80Cpu/Z80Cpu#get:r5Flag))
 (export "Z80Cpu#get:hFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:hFlag))
 (export "Z80Cpu#get:r3Flag" (func $src/assembly/Z80Cpu/Z80Cpu#get:r3Flag))
 (export "Z80Cpu#get:pvFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:pvFlag))
 (export "Z80Cpu#get:nFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:nFlag))
 (export "Z80Cpu#get:cFlag" (func $src/assembly/Z80Cpu/Z80Cpu#get:cFlag))
 (export "Z80Cpu#readMemory" (func $src/assembly/Z80Cpu/Z80Cpu#readMemory))
 (export "Z80Cpu#writeMemory" (func $src/assembly/Z80Cpu/Z80Cpu#writeMemory))
 (export "Z80Cpu#readPort" (func $src/assembly/Z80Cpu/Z80Cpu#readPort))
 (export "Z80Cpu#writePort" (func $src/assembly/Z80Cpu/Z80Cpu#writePort))
 (export "Z80Cpu#writeTbBlueIndex" (func $src/assembly/Z80Cpu/Z80Cpu#writeTbBlueIndex))
 (export "Z80Cpu#writeTbBlueValue" (func $src/assembly/Z80Cpu/Z80Cpu#writeTbBlueValue))
 (export "Z80Cpu#reset" (func $src/assembly/Z80Cpu/Z80Cpu#reset))
 (export "Z80Cpu#delay" (func $src/assembly/Z80Cpu/Z80Cpu#delay))
 (export "Z80Cpu#executeCpuCycle" (func $src/assembly/Z80Cpu/Z80Cpu#executeCpuCycle))
 (export "Z80Cpu#getCallInstructionLength" (func $src/assembly/Z80Cpu/Z80Cpu#getCallInstructionLength))
 (export "Z80Cpu#readCodeMemory" (func $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory))
 (export "Z80Cpu#processStandardOrIndexedOperations" (func $src/assembly/Z80Cpu/Z80Cpu#processStandardOrIndexedOperations))
 (export "Z80Cpu#processEDOperations" (func $src/assembly/Z80Cpu/Z80Cpu#processEDOperations))
 (export "Z80Cpu#processCBPrefixedOperations" (func $src/assembly/Z80Cpu/Z80Cpu#processCBPrefixedOperations))
 (export "Z80Cpu#aluAddHL" (func $src/assembly/Z80Cpu/Z80Cpu#aluAddHL))
 (export "Z80Cpu#aluIncByte" (func $src/assembly/Z80Cpu/Z80Cpu#aluIncByte))
 (export "Z80Cpu#aluDecByte" (func $src/assembly/Z80Cpu/Z80Cpu#aluDecByte))
 (export "TestZ80MachineState" (global $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState))
 (export "TestZ80MachineState#get:a" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:a))
 (export "TestZ80MachineState#set:a" (func $src/assembly/Z80Cpu/Z80Cpu#set:a))
 (export "TestZ80MachineState#get:f" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:f))
 (export "TestZ80MachineState#set:f" (func $src/assembly/Z80Cpu/Z80Cpu#set:f))
 (export "TestZ80MachineState#get:af" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:af))
 (export "TestZ80MachineState#set:af" (func $src/assembly/Z80Cpu/Z80Cpu#set:af))
 (export "TestZ80MachineState#get:b" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:b))
 (export "TestZ80MachineState#set:b" (func $src/assembly/Z80Cpu/Z80Cpu#set:b))
 (export "TestZ80MachineState#get:c" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:c))
 (export "TestZ80MachineState#set:c" (func $src/assembly/Z80Cpu/Z80Cpu#set:c))
 (export "TestZ80MachineState#get:bc" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:bc))
 (export "TestZ80MachineState#set:bc" (func $src/assembly/Z80Cpu/Z80Cpu#set:bc))
 (export "TestZ80MachineState#get:d" (func $src/assembly/Z80Cpu/Z80Cpu#get:d))
 (export "TestZ80MachineState#set:d" (func $src/assembly/Z80Cpu/Z80Cpu#set:d))
 (export "TestZ80MachineState#get:e" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:e))
 (export "TestZ80MachineState#set:e" (func $src/assembly/Z80Cpu/Z80Cpu#set:e))
 (export "TestZ80MachineState#get:de" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:de))
 (export "TestZ80MachineState#set:de" (func $src/assembly/Z80Cpu/Z80Cpu#set:de))
 (export "TestZ80MachineState#get:h" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:h))
 (export "TestZ80MachineState#set:h" (func $src/assembly/Z80Cpu/Z80Cpu#set:h))
 (export "TestZ80MachineState#get:l" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:l))
 (export "TestZ80MachineState#set:l" (func $src/assembly/Z80Cpu/Z80Cpu#set:l))
 (export "TestZ80MachineState#get:hl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:hl))
 (export "TestZ80MachineState#set:hl" (func $src/assembly/Z80Cpu/Z80Cpu#set:hl))
 (export "TestZ80MachineState#get:_af_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_af_))
 (export "TestZ80MachineState#set:_af_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_af_))
 (export "TestZ80MachineState#get:_bc_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_bc_))
 (export "TestZ80MachineState#set:_bc_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_bc_))
 (export "TestZ80MachineState#get:_de_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_de_))
 (export "TestZ80MachineState#set:_de_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_de_))
 (export "TestZ80MachineState#get:_hl_" (func $src/assembly/Z80Cpu/Z80Cpu#get:_hl_))
 (export "TestZ80MachineState#set:_hl_" (func $src/assembly/Z80Cpu/Z80Cpu#set:_hl_))
 (export "TestZ80MachineState#get:i" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:i))
 (export "TestZ80MachineState#set:i" (func $src/assembly/Z80Cpu/Z80Cpu#set:i))
 (export "TestZ80MachineState#get:r" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:r))
 (export "TestZ80MachineState#set:r" (func $src/assembly/Z80Cpu/Z80Cpu#set:r))
 (export "TestZ80MachineState#get:pc" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:pc))
 (export "TestZ80MachineState#set:pc" (func $src/assembly/Z80Cpu/Z80Cpu#set:ix))
 (export "TestZ80MachineState#get:sp" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:sp))
 (export "TestZ80MachineState#set:sp" (func $src/assembly/Z80Cpu/Z80Cpu#set:iy))
 (export "TestZ80MachineState#get:xh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xh))
 (export "TestZ80MachineState#set:xh" (func $src/assembly/Z80Cpu/Z80Cpu#set:wh))
 (export "TestZ80MachineState#get:xl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xl))
 (export "TestZ80MachineState#set:xl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:xl))
 (export "TestZ80MachineState#get:ix" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:ix))
 (export "TestZ80MachineState#set:ix" (func $src/assembly/Z80Cpu/Z80Cpu#set:wz))
 (export "TestZ80MachineState#get:yh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:yh))
 (export "TestZ80MachineState#set:yh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:yh))
 (export "TestZ80MachineState#get:yl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:yl))
 (export "TestZ80MachineState#set:yl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:yl))
 (export "TestZ80MachineState#get:iy" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:iy))
 (export "TestZ80MachineState#set:iy" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:iy))
 (export "TestZ80MachineState#get:wh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wh))
 (export "TestZ80MachineState#set:wh" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wh))
 (export "TestZ80MachineState#get:wl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wl))
 (export "TestZ80MachineState#set:wl" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wl))
 (export "TestZ80MachineState#get:wz" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wz))
 (export "TestZ80MachineState#set:wz" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wz))
 (export "TestZ80MachineState#get:tactsL" (func $src/assembly/Z80Cpu/Z80Cpu#get:frameCount))
 (export "TestZ80MachineState#set:tactsL" (func $src/assembly/Z80Cpu/Z80Cpu#set:frameCount))
 (export "TestZ80MachineState#get:tactsH" (func $src/assembly/Z80Cpu/Z80Cpu#get:frameTacts))
 (export "TestZ80MachineState#set:tactsH" (func $src/assembly/Z80Cpu/Z80Cpu#set:frameTacts))
 (export "TestZ80MachineState#get:stateFlags" (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:overflow))
 (export "TestZ80MachineState#set:stateFlags" (func $src/assembly/Z80Cpu/Z80Cpu#set:stateFlags))
 (export "TestZ80MachineState#get:useGateArrayContention" (func $src/assembly/Z80Cpu/Z80Cpu#get:useGateArrayContention))
 (export "TestZ80MachineState#set:useGateArrayContention" (func $src/assembly/Z80Cpu/Z80Cpu#set:useGateArrayContention))
 (export "TestZ80MachineState#get:iff1" (func $src/assembly/Z80Cpu/Z80Cpu#get:iff1))
 (export "TestZ80MachineState#set:iff1" (func $src/assembly/Z80Cpu/Z80Cpu#set:iff1))
 (export "TestZ80MachineState#get:iff2" (func $src/assembly/Z80Cpu/Z80Cpu#get:iff2))
 (export "TestZ80MachineState#set:iff2" (func $src/assembly/Z80Cpu/Z80Cpu#set:iff2))
 (export "TestZ80MachineState#get:interruptMode" (func $src/assembly/Z80Cpu/Z80Cpu#get:interruptMode))
 (export "TestZ80MachineState#set:interruptMode" (func $src/assembly/Z80Cpu/Z80Cpu#set:interruptMode))
 (export "TestZ80MachineState#get:isInterruptBlocked" (func $src/assembly/Z80Cpu/Z80Cpu#get:isInterruptBlocked))
 (export "TestZ80MachineState#set:isInterruptBlocked" (func $src/assembly/Z80Cpu/Z80Cpu#set:isInterruptBlocked))
 (export "TestZ80MachineState#get:isInOpExecution" (func $src/assembly/Z80Cpu/Z80Cpu#get:isInOpExecution))
 (export "TestZ80MachineState#set:isInOpExecution" (func $src/assembly/Z80Cpu/Z80Cpu#set:isInOpExecution))
 (export "TestZ80MachineState#get:prefixMode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:prefixMode))
 (export "TestZ80MachineState#set:prefixMode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:prefixMode))
 (export "TestZ80MachineState#get:indexMode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:indexMode))
 (export "TestZ80MachineState#set:indexMode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:indexMode))
 (export "TestZ80MachineState#get:maskableInterruptModeEntered" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:maskableInterruptModeEntered))
 (export "TestZ80MachineState#set:maskableInterruptModeEntered" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:maskableInterruptModeEntered))
 (export "TestZ80MachineState#get:opCode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:opCode))
 (export "TestZ80MachineState#set:opCode" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:opCode))
 (export "TestZ80MachineState#constructor" (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#constructor))
 (export "ExecuteCycleOptions" (global $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions))
 (export "ExecuteCycleOptions#get:emulationMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:emulationMode))
 (export "ExecuteCycleOptions#set:emulationMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:emulationMode))
 (export "ExecuteCycleOptions#get:debugStepMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:debugStepMode))
 (export "ExecuteCycleOptions#set:debugStepMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:debugStepMode))
 (export "ExecuteCycleOptions#get:fastTapeMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:fastTapeMode))
 (export "ExecuteCycleOptions#set:fastTapeMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:fastTapeMode))
 (export "ExecuteCycleOptions#get:terminationRom" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:terminationRom))
 (export "ExecuteCycleOptions#set:terminationRom" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:terminationRom))
 (export "ExecuteCycleOptions#get:terminationPoint" (func $src/assembly/Z80Cpu/Z80Cpu#get:_bc_))
 (export "ExecuteCycleOptions#set:terminationPoint" (func $src/assembly/Z80Cpu/Z80Cpu#set:_bc_))
 (export "ExecuteCycleOptions#get:fastVmMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:fastVmMode))
 (export "ExecuteCycleOptions#set:fastVmMode" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:fastVmMode))
 (export "ExecuteCycleOptions#get:disableScreenRendering" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:disableScreenRendering))
 (export "ExecuteCycleOptions#set:disableScreenRendering" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:disableScreenRendering))
 (export "ExecuteCycleOptions#get:timeoutTacts" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:timeoutTacts))
 (export "ExecuteCycleOptions#set:timeoutTacts" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:timeoutTacts))
 (export "ExecuteCycleOptions#constructor" (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#constructor))
 (start $~start)
 (func $~lib/rt/tlsf/removeBlock (; 1 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.load
  i32.const -4
  i32.and
  local.tee $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
   local.set $4
   i32.const 0
  else
   local.get $2
   i32.const 31
   local.get $2
   i32.clz
   i32.sub
   local.tee $3
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $4
   local.get $3
   i32.const 7
   i32.sub
  end
  local.set $3
  local.get $1
  i32.load offset=20
  local.set $2
  local.get $1
  i32.load offset=16
  local.tee $5
  if
   local.get $5
   local.get $2
   i32.store offset=20
  end
  local.get $2
  if
   local.get $2
   local.get $5
   i32.store offset=16
  end
  local.get $1
  local.get $0
  local.get $4
  local.get $3
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  i32.eq
  if
   local.get $0
   local.get $4
   local.get $3
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   local.get $2
   i32.store offset=96
   local.get $2
   i32.eqz
   if
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    local.get $0
    local.get $3
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=4
    i32.const 1
    local.get $4
    i32.shl
    i32.const -1
    i32.xor
    i32.and
    local.tee $1
    i32.store offset=4
    local.get $1
    i32.eqz
    if
     local.get $0
     local.get $0
     i32.load
     i32.const 1
     local.get $3
     i32.shl
     i32.const -1
     i32.xor
     i32.and
     i32.store
    end
   end
  end
 )
 (func $~lib/rt/tlsf/insertBlock (; 2 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  local.get $1
  i32.load
  local.set $3
  local.get $1
  i32.const 16
  i32.add
  local.get $1
  i32.load
  i32.const -4
  i32.and
  i32.add
  local.tee $4
  i32.load
  local.tee $5
  i32.const 1
  i32.and
  if
   local.get $3
   i32.const -4
   i32.and
   i32.const 16
   i32.add
   local.get $5
   i32.const -4
   i32.and
   i32.add
   local.tee $2
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $4
    call $~lib/rt/tlsf/removeBlock
    local.get $1
    local.get $2
    local.get $3
    i32.const 3
    i32.and
    i32.or
    local.tee $3
    i32.store
    local.get $1
    i32.const 16
    i32.add
    local.get $1
    i32.load
    i32.const -4
    i32.and
    i32.add
    local.tee $4
    i32.load
    local.set $5
   end
  end
  local.get $3
  i32.const 2
  i32.and
  if
   local.get $1
   i32.const 4
   i32.sub
   i32.load
   local.tee $2
   i32.load
   local.tee $6
   i32.const -4
   i32.and
   i32.const 16
   i32.add
   local.get $3
   i32.const -4
   i32.and
   i32.add
   local.tee $7
   i32.const 1073741808
   i32.lt_u
   if
    local.get $0
    local.get $2
    call $~lib/rt/tlsf/removeBlock
    local.get $2
    local.get $7
    local.get $6
    i32.const 3
    i32.and
    i32.or
    local.tee $3
    i32.store
    local.get $2
    local.set $1
   end
  end
  local.get $4
  local.get $5
  i32.const 2
  i32.or
  i32.store
  local.get $4
  i32.const 4
  i32.sub
  local.get $1
  i32.store
  local.get $0
  local.get $3
  i32.const -4
  i32.and
  local.tee $2
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $2
   i32.const 4
   i32.shr_u
   local.set $4
   i32.const 0
  else
   local.get $2
   i32.const 31
   local.get $2
   i32.clz
   i32.sub
   local.tee $2
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $4
   local.get $2
   i32.const 7
   i32.sub
  end
  local.tee $3
  i32.const 4
  i32.shl
  local.get $4
  i32.add
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=96
  local.set $2
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  local.get $2
  i32.store offset=20
  local.get $2
  if
   local.get $2
   local.get $1
   i32.store offset=16
  end
  local.get $0
  local.get $4
  local.get $3
  i32.const 4
  i32.shl
  i32.add
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.store offset=96
  local.get $0
  local.get $0
  i32.load
  i32.const 1
  local.get $3
  i32.shl
  i32.or
  i32.store
  local.get $0
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  local.get $0
  local.get $3
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=4
  i32.const 1
  local.get $4
  i32.shl
  i32.or
  i32.store offset=4
 )
 (func $~lib/rt/tlsf/addMemory (; 3 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $2
  local.get $0
  i32.load offset=1568
  local.tee $2
  if
   local.get $2
   local.get $1
   i32.const 16
   i32.sub
   i32.eq
   if
    local.get $2
    i32.load
    local.set $3
    local.get $1
    i32.const 16
    i32.sub
    local.set $1
   end
  end
  local.get $1
  i32.sub
  local.tee $2
  i32.const 48
  i32.lt_u
  if
   return
  end
  local.get $1
  local.get $3
  i32.const 2
  i32.and
  local.get $2
  i32.const 32
  i32.sub
  i32.const 1
  i32.or
  i32.or
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=20
  local.get $1
  local.get $2
  i32.add
  i32.const 16
  i32.sub
  local.tee $2
  i32.const 2
  i32.store
  local.get $0
  local.get $2
  i32.store offset=1568
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/maybeInitialize (; 4 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $~lib/rt/tlsf/ROOT
  local.tee $0
  i32.eqz
  if
   i32.const 1
   memory.size
   local.tee $0
   i32.gt_s
   if (result i32)
    i32.const 1
    local.get $0
    i32.sub
    memory.grow
    i32.const 0
    i32.lt_s
   else
    i32.const 0
   end
   if
    unreachable
   end
   i32.const 24704
   local.tee $0
   i32.const 0
   i32.store
   i32.const 26272
   i32.const 0
   i32.store
   loop $for-loop|0
    local.get $1
    i32.const 23
    i32.lt_u
    if
     local.get $1
     i32.const 2
     i32.shl
     i32.const 24704
     i32.add
     i32.const 0
     i32.store offset=4
     i32.const 0
     local.set $2
     loop $for-loop|1
      local.get $2
      i32.const 16
      i32.lt_u
      if
       local.get $1
       i32.const 4
       i32.shl
       local.get $2
       i32.add
       i32.const 2
       i32.shl
       i32.const 24704
       i32.add
       i32.const 0
       i32.store offset=96
       local.get $2
       i32.const 1
       i32.add
       local.set $2
       br $for-loop|1
      end
     end
     local.get $1
     i32.const 1
     i32.add
     local.set $1
     br $for-loop|0
    end
   end
   i32.const 24704
   i32.const 26288
   memory.size
   i32.const 16
   i32.shl
   call $~lib/rt/tlsf/addMemory
   i32.const 24704
   global.set $~lib/rt/tlsf/ROOT
  end
  local.get $0
 )
 (func $~lib/rt/tlsf/prepareSize (; 5 ;) (param $0 i32) (result i32)
  local.get $0
  i32.const 1073741808
  i32.ge_u
  if
   i32.const 32
   i32.const 96
   i32.const 457
   i32.const 29
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.const 15
  i32.add
  i32.const -16
  i32.and
  local.tee $0
  i32.const 16
  local.get $0
  i32.const 16
  i32.gt_u
  select
 )
 (func $~lib/rt/tlsf/searchBlock (; 6 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $0
  local.get $1
  i32.const 256
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 4
   i32.shr_u
   local.set $1
   i32.const 0
  else
   local.get $1
   i32.const 536870904
   i32.lt_u
   if
    local.get $1
    i32.const 1
    i32.const 27
    local.get $1
    i32.clz
    i32.sub
    i32.shl
    i32.add
    i32.const 1
    i32.sub
    local.set $1
   end
   local.get $1
   i32.const 31
   local.get $1
   i32.clz
   i32.sub
   local.tee $2
   i32.const 4
   i32.sub
   i32.shr_u
   i32.const 16
   i32.xor
   local.set $1
   local.get $2
   i32.const 7
   i32.sub
  end
  local.tee $2
  i32.const 2
  i32.shl
  i32.add
  i32.load offset=4
  i32.const -1
  local.get $1
  i32.shl
  i32.and
  local.tee $1
  if (result i32)
   local.get $0
   local.get $1
   i32.ctz
   local.get $2
   i32.const 4
   i32.shl
   i32.add
   i32.const 2
   i32.shl
   i32.add
   i32.load offset=96
  else
   local.get $0
   i32.load
   i32.const -1
   local.get $2
   i32.const 1
   i32.add
   i32.shl
   i32.and
   local.tee $1
   if (result i32)
    local.get $0
    local.get $0
    local.get $1
    i32.ctz
    local.tee $0
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=4
    i32.ctz
    local.get $0
    i32.const 4
    i32.shl
    i32.add
    i32.const 2
    i32.shl
    i32.add
    i32.load offset=96
   else
    i32.const 0
   end
  end
 )
 (func $~lib/rt/tlsf/growMemory (; 7 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  memory.size
  local.tee $2
  local.get $1
  i32.const 536870904
  i32.lt_u
  if (result i32)
   local.get $1
   i32.const 1
   i32.const 27
   local.get $1
   i32.clz
   i32.sub
   i32.shl
   i32.const 1
   i32.sub
   i32.add
  else
   local.get $1
  end
  i32.const 16
  local.get $0
  i32.load offset=1568
  local.get $2
  i32.const 16
  i32.shl
  i32.const 16
  i32.sub
  i32.ne
  i32.shl
  i32.add
  i32.const 65535
  i32.add
  i32.const -65536
  i32.and
  i32.const 16
  i32.shr_u
  local.tee $1
  local.get $2
  local.get $1
  i32.gt_s
  select
  memory.grow
  i32.const 0
  i32.lt_s
  if
   local.get $1
   memory.grow
   i32.const 0
   i32.lt_s
   if
    unreachable
   end
  end
  local.get $0
  local.get $2
  i32.const 16
  i32.shl
  memory.size
  i32.const 16
  i32.shl
  call $~lib/rt/tlsf/addMemory
 )
 (func $~lib/rt/tlsf/prepareBlock (; 8 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  i32.load
  local.tee $3
  i32.const -4
  i32.and
  local.get $2
  i32.sub
  local.tee $4
  i32.const 32
  i32.ge_u
  if
   local.get $1
   local.get $2
   local.get $3
   i32.const 2
   i32.and
   i32.or
   i32.store
   local.get $2
   local.get $1
   i32.const 16
   i32.add
   i32.add
   local.tee $1
   local.get $4
   i32.const 16
   i32.sub
   i32.const 1
   i32.or
   i32.store
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/insertBlock
  else
   local.get $1
   local.get $3
   i32.const -2
   i32.and
   i32.store
   local.get $1
   i32.const 16
   i32.add
   local.get $1
   i32.load
   i32.const -4
   i32.and
   i32.add
   local.get $1
   i32.const 16
   i32.add
   local.get $1
   i32.load
   i32.const -4
   i32.and
   i32.add
   i32.load
   i32.const -3
   i32.and
   i32.store
  end
 )
 (func $~lib/rt/tlsf/allocateBlock (; 9 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/prepareSize
  local.tee $4
  call $~lib/rt/tlsf/searchBlock
  local.tee $3
  i32.eqz
  if
   i32.const 1
   global.set $~lib/rt/tlsf/collectLock
   i32.const 0
   global.set $~lib/rt/tlsf/collectLock
   local.get $0
   local.get $4
   call $~lib/rt/tlsf/searchBlock
   local.tee $3
   i32.eqz
   if
    local.get $0
    local.get $4
    call $~lib/rt/tlsf/growMemory
    local.get $0
    local.get $4
    call $~lib/rt/tlsf/searchBlock
    local.set $3
   end
  end
  local.get $3
  i32.const 0
  i32.store offset=4
  local.get $3
  local.get $2
  i32.store offset=8
  local.get $3
  local.get $1
  i32.store offset=12
  local.get $0
  local.get $3
  call $~lib/rt/tlsf/removeBlock
  local.get $0
  local.get $3
  local.get $4
  call $~lib/rt/tlsf/prepareBlock
  local.get $3
 )
 (func $~lib/rt/tlsf/__alloc (; 10 ;) (param $0 i32) (param $1 i32) (result i32)
  call $~lib/rt/tlsf/maybeInitialize
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/allocateBlock
  i32.const 16
  i32.add
 )
 (func $~lib/rt/pure/__retain (; 11 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $~lib/rt/pure/__release (; 12 ;) (param $0 i32)
  local.get $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   call $~lib/rt/pure/decrement
  end
 )
 (func $~lib/util/memory/memcpy (; 13 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  loop $while-continue|0
   local.get $1
   i32.const 3
   i32.and
   i32.const 0
   local.get $2
   select
   if
    local.get $0
    local.tee $3
    i32.const 1
    i32.add
    local.set $0
    local.get $1
    local.tee $4
    i32.const 1
    i32.add
    local.set $1
    local.get $3
    local.get $4
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    br $while-continue|0
   end
  end
  local.get $0
  i32.const 3
  i32.and
  i32.eqz
  if
   loop $while-continue|1
    local.get $2
    i32.const 16
    i32.ge_u
    if
     local.get $0
     local.get $1
     i32.load
     i32.store
     local.get $0
     i32.const 4
     i32.add
     local.get $1
     i32.const 4
     i32.add
     i32.load
     i32.store
     local.get $0
     i32.const 8
     i32.add
     local.get $1
     i32.const 8
     i32.add
     i32.load
     i32.store
     local.get $0
     i32.const 12
     i32.add
     local.get $1
     i32.const 12
     i32.add
     i32.load
     i32.store
     local.get $1
     i32.const 16
     i32.add
     local.set $1
     local.get $0
     i32.const 16
     i32.add
     local.set $0
     local.get $2
     i32.const 16
     i32.sub
     local.set $2
     br $while-continue|1
    end
   end
   local.get $2
   i32.const 8
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $0
    i32.const 4
    i32.add
    local.get $1
    i32.const 4
    i32.add
    i32.load
    i32.store
    local.get $1
    i32.const 8
    i32.add
    local.set $1
    local.get $0
    i32.const 8
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 4
   i32.and
   if
    local.get $0
    local.get $1
    i32.load
    i32.store
    local.get $1
    i32.const 4
    i32.add
    local.set $1
    local.get $0
    i32.const 4
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 2
   i32.and
   if
    local.get $0
    local.get $1
    i32.load16_u
    i32.store16
    local.get $1
    i32.const 2
    i32.add
    local.set $1
    local.get $0
    i32.const 2
    i32.add
    local.set $0
   end
   local.get $2
   i32.const 1
   i32.and
   if
    local.get $0
    local.get $1
    i32.load8_u
    i32.store8
   end
   return
  end
  local.get $2
  i32.const 32
  i32.ge_u
  if
   block $break|2
    block $case2|2
     block $case1|2
      local.get $0
      i32.const 3
      i32.and
      local.tee $3
      i32.const 1
      i32.ne
      if
       local.get $3
       i32.const 2
       i32.eq
       br_if $case1|2
       local.get $3
       i32.const 3
       i32.eq
       br_if $case2|2
       br $break|2
      end
      local.get $1
      i32.load
      local.set $5
      local.get $0
      local.get $1
      i32.load8_u
      i32.store8
      local.get $0
      i32.const 1
      i32.add
      local.tee $0
      local.get $1
      i32.const 1
      i32.add
      local.tee $1
      i32.load8_u
      i32.store8
      local.get $0
      i32.const 1
      i32.add
      local.tee $3
      i32.const 1
      i32.add
      local.set $0
      local.get $1
      i32.const 1
      i32.add
      local.tee $4
      i32.const 1
      i32.add
      local.set $1
      local.get $3
      local.get $4
      i32.load8_u
      i32.store8
      local.get $2
      i32.const 3
      i32.sub
      local.set $2
      loop $while-continue|3
       local.get $2
       i32.const 17
       i32.ge_u
       if
        local.get $0
        local.get $1
        i32.const 1
        i32.add
        i32.load
        local.tee $3
        i32.const 8
        i32.shl
        local.get $5
        i32.const 24
        i32.shr_u
        i32.or
        i32.store
        local.get $0
        i32.const 4
        i32.add
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $1
        i32.const 5
        i32.add
        i32.load
        local.tee $3
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $0
        i32.const 8
        i32.add
        local.get $3
        i32.const 24
        i32.shr_u
        local.get $1
        i32.const 9
        i32.add
        i32.load
        local.tee $3
        i32.const 8
        i32.shl
        i32.or
        i32.store
        local.get $0
        i32.const 12
        i32.add
        local.get $1
        i32.const 13
        i32.add
        i32.load
        local.tee $5
        i32.const 8
        i32.shl
        local.get $3
        i32.const 24
        i32.shr_u
        i32.or
        i32.store
        local.get $1
        i32.const 16
        i32.add
        local.set $1
        local.get $0
        i32.const 16
        i32.add
        local.set $0
        local.get $2
        i32.const 16
        i32.sub
        local.set $2
        br $while-continue|3
       end
      end
      br $break|2
     end
     local.get $1
     i32.load
     local.set $5
     local.get $0
     local.get $1
     i32.load8_u
     i32.store8
     local.get $0
     i32.const 1
     i32.add
     local.tee $3
     i32.const 1
     i32.add
     local.set $0
     local.get $1
     i32.const 1
     i32.add
     local.tee $4
     i32.const 1
     i32.add
     local.set $1
     local.get $3
     local.get $4
     i32.load8_u
     i32.store8
     local.get $2
     i32.const 2
     i32.sub
     local.set $2
     loop $while-continue|4
      local.get $2
      i32.const 18
      i32.ge_u
      if
       local.get $0
       local.get $1
       i32.const 2
       i32.add
       i32.load
       local.tee $3
       i32.const 16
       i32.shl
       local.get $5
       i32.const 16
       i32.shr_u
       i32.or
       i32.store
       local.get $0
       i32.const 4
       i32.add
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $1
       i32.const 6
       i32.add
       i32.load
       local.tee $3
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $0
       i32.const 8
       i32.add
       local.get $3
       i32.const 16
       i32.shr_u
       local.get $1
       i32.const 10
       i32.add
       i32.load
       local.tee $3
       i32.const 16
       i32.shl
       i32.or
       i32.store
       local.get $0
       i32.const 12
       i32.add
       local.get $1
       i32.const 14
       i32.add
       i32.load
       local.tee $5
       i32.const 16
       i32.shl
       local.get $3
       i32.const 16
       i32.shr_u
       i32.or
       i32.store
       local.get $1
       i32.const 16
       i32.add
       local.set $1
       local.get $0
       i32.const 16
       i32.add
       local.set $0
       local.get $2
       i32.const 16
       i32.sub
       local.set $2
       br $while-continue|4
      end
     end
     br $break|2
    end
    local.get $1
    i32.load
    local.set $5
    local.get $0
    local.tee $3
    i32.const 1
    i32.add
    local.set $0
    local.get $1
    local.tee $4
    i32.const 1
    i32.add
    local.set $1
    local.get $3
    local.get $4
    i32.load8_u
    i32.store8
    local.get $2
    i32.const 1
    i32.sub
    local.set $2
    loop $while-continue|5
     local.get $2
     i32.const 19
     i32.ge_u
     if
      local.get $0
      local.get $1
      i32.const 3
      i32.add
      i32.load
      local.tee $3
      i32.const 24
      i32.shl
      local.get $5
      i32.const 8
      i32.shr_u
      i32.or
      i32.store
      local.get $0
      i32.const 4
      i32.add
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $1
      i32.const 7
      i32.add
      i32.load
      local.tee $3
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $0
      i32.const 8
      i32.add
      local.get $3
      i32.const 8
      i32.shr_u
      local.get $1
      i32.const 11
      i32.add
      i32.load
      local.tee $3
      i32.const 24
      i32.shl
      i32.or
      i32.store
      local.get $0
      i32.const 12
      i32.add
      local.get $1
      i32.const 15
      i32.add
      i32.load
      local.tee $5
      i32.const 24
      i32.shl
      local.get $3
      i32.const 8
      i32.shr_u
      i32.or
      i32.store
      local.get $1
      i32.const 16
      i32.add
      local.set $1
      local.get $0
      i32.const 16
      i32.add
      local.set $0
      local.get $2
      i32.const 16
      i32.sub
      local.set $2
      br $while-continue|5
     end
    end
   end
  end
  local.get $2
  i32.const 16
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $3
   i32.const 1
   i32.add
   local.set $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $4
   i32.const 1
   i32.add
   local.set $1
   local.get $3
   local.get $4
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 8
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $3
   i32.const 1
   i32.add
   local.set $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $4
   i32.const 1
   i32.add
   local.set $1
   local.get $3
   local.get $4
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 4
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $3
   i32.const 1
   i32.add
   local.set $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $4
   i32.const 1
   i32.add
   local.set $1
   local.get $3
   local.get $4
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 2
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
   local.get $0
   i32.const 1
   i32.add
   local.tee $3
   i32.const 1
   i32.add
   local.set $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $4
   i32.const 1
   i32.add
   local.set $1
   local.get $3
   local.get $4
   i32.load8_u
   i32.store8
  end
  local.get $2
  i32.const 1
  i32.and
  if
   local.get $0
   local.get $1
   i32.load8_u
   i32.store8
  end
 )
 (func $~lib/memory/memory.copy (; 14 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  block $~lib/util/memory/memmove|inlined.0
   local.get $2
   local.set $3
   local.get $0
   local.get $1
   i32.eq
   br_if $~lib/util/memory/memmove|inlined.0
   i32.const 1
   local.get $0
   local.get $3
   i32.add
   local.get $1
   i32.le_u
   local.get $1
   local.get $3
   i32.add
   local.get $0
   i32.le_u
   select
   if
    local.get $0
    local.get $1
    local.get $3
    call $~lib/util/memory/memcpy
    br $~lib/util/memory/memmove|inlined.0
   end
   local.get $0
   local.get $1
   i32.lt_u
   if
    local.get $1
    i32.const 7
    i32.and
    local.get $0
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|0
      local.get $0
      i32.const 7
      i32.and
      if
       local.get $3
       i32.eqz
       br_if $~lib/util/memory/memmove|inlined.0
       local.get $3
       i32.const 1
       i32.sub
       local.set $3
       local.get $0
       local.tee $2
       i32.const 1
       i32.add
       local.set $0
       local.get $1
       local.tee $4
       i32.const 1
       i32.add
       local.set $1
       local.get $2
       local.get $4
       i32.load8_u
       i32.store8
       br $while-continue|0
      end
     end
     loop $while-continue|1
      local.get $3
      i32.const 8
      i32.ge_u
      if
       local.get $0
       local.get $1
       i64.load
       i64.store
       local.get $3
       i32.const 8
       i32.sub
       local.set $3
       local.get $0
       i32.const 8
       i32.add
       local.set $0
       local.get $1
       i32.const 8
       i32.add
       local.set $1
       br $while-continue|1
      end
     end
    end
    loop $while-continue|2
     local.get $3
     if
      local.get $0
      local.tee $2
      i32.const 1
      i32.add
      local.set $0
      local.get $1
      local.tee $4
      i32.const 1
      i32.add
      local.set $1
      local.get $2
      local.get $4
      i32.load8_u
      i32.store8
      local.get $3
      i32.const 1
      i32.sub
      local.set $3
      br $while-continue|2
     end
    end
   else
    local.get $1
    i32.const 7
    i32.and
    local.get $0
    i32.const 7
    i32.and
    i32.eq
    if
     loop $while-continue|3
      local.get $0
      local.get $3
      i32.add
      i32.const 7
      i32.and
      if
       local.get $3
       i32.eqz
       br_if $~lib/util/memory/memmove|inlined.0
       local.get $3
       i32.const 1
       i32.sub
       local.tee $3
       local.get $0
       i32.add
       local.get $1
       local.get $3
       i32.add
       i32.load8_u
       i32.store8
       br $while-continue|3
      end
     end
     loop $while-continue|4
      local.get $3
      i32.const 8
      i32.ge_u
      if
       local.get $3
       i32.const 8
       i32.sub
       local.tee $3
       local.get $0
       i32.add
       local.get $1
       local.get $3
       i32.add
       i64.load
       i64.store
       br $while-continue|4
      end
     end
    end
    loop $while-continue|5
     local.get $3
     if
      local.get $3
      i32.const 1
      i32.sub
      local.tee $3
      local.get $0
      i32.add
      local.get $1
      local.get $3
      i32.add
      i32.load8_u
      i32.store8
      br $while-continue|5
     end
    end
   end
  end
 )
 (func $~lib/rt/tlsf/freeBlock (; 15 ;) (param $0 i32) (param $1 i32)
  local.get $1
  local.get $1
  i32.load
  i32.const 1
  i32.or
  i32.store
  local.get $0
  local.get $1
  call $~lib/rt/tlsf/insertBlock
 )
 (func $~lib/rt/tlsf/reallocateBlock (; 16 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $2
  call $~lib/rt/tlsf/prepareSize
  local.tee $3
  local.get $1
  i32.load
  local.tee $5
  i32.const -4
  i32.and
  i32.le_u
  if
   local.get $0
   local.get $1
   local.get $3
   call $~lib/rt/tlsf/prepareBlock
   local.get $1
   local.get $2
   i32.store offset=12
   local.get $1
   return
  end
  local.get $1
  i32.const 16
  i32.add
  local.get $1
  i32.load
  i32.const -4
  i32.and
  i32.add
  local.tee $6
  i32.load
  local.tee $4
  i32.const 1
  i32.and
  if
   local.get $5
   i32.const -4
   i32.and
   i32.const 16
   i32.add
   local.get $4
   i32.const -4
   i32.and
   i32.add
   local.tee $4
   local.get $3
   i32.ge_u
   if
    local.get $0
    local.get $6
    call $~lib/rt/tlsf/removeBlock
    local.get $1
    local.get $5
    i32.const 3
    i32.and
    local.get $4
    i32.or
    i32.store
    local.get $1
    local.get $2
    i32.store offset=12
    local.get $0
    local.get $1
    local.get $3
    call $~lib/rt/tlsf/prepareBlock
    local.get $1
    return
   end
  end
  local.get $0
  local.get $2
  local.get $1
  i32.load offset=8
  call $~lib/rt/tlsf/allocateBlock
  local.tee $3
  local.get $1
  i32.load offset=4
  i32.store offset=4
  local.get $3
  i32.const 16
  i32.add
  local.get $1
  i32.const 16
  i32.add
  local.get $2
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 24700
  i32.ge_u
  if
   local.get $0
   local.get $1
   call $~lib/rt/tlsf/freeBlock
  end
  local.get $3
 )
 (func $~lib/memory/memory.fill (; 17 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  block $~lib/util/memory/memset|inlined.0
   local.get $1
   i32.eqz
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 0
   i32.store8
   local.get $0
   local.get $1
   i32.add
   i32.const 1
   i32.sub
   i32.const 0
   i32.store8
   local.get $1
   i32.const 2
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 1
   i32.add
   i32.const 0
   i32.store8
   local.get $0
   i32.const 2
   i32.add
   i32.const 0
   i32.store8
   local.get $0
   local.get $1
   i32.add
   local.tee $2
   i32.const 2
   i32.sub
   i32.const 0
   i32.store8
   local.get $2
   i32.const 3
   i32.sub
   i32.const 0
   i32.store8
   local.get $1
   i32.const 6
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 3
   i32.add
   i32.const 0
   i32.store8
   local.get $0
   local.get $1
   i32.add
   i32.const 4
   i32.sub
   i32.const 0
   i32.store8
   local.get $1
   i32.const 8
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $1
   i32.const 0
   local.get $0
   i32.sub
   i32.const 3
   i32.and
   local.tee $1
   i32.sub
   local.set $2
   local.get $0
   local.get $1
   i32.add
   local.tee $0
   i32.const 0
   i32.store
   local.get $0
   local.get $2
   i32.const -4
   i32.and
   local.tee $1
   i32.add
   i32.const 4
   i32.sub
   i32.const 0
   i32.store
   local.get $1
   i32.const 8
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 4
   i32.add
   i32.const 0
   i32.store
   local.get $0
   i32.const 8
   i32.add
   i32.const 0
   i32.store
   local.get $0
   local.get $1
   i32.add
   local.tee $2
   i32.const 12
   i32.sub
   i32.const 0
   i32.store
   local.get $2
   i32.const 8
   i32.sub
   i32.const 0
   i32.store
   local.get $1
   i32.const 24
   i32.le_u
   br_if $~lib/util/memory/memset|inlined.0
   local.get $0
   i32.const 12
   i32.add
   i32.const 0
   i32.store
   local.get $0
   i32.const 16
   i32.add
   i32.const 0
   i32.store
   local.get $0
   i32.const 20
   i32.add
   i32.const 0
   i32.store
   local.get $0
   i32.const 24
   i32.add
   i32.const 0
   i32.store
   local.get $0
   local.get $1
   i32.add
   local.tee $2
   i32.const 28
   i32.sub
   i32.const 0
   i32.store
   local.get $2
   i32.const 24
   i32.sub
   i32.const 0
   i32.store
   local.get $2
   i32.const 20
   i32.sub
   i32.const 0
   i32.store
   local.get $2
   i32.const 16
   i32.sub
   i32.const 0
   i32.store
   local.get $0
   local.get $0
   i32.const 4
   i32.and
   i32.const 24
   i32.add
   local.tee $2
   i32.add
   local.set $0
   local.get $1
   local.get $2
   i32.sub
   local.set $1
   loop $while-continue|0
    local.get $1
    i32.const 32
    i32.ge_u
    if
     local.get $0
     i64.const 0
     i64.store
     local.get $0
     i32.const 8
     i32.add
     i64.const 0
     i64.store
     local.get $0
     i32.const 16
     i32.add
     i64.const 0
     i64.store
     local.get $0
     i32.const 24
     i32.add
     i64.const 0
     i64.store
     local.get $1
     i32.const 32
     i32.sub
     local.set $1
     local.get $0
     i32.const 32
     i32.add
     local.set $0
     br $while-continue|0
    end
   end
  end
 )
 (func $~lib/array/ensureSize (; 18 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  local.tee $3
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   local.get $1
   i32.const 1073741808
   local.get $2
   i32.shr_u
   i32.gt_u
   if
    i32.const 304
    i32.const 256
    i32.const 14
    i32.const 47
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   i32.load
   local.set $4
   local.get $3
   call $~lib/rt/tlsf/maybeInitialize
   local.get $4
   i32.const 16
   i32.sub
   local.get $1
   local.get $2
   i32.shl
   local.tee $2
   call $~lib/rt/tlsf/reallocateBlock
   i32.const 16
   i32.add
   local.tee $1
   i32.add
   local.get $2
   local.get $3
   i32.sub
   call $~lib/memory/memory.fill
   local.get $1
   local.get $4
   i32.ne
   if
    local.get $0
    local.get $1
    i32.store
    local.get $0
    local.get $1
    i32.store offset=4
   end
   local.get $0
   local.get $2
   i32.store offset=8
  end
 )
 (func $~lib/array/Array<u8>#__set (; 19 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   local.get $1
   i32.const 0
   i32.lt_s
   if
    i32.const 192
    i32.const 256
    i32.const 109
    i32.const 21
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $3
   i32.const 0
   call $~lib/array/ensureSize
   local.get $0
   local.get $3
   i32.store offset=12
  end
  local.get $1
  local.get $0
  i32.load offset=4
  i32.add
  local.get $2
  i32.store8
 )
 (func $~lib/array/Array<u16>#__set (; 20 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 428
  i32.load
  i32.ge_u
  if
   local.get $0
   i32.const 0
   i32.lt_s
   if
    i32.const 192
    i32.const 256
    i32.const 109
    i32.const 21
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 416
   local.get $0
   i32.const 1
   i32.add
   local.tee $2
   i32.const 1
   call $~lib/array/ensureSize
   i32.const 428
   local.get $2
   i32.store
  end
  i32.const 420
  i32.load
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  local.get $1
  i32.store16
 )
 (func $~lib/array/Array<u8>#__get (; 21 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 192
   i32.const 256
   i32.const 93
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i32.load offset=4
  i32.add
  i32.load8_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:af (; 22 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluADC (; 23 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 1
  i32.const 0
  local.get $2
  select
  local.tee $4
  local.get $1
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.add
  local.tee $3
  i32.const 168
  i32.and
  local.tee $2
  local.get $2
  i32.const 64
  i32.or
  local.get $3
  i32.const 255
  i32.and
  select
  local.tee $2
  i32.const 1
  i32.or
  local.get $2
  local.get $3
  i32.const 65535
  i32.and
  i32.const 256
  i32.ge_u
  select
  local.tee $2
  i32.const 16
  i32.or
  local.get $2
  local.get $4
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $1
  i32.const 15
  i32.and
  i32.add
  i32.const 255
  i32.and
  i32.add
  i32.const 16
  i32.and
  select
  local.tee $2
  i32.const 4
  i32.or
  local.get $2
  local.get $4
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  local.get $1
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.add
  local.tee $1
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.const 128
  i32.ge_s
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.const 16
   i32.shl
   i32.const 16
   i32.shr_s
   i32.const -129
   i32.le_s
  end
  select
  i32.const 255
  i32.and
  local.get $3
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluADD (; 24 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $1
  i32.const 0
  call $src/assembly/Z80Cpu/AluADC
 )
 (func $src/assembly/Z80Cpu/AluSBC (; 25 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.const 255
  i32.and
  i32.sub
  i32.const 1
  i32.const 0
  local.get $2
  select
  local.tee $4
  i32.sub
  local.tee $3
  i32.const 168
  i32.and
  i32.const 2
  i32.or
  local.tee $2
  local.get $2
  i32.const 64
  i32.or
  local.get $3
  i32.const 255
  i32.and
  select
  local.tee $2
  i32.const 1
  i32.or
  local.get $2
  local.get $3
  i32.const 65535
  i32.and
  i32.const 256
  i32.ge_u
  select
  local.tee $2
  i32.const 16
  i32.or
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $1
  i32.const 15
  i32.and
  i32.sub
  i32.const 255
  i32.and
  local.get $4
  i32.sub
  i32.const 16
  i32.and
  select
  local.tee $2
  i32.const 4
  i32.or
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  local.get $1
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.sub
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  local.get $4
  i32.sub
  local.tee $1
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.const 128
  i32.ge_s
  if (result i32)
   i32.const 1
  else
   local.get $1
   i32.const 16
   i32.shl
   i32.const 16
   i32.shr_s
   i32.const -129
   i32.le_s
  end
  select
  i32.const 255
  i32.and
  local.get $3
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluSUB (; 26 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $1
  i32.const 0
  call $src/assembly/Z80Cpu/AluSBC
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:a (; 27 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:f (; 28 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluAND (; 29 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  i32.const 16
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluXOR (; 30 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.xor
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluOR (; 31 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.or
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AluCP (; 32 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.const 255
  i32.and
  i32.sub
  local.tee $2
  i32.const 168
  i32.and
  i32.const 2
  i32.or
  local.tee $3
  local.get $3
  i32.const 64
  i32.or
  local.get $2
  i32.const 255
  i32.and
  select
  local.tee $3
  i32.const 1
  i32.or
  local.get $3
  local.get $2
  i32.const 65535
  i32.and
  i32.const 256
  i32.ge_u
  select
  local.tee $2
  i32.const 16
  i32.or
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $1
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  select
  local.tee $2
  i32.const 4
  i32.or
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  local.get $1
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.sub
  local.tee $2
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.const 128
  i32.ge_s
  if (result i32)
   i32.const 1
  else
   local.get $2
   i32.const 16
   i32.shl
   i32.const 16
   i32.shr_s
   i32.const -129
   i32.le_s
  end
  select
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $~lib/typedarray/Uint32Array#__get (; 33 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 192
   i32.const 1104
   i32.const 792
   i32.const 63
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
 )
 (func $~lib/typedarray/Uint32Array#__set (; 34 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 2
  i32.shr_u
  i32.ge_u
  if
   i32.const 192
   i32.const 1104
   i32.const 803
   i32.const 63
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.get $2
  i32.store
 )
 (func $src/assembly/MemoryStatusArray/MemoryStatusArray#touch (; 35 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  i32.const 5
  i32.shr_u
  local.tee $2
  local.get $0
  i32.load
  local.get $2
  call $~lib/typedarray/Uint32Array#__get
  i32.const 1
  local.get $1
  i32.const 31
  i32.and
  i32.shl
  i32.or
  call $~lib/typedarray/Uint32Array#__set
 )
 (func $~setArgumentsLength (; 36 ;) (param $0 i32)
  local.get $0
  global.set $~argumentsLength
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#readMemory (; 37 ;) (param $0 i32) (param $1 i32) (result i32)
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory (; 38 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=48
  local.get $0
  i32.load16_u offset=96
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#touch
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#incTact (; 39 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load offset=32
  local.get $1
  i32.const 255
  i32.and
  i32.add
  i32.store offset=32
  local.get $0
  i32.load offset=32
  local.get $0
  i32.load offset=24
  i32.ge_u
  if
   local.get $0
   local.get $0
   i32.load offset=28
   i32.const 1
   i32.add
   i32.store offset=28
   local.get $0
   local.get $0
   i32.load offset=32
   local.get $0
   i32.load offset=24
   i32.sub
   i32.store offset=32
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:bc (; 40 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:de (; 41 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:hl (; 42 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setReg16 (; 43 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  block $break|0
   block $case3|0
    block $case2|0
     block $case1|0
      local.get $1
      i32.const 255
      i32.and
      local.tee $1
      if
       local.get $1
       i32.const 1
       i32.sub
       br_table $case1|0 $case2|0 $case3|0 $break|0
      end
      local.get $0
      local.get $2
      i32.store16 offset=2
      br $break|0
     end
     local.get $0
     local.get $2
     i32.store16 offset=4
     br $break|0
    end
    local.get $0
    local.get $2
    i32.store16 offset=6
    br $break|0
   end
   local.get $0
   local.get $2
   i32.store16 offset=98
  end
 )
 (func $src/assembly/Z80Cpu/LdQQNN (; 44 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.set $1
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  local.get $2
  local.get $3
  i32.const 8
  i32.shl
  i32.or
  call $src/assembly/Z80Cpu/Z80Cpu#setReg16
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#writeMemory (; 45 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/LdBCiA (; 46 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#getReg16 (; 47 ;) (param $0 i32) (param $1 i32) (result i32)
  block $case4|0
   block $case3|0
    block $case2|0
     block $case1|0
      local.get $1
      i32.const 255
      i32.and
      local.tee $1
      if
       local.get $1
       i32.const 1
       i32.sub
       br_table $case1|0 $case2|0 $case3|0 $case4|0
      end
      local.get $0
      i32.load16_u offset=2
      return
     end
     local.get $0
     i32.load16_u offset=4
     return
    end
    local.get $0
    i32.load16_u offset=6
    return
   end
   local.get $0
   i32.load16_u offset=98
   return
  end
  i32.const 65535
 )
 (func $src/assembly/Z80Cpu/IncQQ (; 48 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.tee $1
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 1
  i32.add
  call $src/assembly/Z80Cpu/Z80Cpu#setReg16
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#getReg8 (; 49 ;) (param $0 i32) (param $1 i32) (result i32)
  block $case7|0
   block $case6|0
    block $case5|0
     block $case4|0
      block $case3|0
       block $case2|0
        block $case1|0
         local.get $1
         i32.const 255
         i32.and
         local.tee $1
         if
          local.get $1
          i32.const 1
          i32.sub
          br_table $case1|0 $case2|0 $case3|0 $case4|0 $case5|0 $case7|0 $case6|0 $case7|0
         end
         local.get $0
         i32.load16_u offset=2
         i32.const 8
         i32.shr_u
         return
        end
        local.get $0
        i32.load16_u offset=2
        i32.const 255
        i32.and
        return
       end
       local.get $0
       i32.load16_u offset=4
       i32.const 8
       i32.shr_u
       return
      end
      local.get $0
      i32.load16_u offset=4
      i32.const 255
      i32.and
      return
     end
     local.get $0
     i32.load16_u offset=6
     i32.const 8
     i32.shr_u
     return
    end
    local.get $0
    i32.load16_u offset=6
    i32.const 255
    i32.and
    return
   end
   local.get $0
   i32.load16_u
   i32.const 8
   i32.shr_u
   return
  end
  i32.const 255
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:b (; 50 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:c (; 51 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:d (; 52 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:e (; 53 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:h (; 54 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:l (; 55 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setReg8 (; 56 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  block $break|0
   block $case6|0
    block $case5|0
     block $case4|0
      block $case3|0
       block $case2|0
        block $case1|0
         local.get $1
         i32.const 255
         i32.and
         local.tee $1
         if
          local.get $1
          i32.const 1
          i32.sub
          br_table $case1|0 $case2|0 $case3|0 $case4|0 $case5|0 $break|0 $case6|0 $break|0
         end
         local.get $0
         local.get $0
         i32.load16_u offset=2
         i32.const 255
         i32.and
         local.get $2
         i32.const 255
         i32.and
         i32.const 8
         i32.shl
         i32.or
         i32.store16 offset=2
         br $break|0
        end
        local.get $0
        local.get $0
        i32.load16_u offset=2
        i32.const 65280
        i32.and
        local.get $2
        i32.const 255
        i32.and
        i32.or
        i32.store16 offset=2
        br $break|0
       end
       local.get $0
       local.get $0
       i32.load16_u offset=4
       i32.const 255
       i32.and
       local.get $2
       i32.const 255
       i32.and
       i32.const 8
       i32.shl
       i32.or
       i32.store16 offset=4
       br $break|0
      end
      local.get $0
      local.get $0
      i32.load16_u offset=4
      i32.const 65280
      i32.and
      local.get $2
      i32.const 255
      i32.and
      i32.or
      i32.store16 offset=4
      br $break|0
     end
     local.get $0
     local.get $0
     i32.load16_u offset=6
     i32.const 255
     i32.and
     local.get $2
     i32.const 255
     i32.and
     i32.const 8
     i32.shl
     i32.or
     i32.store16 offset=6
     br $break|0
    end
    local.get $0
    local.get $0
    i32.load16_u offset=6
    i32.const 65280
    i32.and
    local.get $2
    i32.const 255
    i32.and
    i32.or
    i32.store16 offset=6
    br $break|0
   end
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.const 8
   i32.shl
   i32.or
   i32.store16
  end
 )
 (func $src/assembly/Z80Cpu/IncQ (; 57 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.tee $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  local.get $2
  local.get $1
  i32.const 1
  i32.add
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  i32.const 160
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/DecQ (; 58 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.tee $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  local.get $2
  local.get $1
  i32.const 1
  i32.sub
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  i32.const 368
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/LdQN (; 59 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Rlca (; 60 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.shl
  local.tee $1
  i32.const 256
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.tee $2
  if
   local.get $1
   i32.const 1
   i32.or
   local.set $1
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:_af_ (; 61 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=8
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:_af_ (; 62 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=8
 )
 (func $src/assembly/Z80Cpu/ExAf (; 63 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=8
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.store16 offset=8
  local.get $0
  local.get $1
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:wz (; 64 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#aluAddHL (; 65 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 4095
  i32.and
  local.get $2
  i32.const 4095
  i32.and
  i32.add
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  i32.const 16
  i32.and
  i32.or
  i32.or
  i32.store16
  local.get $1
  i32.const 65535
  i32.and
  local.get $2
  i32.const 65535
  i32.and
  i32.add
  local.tee $1
  i32.const 65536
  i32.and
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 1
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 8
  i32.shr_u
  i32.const 40
  i32.and
  i32.or
  i32.or
  i32.store16
  local.get $1
  i32.const 65535
  i32.and
 )
 (func $src/assembly/Z80Cpu/AddHlQQ (; 66 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  call $src/assembly/Z80Cpu/Z80Cpu#aluAddHL
  i32.store16 offset=6
  local.get $0
  i32.const 7
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdABci (; 67 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/DecQQ (; 68 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.tee $1
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 1
  i32.sub
  call $src/assembly/Z80Cpu/Z80Cpu#setReg16
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Rrca (; 69 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 1
  i32.shr_u
  local.tee $1
  i32.const 128
  i32.or
  local.get $1
  local.get $2
  select
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Djnz (; 70 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $2
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $2
  i32.store16 offset=96
  local.get $0
  local.get $2
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/LdDEiA (; 71 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:cFlag (; 72 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Rla (; 73 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.tee $1
  i32.const 128
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.set $2
  local.get $1
  i32.const 1
  i32.shl
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   local.get $1
   i32.const 1
   i32.or
   local.set $1
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JrE (; 74 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $1
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $1
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.store16 offset=22
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdADei (; 75 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=4
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Rra (; 76 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.tee $1
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.set $2
  local.get $1
  i32.const 1
  i32.shr_u
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   local.get $1
   i32.const 128
   i32.or
   local.set $1
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JrNz (; 77 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $2
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $2
  i32.store16 offset=96
  local.get $0
  local.get $2
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/LdNNiHl (; 78 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $~lib/array/Array<u16>#__get (; 79 ;) (param $0 i32) (result i32)
  local.get $0
  i32.const 428
  i32.load
  i32.ge_u
  if
   i32.const 192
   i32.const 256
   i32.const 93
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 420
  i32.load
  local.get $0
  i32.const 1
  i32.shl
  i32.add
  i32.load16_u
 )
 (func $src/assembly/Z80Cpu/Daa (; 80 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 3
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 2
  i32.shr_u
  i32.const 4
  i32.and
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.const 65535
  i32.and
  call $~lib/array/Array<u16>#__get
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JrZ (; 81 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $2
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $2
  i32.store16 offset=96
  local.get $0
  local.get $2
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/LdHlNNi (; 82 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $1
  local.get $2
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Cpl (; 83 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 255
  i32.xor
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 40
  i32.and
  local.get $0
  i32.load16_u
  i32.const 215
  i32.and
  i32.const 18
  i32.or
  i32.or
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JrNc (; 84 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $2
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $2
  i32.store16 offset=96
  local.get $0
  local.get $2
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:wh (; 85 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/LdNNiA (; 86 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#aluIncByte (; 87 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 160
  local.get $1
  i32.const 255
  i32.and
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 1
  i32.add
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/IncHli (; 88 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#aluIncByte
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#aluDecByte (; 89 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  i32.const 368
  local.get $1
  i32.const 255
  i32.and
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/DecHli (; 90 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#aluDecByte
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdHliN (; 91 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Scf (; 92 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 40
  i32.and
  i32.or
  i32.const 1
  i32.or
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JrC (; 93 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  local.get $2
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $2
  i32.store16 offset=96
  local.get $0
  local.get $2
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/LdANNi (; 94 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Ccf (; 95 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 16
  else
   i32.const 1
  end
  local.get $0
  i32.load16_u
  i32.const 196
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 40
  i32.and
  i32.or
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/LdQW (; 96 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/LdQHli (; 97 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $1
  local.get $0
  i32.load16_u offset=6
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdHliQ (; 98 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Halt (; 99 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=36
  i32.const 8
  i32.or
  i32.store offset=36
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.sub
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/AddAQ (; 100 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 464
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AddAHli (; 101 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 464
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AdcAQ (; 102 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 464
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.tee $2
  i32.const 16
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.add
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $2
  i32.add
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AdcAHli (; 103 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 464
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.tee $2
  i32.const 16
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.add
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $2
  i32.add
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/SubAQ (; 104 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 512
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/SubAHli (; 105 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 512
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/SbcAQ (; 106 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 512
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.tee $2
  i32.const 16
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.add
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  local.get $2
  i32.add
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/SbcAHli (; 107 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 512
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.tee $2
  i32.const 16
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.add
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  local.get $2
  i32.add
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AndAQ (; 108 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  i32.const 16
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/AndAHli (; 109 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $1
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  i32.const 16
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/XorAQ (; 110 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.xor
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/XorAHli (; 111 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.xor
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/OrAQ (; 112 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/OrAHli (; 113 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.or
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/CpAQ (; 114 ;) (param $0 i32)
  (local $1 i32)
  i32.const 512
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  i32.const -41
  i32.and
  local.get $1
  i32.const 40
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/CpAHli (; 115 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 512
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 65535
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  i32.const -41
  i32.and
  local.get $1
  i32.const 40
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/RetNz (; 116 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PopBc (; 117 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
 )
 (func $src/assembly/Z80Cpu/JpNz (; 118 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Jp (; 119 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/CallNz (; 120 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PushBc (; 121 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=2
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func "$~lib/array/Array<(cpu: src/assembly/Z80Cpu/Z80Cpu, value: u8, carry: bool) => void>#__get" (; 122 ;) (param $0 i32) (result i32)
  local.get $0
  i32.const 1084
  i32.load
  i32.ge_u
  if
   i32.const 192
   i32.const 256
   i32.const 93
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  i32.const 1076
  i32.load
  local.get $0
  i32.const 2
  i32.shl
  i32.add
  i32.load
  local.tee $0
  i32.eqz
  if
   i32.const 1168
   i32.const 256
   i32.const 97
   i32.const 39
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
 )
 (func $src/assembly/Z80Cpu/AluAN (; 123 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  call "$~lib/array/Array<(cpu: src/assembly/Z80Cpu/Z80Cpu, value: u8, carry: bool) => void>#__get"
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  local.get $2
  call_indirect (type $i32_i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/RstN (; 124 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.store16 offset=22
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/RetZ (; 125 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Ret (; 126 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/JpZ (; 127 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/CallZ (; 128 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Call (; 129 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/RetNc (; 130 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PopDe (; 131 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=4
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
 )
 (func $src/assembly/Z80Cpu/JpNc (; 132 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#writePort (; 133 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $2
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/OutNA (; 134 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/CallNc (; 135 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PushDe (; 136 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=4
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/RetC (; 137 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:_bc_ (; 138 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=10
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:_bc_ (; 139 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=10
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:_de_ (; 140 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=12
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:_de_ (; 141 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=12
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:_hl_ (; 142 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=14
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:_hl_ (; 143 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=14
 )
 (func $src/assembly/Z80Cpu/Exx (; 144 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=2
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=10
  i32.store16 offset=2
  local.get $0
  local.get $1
  i32.store16 offset=10
  local.get $0
  i32.load16_u offset=4
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=12
  i32.store16 offset=4
  local.get $0
  local.get $1
  i32.store16 offset=12
  local.get $0
  i32.load16_u offset=6
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=14
  i32.store16 offset=6
  local.get $0
  local.get $1
  i32.store16 offset=14
 )
 (func $src/assembly/Z80Cpu/JpC (; 145 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#readPort (; 146 ;) (param $0 i32) (param $1 i32) (result i32)
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/InAN (; 147 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  local.tee $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.add
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/CallC (; 148 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/RetPo (; 149 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PopHl (; 150 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=6
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
 )
 (func $src/assembly/Z80Cpu/JpPo (; 151 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/ExSpiHl (; 152 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $2
  local.get $1
  i32.const 1
  i32.add
  local.tee $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  i32.sub
  local.tee $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 255
   i32.and
   local.set $2
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   local.get $2
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 255
   i32.and
   local.set $2
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   local.get $2
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/CallPo (; 153 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PushHl (; 154 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/RetPe (; 155 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/JpHli (; 156 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/JpPe (; 157 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/ExDeHl (; 158 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=4
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.store16 offset=4
  local.get $0
  local.get $1
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/CallPe (; 159 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/RetP (; 160 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PopAf (; 161 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
 )
 (func $src/assembly/Z80Cpu/JpP (; 162 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Di (; 163 ;) (param $0 i32)
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
 )
 (func $src/assembly/Z80Cpu/CallP (; 164 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/PushAf (; 165 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/RetM (; 166 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=98
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load16_u offset=98
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/LdSpHl (; 167 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.store16 offset=98
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/JpM (; 168 ;) (param $0 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Ei (; 169 ;) (param $0 i32)
  local.get $0
  i32.const 1
  i32.store8 offset=44
  local.get $0
  i32.const 1
  i32.store8 offset=41
  local.get $0
  i32.const 1
  i32.store8 offset=42
 )
 (func $src/assembly/Z80Cpu/CallM (; 170 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=22
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Swapnib (; 171 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 4
  i32.shl
  local.get $0
  i32.load16_u
  i32.const 12
  i32.shr_u
  i32.or
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Mirror (; 172 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.set $1
  loop $for-loop|1
   local.get $2
   i32.const 8
   i32.lt_s
   if
    local.get $1
    i32.const 1
    i32.and
    local.get $3
    i32.const 1
    i32.shl
    i32.or
    local.set $3
    local.get $1
    i32.const 1
    i32.shr_u
    local.set $1
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|1
   end
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/TestN (; 173 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 560
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.and
  call $~lib/array/Array<u8>#__get
  i32.const 16
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/BslaDeB (; 174 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.shl
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/BsraDeB (; 175 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 32768
  i32.and
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.shr_u
  i32.or
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/BsrlDeB (; 176 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.shr_u
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/BsrfDeB (; 177 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const -1
  i32.xor
  i32.const 65535
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.shr_u
  i32.const -1
  i32.xor
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/BrlcDeB (; 178 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.shl
  local.get $0
  i32.load16_u offset=4
  i32.const 16
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.sub
  i32.shr_u
  i32.or
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/Mul (; 179 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  i32.mul
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/AddHlA (; 180 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/AddDeA (; 181 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/AddBcA (; 182 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/AddHlNN (; 183 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  local.get $0
  i32.load16_u offset=6
  i32.add
  i32.store16 offset=6
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/AddDeNN (; 184 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  local.get $0
  i32.load16_u offset=4
  i32.add
  i32.store16 offset=4
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/AddBcNN (; 185 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  local.get $0
  i32.load16_u offset=2
  i32.add
  i32.store16 offset=2
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/InQCi (; 186 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 3
  i32.shr_u
  i32.const 7
  i32.and
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  local.set $3
  i32.const 560
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $2
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $2
   local.get $3
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
 )
 (func $src/assembly/Z80Cpu/OutCiQ (; 187 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 3
  i32.shr_u
  i32.const 7
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  local.get $1
  i32.const 6
  i32.ne
  if (result i32)
   local.get $0
   local.get $1
   call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  else
   i32.const 0
  end
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/SbcHlQQ (; 188 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.set $2
  local.get $0
  i32.load16_u offset=6
  i32.const 4095
  i32.and
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.tee $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 4095
  i32.and
  i32.sub
  local.get $2
  i32.sub
  i32.const 8
  i32.shr_u
  i32.const 16
  i32.and
  i32.const 2
  i32.or
  local.set $1
  local.get $0
  i32.load16_u offset=6
  local.get $0
  local.get $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.sub
  local.get $2
  i32.sub
  local.tee $4
  i32.const 65536
  i32.and
  if
   local.get $1
   i32.const 1
   i32.or
   local.set $1
  end
  local.get $1
  local.get $1
  i32.const 64
  i32.or
  local.get $4
  i32.const 65535
  i32.and
  select
  local.set $1
  local.get $0
  i32.load16_s offset=6
  local.get $0
  local.get $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.sub
  local.get $2
  i32.sub
  local.tee $2
  i32.const -32768
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $2
   i32.const 32768
   i32.ge_s
  end
  if
   local.get $1
   i32.const 4
   i32.or
   local.set $1
  end
  local.get $0
  local.get $4
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 168
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.const 7
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdNNiQQ (; 189 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Neg (; 190 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 0
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  local.set $3
  i32.const 0
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.sub
  local.tee $2
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.const 168
  i32.and
  i32.const 2
  i32.or
  local.tee $1
  local.get $1
  i32.const 64
  i32.or
  local.get $2
  i32.const 255
  i32.and
  select
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  if
   local.get $1
   i32.const 1
   i32.or
   local.set $1
  end
  local.get $1
  i32.const 16
  i32.or
  local.get $1
  local.get $3
  select
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 128
  i32.eq
  if
   local.get $1
   i32.const 4
   i32.or
   local.set $1
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Retn (; 191 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=42
  i32.store8 offset=41
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  local.get $1
  local.get $2
  i32.const 8
  i32.shl
  i32.add
  local.tee $1
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/ImN (; 192 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 24
  i32.and
  i32.const 3
  i32.shr_u
  local.tee $0
  i32.const 2
  i32.lt_u
  if (result i32)
   i32.const 1
  else
   local.get $0
  end
  i32.const 1
  i32.sub
  i32.store8 offset=43
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:i (; 193 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=16
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:r (; 194 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=17
 )
 (func $src/assembly/Z80Cpu/LdXrA (; 195 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 8
  i32.and
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 8
   i32.shr_u
   i32.store8 offset=17
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 8
   i32.shr_u
   i32.store8 offset=16
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/AdcHlQQ (; 196 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  local.set $2
  local.get $0
  i32.load16_u offset=6
  i32.const 4095
  i32.and
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.tee $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 4095
  i32.and
  i32.add
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.add
  i32.const 8
  i32.shr_u
  i32.const 16
  i32.and
  local.set $1
  local.get $2
  local.get $0
  i32.load16_u offset=6
  local.get $0
  local.get $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 65535
  i32.and
  i32.add
  i32.add
  local.tee $4
  i32.const 65536
  i32.and
  if
   local.get $1
   i32.const 1
   i32.or
   local.set $1
  end
  local.get $1
  local.get $1
  i32.const 64
  i32.or
  local.get $4
  i32.const 65535
  i32.and
  select
  local.set $1
  local.get $2
  local.get $0
  i32.load16_s offset=6
  local.get $0
  local.get $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  i32.const 16
  i32.shl
  i32.const 16
  i32.shr_s
  i32.add
  i32.add
  local.tee $2
  i32.const -32768
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   local.get $2
   i32.const 32768
   i32.ge_s
  end
  if
   local.get $1
   i32.const 4
   i32.or
   local.set $1
  end
  local.get $0
  local.get $4
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 168
  i32.and
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.const 7
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdQQNNi (; 197 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.get $1
  local.get $2
  i32.const 8
  i32.shl
  i32.or
  call $src/assembly/Z80Cpu/Z80Cpu#setReg16
 )
 (func $src/assembly/Z80Cpu/LdAXr (; 198 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load8_u offset=69
  i32.const 8
  i32.and
  if (result i32)
   local.get $0
   i32.load8_u offset=17
  else
   local.get $0
   i32.load8_u offset=16
  end
  local.tee $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 128
  i32.and
  local.get $0
  i32.load8_u offset=42
  if (result i32)
   i32.const 4
  else
   i32.const 0
  end
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  local.get $1
  i32.const 40
  i32.and
  i32.or
  i32.or
  i32.or
  i32.const 0
  i32.const 64
  local.get $1
  i32.const 255
  i32.and
  select
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Rrd (; 199 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=6
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 4
  i32.shl
  local.get $2
  i32.const 4
  i32.shr_u
  i32.or
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 240
  i32.and
  local.get $2
  i32.const 15
  i32.and
  i32.or
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Rld (; 200 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=6
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $2
  i32.const 4
  i32.shl
  i32.or
  i32.const 255
  i32.and
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 240
  i32.and
  local.get $2
  i32.const 4
  i32.shr_u
  i32.or
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  i32.const 560
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/PushNN (; 201 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/OutInB (; 202 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#writeTbBlueIndex (; 203 ;) (param $0 i32) (param $1 i32)
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=88
  call_indirect (type $i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#writeTbBlueValue (; 204 ;) (param $0 i32) (param $1 i32)
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=92
  call_indirect (type $i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/NextReg (; 205 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=88
  call_indirect (type $i32_=>_none)
  i32.const 1
  global.set $~argumentsLength
  local.get $2
  local.get $0
  i32.load offset=92
  call_indirect (type $i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/NextRegA (; 206 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=88
  call_indirect (type $i32_=>_none)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=92
  call_indirect (type $i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/PixelDn (; 207 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 7
  i32.and
  i32.const 7
  i32.eq
  if
   local.get $0
   i32.load16_u offset=6
   i32.const 255
   i32.and
   i32.const 224
   i32.lt_u
   if
    local.get $0
    local.get $0
    i32.load16_u offset=6
    i32.const 65280
    i32.and
    local.get $0
    i32.load16_u offset=6
    i32.const 255
    i32.and
    i32.const 32
    i32.add
    i32.const 255
    i32.and
    i32.or
    i32.store16 offset=6
    local.get $0
    local.get $0
    i32.load16_u offset=6
    i32.const 255
    i32.and
    local.get $0
    i32.load16_u offset=6
    i32.const 8
    i32.shr_u
    i32.const 248
    i32.and
    i32.const 8
    i32.shl
    i32.or
    i32.store16 offset=6
   else
    local.get $0
    local.get $0
    i32.load16_u offset=6
    i32.const 65280
    i32.and
    local.get $0
    i32.load16_u offset=6
    i32.const 255
    i32.and
    i32.const 32
    i32.add
    i32.const 255
    i32.and
    i32.or
    i32.store16 offset=6
    local.get $0
    local.get $0
    i32.load16_u offset=6
    i32.const 255
    i32.and
    local.get $0
    i32.load16_u offset=6
    i32.const 8
    i32.shr_u
    i32.const 1
    i32.add
    i32.const 255
    i32.and
    i32.const 8
    i32.shl
    i32.or
    i32.store16 offset=6
   end
  else
   local.get $0
   local.get $0
   i32.load16_u offset=6
   i32.const 256
   i32.add
   i32.store16 offset=6
  end
 )
 (func $src/assembly/Z80Cpu/PixelAd (; 208 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  i32.const 3
  i32.shr_u
  i32.const 16384
  i32.or
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  i32.const 5
  i32.shl
  i32.or
  local.tee $0
  i32.const 63519
  i32.and
  local.get $0
  i32.const 1792
  i32.and
  i32.const 3
  i32.shr_u
  i32.or
  local.get $0
  i32.const 224
  i32.and
  i32.const 3
  i32.shl
  i32.or
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/SetAE (; 209 ;) (param $0 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 128
  local.get $0
  i32.load16_u offset=4
  i32.const 7
  i32.and
  i32.shr_u
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/JpInC (; 210 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 49152
  i32.and
  local.get $1
  i32.const 6
  i32.shl
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Ldi (; 211 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.add
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=4
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 193
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  local.tee $1
  i32.const 8
  i32.and
  local.get $1
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
  end
 )
 (func $src/assembly/Z80Cpu/Cpi (; 212 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $2
  i32.sub
  local.tee $2
  local.set $3
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 2
  i32.or
  local.set $1
  local.get $2
  i32.const 128
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $2
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  if
   local.get $2
   i32.const 1
   i32.sub
   local.set $3
   local.get $1
   i32.const 16
   i32.or
   local.set $1
  end
  local.get $1
  local.get $1
  i32.const 64
  i32.or
  local.get $2
  i32.const 255
  i32.and
  select
  i32.or
  local.get $3
  i32.const 8
  i32.and
  local.get $3
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $2
   i32.const 4
   i32.or
   local.set $2
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Ini (; 213 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 2
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 191
   i32.and
   i32.or
   i32.store16
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 64
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Outi (; 214 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 2
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 191
   i32.and
   i32.or
   i32.store16
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 64
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Ldix (; 215 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.add
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.ne
  if
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
  end
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/Ldws (; 216 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=4
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  i32.const 1
  i32.add
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=6
  i32.const 160
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.add
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=4
 )
 (func $src/assembly/Z80Cpu/Ldd (; 217 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.sub
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=4
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.sub
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 193
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  local.tee $1
  i32.const 8
  i32.and
  local.get $1
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
  end
 )
 (func $src/assembly/Z80Cpu/Cpd (; 218 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $2
  i32.sub
  local.tee $2
  local.set $3
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 2
  i32.or
  local.set $1
  local.get $2
  i32.const 128
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $2
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  if
   local.get $2
   i32.const 1
   i32.sub
   local.set $3
   local.get $1
   i32.const 16
   i32.or
   local.set $1
  end
  local.get $1
  local.get $1
  i32.const 64
  i32.or
  local.get $2
  i32.const 255
  i32.and
  select
  i32.or
  local.get $3
  i32.const 8
  i32.and
  local.get $3
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.sub
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $2
   i32.const 4
   i32.or
   local.set $2
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 1
  i32.sub
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Ind (; 219 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 2
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 191
   i32.and
   i32.or
   i32.store16
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 64
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.sub
  i32.store16 offset=6
 )
 (func $src/assembly/Z80Cpu/Outd (; 220 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 368
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 2
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 191
   i32.and
   i32.or
   i32.store16
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 64
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.sub
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Lddx (; 221 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.sub
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.ne
  if
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
  end
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.sub
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
 )
 (func $src/assembly/Z80Cpu/Ldir (; 222 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.add
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=4
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 193
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  local.tee $1
  i32.const 8
  i32.and
  local.get $1
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 4
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  i32.sub
  i32.store16 offset=96
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Cpir (; 223 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $2
  i32.sub
  local.tee $1
  local.set $3
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 2
  i32.or
  local.set $2
  local.get $1
  i32.const 128
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $1
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  if
   local.get $1
   i32.const 1
   i32.sub
   local.set $3
   local.get $2
   i32.const 16
   i32.or
   local.set $2
  end
  local.get $2
  local.get $2
  i32.const 64
  i32.or
  local.get $1
  i32.const 255
  i32.and
  select
  i32.or
  local.get $3
  i32.const 8
  i32.and
  local.get $3
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $2
   i32.const 4
   i32.or
   local.tee $2
   i32.const 64
   i32.and
   i32.eqz
   if
    local.get $0
    local.get $0
    i32.load16_u offset=96
    i32.const 2
    i32.sub
    i32.store16 offset=96
    local.get $0
    i32.load8_u offset=40
    if
     local.get $0
     i32.const 5
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
    else
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.sub
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.sub
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.sub
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.sub
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.sub
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
    end
    local.get $0
    local.get $0
    i32.load16_u offset=96
    i32.const 1
    i32.add
    i32.store16 offset=22
   end
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Inir (; 224 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 368
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.add
  i32.store16 offset=6
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   i32.sub
   i32.store16 offset=96
   local.get $0
   i32.load8_u offset=40
   if
    local.get $0
    i32.const 5
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   else
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.sub
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.sub
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.sub
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.sub
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.sub
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   end
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 251
   i32.and
   i32.or
   i32.store16
  end
 )
 (func $src/assembly/Z80Cpu/Otir (; 225 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 368
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.add
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   i32.sub
   i32.store16 offset=96
   local.get $0
   i32.load8_u offset=40
   if
    local.get $0
    i32.const 5
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   else
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   end
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 251
   i32.and
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 254
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  i32.eqz
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 1
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Ldirx (; 226 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.add
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.ne
  if
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
  end
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  i32.sub
  i32.store16 offset=96
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Ldpirx (; 227 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 65528
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 7
  i32.and
  i32.add
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.ne
  if
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
  end
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.add
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  i32.sub
  i32.store16 offset=96
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Lddr (; 228 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.sub
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=4
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.sub
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 193
  i32.and
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.add
  local.tee $1
  i32.const 8
  i32.and
  local.get $1
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.const 4
  i32.or
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  i32.sub
  i32.store16 offset=96
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.add
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.add
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.add
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.add
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=4
   i32.const 1
   i32.add
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Cpdr (; 229 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  local.get $2
  i32.sub
  local.tee $1
  local.set $3
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 2
  i32.or
  local.set $2
  local.get $1
  i32.const 128
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 15
  i32.and
  local.get $1
  i32.const 15
  i32.and
  i32.sub
  i32.const 16
  i32.and
  if
   local.get $1
   i32.const 1
   i32.sub
   local.set $3
   local.get $2
   i32.const 16
   i32.or
   local.set $2
  end
  local.get $2
  local.get $2
  i32.const 64
  i32.or
  local.get $1
  i32.const 255
  i32.and
  select
  i32.or
  local.get $3
  i32.const 8
  i32.and
  local.get $3
  i32.const 4
  i32.shl
  i32.const 32
  i32.and
  i32.or
  i32.or
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.sub
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  if
   local.get $2
   i32.const 4
   i32.or
   local.tee $2
   i32.const 64
   i32.and
   i32.eqz
   if
    local.get $0
    local.get $0
    i32.load16_u offset=96
    i32.const 2
    i32.sub
    i32.store16 offset=96
    local.get $0
    i32.load8_u offset=40
    if
     local.get $0
     i32.const 5
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
    else
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.add
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.add
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.add
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.add
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
     local.get $0
     i32.load16_u offset=6
     i32.const 1
     i32.add
     i32.const 2
     global.set $~argumentsLength
     i32.const 0
     local.get $0
     i32.load offset=72
     call_indirect (type $i32_i32_=>_i32)
     drop
     local.get $0
     i32.const 1
     call $src/assembly/Z80Cpu/Z80Cpu#incTact
    end
    local.get $0
    local.get $0
    i32.load16_u offset=96
    i32.const 1
    i32.add
    i32.store16 offset=22
   end
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/Indr (; 230 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  global.set $~argumentsLength
  local.get $0
  i32.load offset=80
  call_indirect (type $i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 368
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 1
  i32.sub
  i32.store16 offset=6
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   i32.sub
   i32.store16 offset=96
   local.get $0
   i32.load8_u offset=40
   if
    local.get $0
    i32.const 5
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   else
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.add
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.add
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.add
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.add
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=6
    i32.const 1
    i32.add
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   end
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 251
   i32.and
   i32.or
   i32.store16
  end
 )
 (func $src/assembly/Z80Cpu/Otdr (; 231 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 368
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 1
  i32.sub
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.sub
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=84
  call_indirect (type $i32_i32_=>_none)
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 4
   i32.or
   i32.or
   i32.store16
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   i32.sub
   i32.store16 offset=96
   local.get $0
   i32.load8_u offset=40
   if
    local.get $0
    i32.const 5
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   else
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    local.get $0
    i32.load16_u offset=2
    i32.const 2
    global.set $~argumentsLength
    i32.const 0
    local.get $0
    i32.load offset=72
    call_indirect (type $i32_i32_=>_i32)
    drop
    local.get $0
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
   end
  else
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 251
   i32.and
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 254
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  i32.const 255
  i32.eq
  if
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $0
   i32.load16_u
   i32.const 255
   i32.and
   i32.const 1
   i32.or
   i32.or
   i32.store16
  end
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/Lddrx (; 232 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=70
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=6
  local.tee $1
  i32.const 1
  i32.sub
  i32.store16 offset=6
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $1
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.ne
  if
   local.get $0
   i32.load16_u offset=4
   i32.const 3
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=76
   call_indirect (type $i32_i32_i32_=>_none)
  end
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 1
  i32.sub
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 1
  i32.sub
  i32.store16 offset=2
  local.get $0
  i32.load16_u offset=2
  i32.eqz
  if
   return
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  i32.sub
  i32.store16 offset=96
  local.get $0
  i32.const 5
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=22
 )
 (func $src/assembly/Z80Cpu/RlcQ (; 233 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  local.get $2
  i32.const 944
  local.get $1
  call $~lib/array/Array<u8>#__get
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  i32.const 608
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/RlcHli (; 234 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 944
  local.get $1
  call $~lib/array/Array<u8>#__get
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 608
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/RrcQ (; 235 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  local.get $2
  i32.const 992
  local.get $1
  call $~lib/array/Array<u8>#__get
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  i32.const 656
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/RrcHli (; 236 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  local.set $2
  i32.const 656
  local.get $1
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 992
  local.get $2
  call $~lib/array/Array<u8>#__get
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/RlQ (; 237 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   i32.const 752
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $0
   local.get $3
   local.get $1
   i32.const 1
   i32.shl
   i32.const 1
   i32.add
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  else
   i32.const 704
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $0
   local.get $3
   local.get $1
   i32.const 1
   i32.shl
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
 )
 (func $src/assembly/Z80Cpu/RlHli (; 238 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 752
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $1
   i32.const 1
   i32.shl
   i32.const 1
   i32.add
  else
   i32.const 704
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $1
   i32.const 1
   i32.shl
  end
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/RrQ (; 239 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $3
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if
   i32.const 848
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $0
   local.get $3
   local.get $1
   i32.const 1
   i32.shr_u
   i32.const 128
   i32.add
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  else
   i32.const 800
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $0
   local.get $3
   local.get $1
   i32.const 1
   i32.shr_u
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
 )
 (func $src/assembly/Z80Cpu/RrHli (; 240 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $1
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 848
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $1
   i32.const 1
   i32.shr_u
   i32.const 128
   i32.add
  else
   i32.const 800
   local.get $1
   call $~lib/array/Array<u8>#__get
   local.set $2
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $2
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $1
   i32.const 1
   i32.shr_u
  end
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/SlaQ (; 241 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 704
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $2
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $1
  local.get $2
  i32.const 1
  i32.shl
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/SlaHli (; 242 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  i32.const 704
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 1
  i32.shl
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/SraQ (; 243 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 896
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $1
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $2
  local.get $1
  i32.const 128
  i32.and
  local.get $1
  i32.const 1
  i32.shr_u
  i32.add
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/SraHli (; 244 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  i32.const 896
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 128
  i32.and
  local.get $1
  i32.const 1
  i32.shr_u
  i32.add
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/SllQ (; 245 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 752
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $2
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $1
  local.get $2
  i32.const 1
  i32.shl
  i32.const 1
  i32.add
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/SllHli (; 246 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  i32.const 752
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 1
  i32.shl
  i32.const 1
  i32.add
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/SrlQ (; 247 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 800
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $1
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $2
  call $~lib/array/Array<u8>#__get
  local.set $3
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $3
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $1
  local.get $2
  i32.const 1
  i32.shr_u
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/SrlHli (; 248 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  local.set $1
  i32.const 2
  global.set $~argumentsLength
  i32.const 800
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  call $~lib/array/Array<u8>#__get
  local.set $2
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  i32.const 1
  i32.shr_u
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/BitNQ (; 249 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $3
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.tee $2
  i32.const 40
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 16
  i32.or
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 1
  local.get $3
  i32.shl
  i32.and
  local.tee $2
  i32.eqz
  if
   local.get $1
   i32.const 68
   i32.or
   local.set $1
  end
  local.get $1
  i32.const 128
  i32.or
  local.get $1
  local.get $2
  i32.const 0
  local.get $3
  i32.const 7
  i32.eq
  select
  select
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/BitNHli (; 250 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $2
  i32.const 40
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 16
  i32.or
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=22
  i32.const 8
  i32.shr_u
  i32.const 40
  i32.and
  local.get $2
  i32.const 1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.tee $2
  i32.shl
  i32.and
  local.tee $3
  i32.eqz
  if
   local.get $1
   i32.const 68
   i32.or
   local.set $1
  end
  local.get $1
  i32.const 128
  i32.or
  local.get $1
  local.get $3
  i32.const 0
  local.get $2
  i32.const 7
  i32.eq
  select
  select
  local.tee $1
  i32.const -9
  i32.and
  local.get $1
  i32.const -33
  i32.and
  i32.or
  i32.or
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
 )
 (func $src/assembly/Z80Cpu/ResNQ (; 251 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $1
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $2
  local.get $0
  local.get $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  i32.const 1
  local.get $1
  i32.shl
  i32.const -1
  i32.xor
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/ResNHli (; 252 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  i32.shl
  i32.const -1
  i32.xor
  i32.and
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/SetNQ (; 253 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $1
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $2
  local.get $0
  local.get $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  i32.const 1
  local.get $1
  i32.shl
  i32.or
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/SetNHli (; 254 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=6
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  i32.load16_u offset=6
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:iy (; 255 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=20
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:ix (; 256 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=18
 )
 (func $src/assembly/Z80Cpu/AddIxQQ (; 257 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 48
  i32.and
  i32.const 4
  i32.shr_u
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.set $2
  local.get $1
  i32.const 2
  i32.eq
  if (result i32)
   local.get $2
  else
   local.get $0
   local.get $1
   call $src/assembly/Z80Cpu/Z80Cpu#getReg16
  end
  local.set $1
  local.get $0
  local.get $2
  i32.const 1
  i32.add
  i32.store16 offset=22
  local.get $0
  local.get $2
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#aluAddHL
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
  local.get $0
  i32.const 7
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdIxNN (; 258 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdNNiIx (; 259 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  local.set $2
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 65535
  i32.and
  local.tee $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  i32.const 3
  global.set $~argumentsLength
  local.get $2
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/IncIx (; 260 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  i32.const 1
  i32.add
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/IncXh (; 261 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  local.tee $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $1
   i32.load16_u offset=20
  else
   local.get $1
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.tee $0
  i32.const 8
  i32.shr_u
  call $src/assembly/Z80Cpu/Z80Cpu#aluIncByte
  i32.const 8
  i32.shl
  local.get $0
  i32.const 255
  i32.and
  i32.or
  local.set $0
  local.get $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $1
   local.get $0
   i32.store16 offset=20
  else
   local.get $1
   local.get $0
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/DecXh (; 262 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  local.tee $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $1
   i32.load16_u offset=20
  else
   local.get $1
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.tee $0
  i32.const 8
  i32.shr_u
  call $src/assembly/Z80Cpu/Z80Cpu#aluDecByte
  i32.const 8
  i32.shl
  local.get $0
  i32.const 255
  i32.and
  i32.or
  local.set $0
  local.get $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $1
   local.get $0
   i32.store16 offset=20
  else
   local.get $1
   local.get $0
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/LdXhN (; 263 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 255
  i32.and
  local.get $1
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/LdIxNNi (; 264 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.const 8
  i32.shl
  i32.or
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.const 1
  i32.add
  i32.store16 offset=22
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=22
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/DecIx (; 265 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $1
   i32.load16_u offset=20
  else
   local.get $1
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  i32.const 1
  i32.sub
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/IncXl (; 266 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  local.tee $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $1
   i32.load16_u offset=20
  else
   local.get $1
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.tee $0
  call $src/assembly/Z80Cpu/Z80Cpu#aluIncByte
  local.get $0
  i32.const 65280
  i32.and
  i32.or
  local.set $0
  local.get $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $1
   local.get $0
   i32.store16 offset=20
  else
   local.get $1
   local.get $0
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/DecXl (; 267 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  local.get $0
  local.tee $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $1
   i32.load16_u offset=20
  else
   local.get $1
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.tee $0
  call $src/assembly/Z80Cpu/Z80Cpu#aluDecByte
  local.get $0
  i32.const 65280
  i32.and
  i32.or
  local.set $0
  local.get $1
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $1
   local.get $0
   i32.store16 offset=20
  else
   local.get $1
   local.get $0
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/LdXlN (; 268 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65280
  i32.and
  i32.or
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/IncIxi (; 269 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 2
  global.set $~argumentsLength
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $3
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $2
  call $src/assembly/Z80Cpu/Z80Cpu#aluIncByte
  local.set $2
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 3
  global.set $~argumentsLength
  local.get $3
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/DecIxi (; 270 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 2
  global.set $~argumentsLength
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.tee $3
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $2
  call $src/assembly/Z80Cpu/Z80Cpu#aluDecByte
  local.set $2
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 3
  global.set $~argumentsLength
  local.get $3
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdIxiN (; 271 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $4
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 2
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 3
  global.set $~argumentsLength
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.get $4
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdQXh (; 272 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/LdQXl (; 273 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
 )
 (func $src/assembly/Z80Cpu/LdQIxi (; 274 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $2
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.set $3
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $4
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $2
  local.get $3
  local.get $4
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/LdIxiQ (; 275 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $2
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  local.get $2
  call $src/assembly/Z80Cpu/Z80Cpu#getReg8
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/AluAXh (; 276 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  local.set $1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  call "$~lib/array/Array<(cpu: src/assembly/Z80Cpu/Z80Cpu, value: u8, carry: bool) => void>#__get"
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  local.get $2
  call_indirect (type $i32_i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/AluAXl (; 277 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  local.set $1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  call "$~lib/array/Array<(cpu: src/assembly/Z80Cpu/Z80Cpu, value: u8, carry: bool) => void>#__get"
  local.set $2
  i32.const 3
  global.set $~argumentsLength
  local.get $0
  local.get $1
  i32.const 65535
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  local.get $2
  call_indirect (type $i32_i32_i32_=>_none)
 )
 (func $src/assembly/Z80Cpu/AluAIxi (; 278 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.set $2
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $3
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load16_u offset=96
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  call "$~lib/array/Array<(cpu: src/assembly/Z80Cpu/Z80Cpu, value: u8, carry: bool) => void>#__get"
  local.set $1
  i32.const 3
  global.set $~argumentsLength
  i32.const 2
  global.set $~argumentsLength
  local.get $0
  local.get $2
  local.get $3
  i32.const 24
  i32.shl
  i32.const 24
  i32.shr_s
  i32.add
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  local.get $1
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/PopIx (; 279 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.add
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.add
  i32.store16 offset=98
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/ExSpiIx (; 280 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load16_u offset=98
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $3
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  i32.add
  local.tee $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $4
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 4
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 1
  i32.sub
  local.tee $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.load8_u offset=40
  if
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  else
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
   local.get $0
   i32.const 1
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $3
  local.get $4
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=22
  local.get $0
  i32.load16_u offset=22
  local.set $1
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/PushIx (; 281 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 65535
  i32.and
  local.tee $1
  i32.const 8
  i32.shr_u
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/JpIxi (; 282 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/LdSpIx (; 283 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.store16 offset=98
  local.get $0
  i32.const 2
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XrlcQ (; 284 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $3
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 944
  local.get $3
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $2
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $2
   local.get $4
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $4
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 608
  local.get $3
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/XrrcQ (; 285 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $2
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $3
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 992
  local.get $3
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $2
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $2
   local.get $4
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $4
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 656
  local.get $3
  call $~lib/array/Array<u8>#__get
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/XrlQ (; 286 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $4
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 752
   local.get $2
   call $~lib/array/Array<u8>#__get
   local.set $3
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $3
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $2
   i32.const 1
   i32.shl
   i32.const 1
   i32.add
  else
   i32.const 704
   local.get $2
   call $~lib/array/Array<u8>#__get
   local.set $3
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $3
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $2
   i32.const 1
   i32.shl
  end
  local.set $2
  local.get $4
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $4
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XrrQ (; 287 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $4
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  if (result i32)
   i32.const 848
   local.get $2
   call $~lib/array/Array<u8>#__get
   local.set $3
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $3
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $2
   i32.const 1
   i32.shr_u
   i32.const 128
   i32.add
  else
   i32.const 800
   local.get $2
   call $~lib/array/Array<u8>#__get
   local.set $3
   local.get $0
   local.get $0
   i32.load16_u
   i32.const 65280
   i32.and
   local.get $3
   i32.const 255
   i32.and
   i32.or
   i32.store16
   local.get $2
   i32.const 1
   i32.shr_u
  end
  local.set $2
  local.get $4
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $4
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XSlaQ (; 288 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $3
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 704
  local.get $2
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $4
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $2
  i32.const 1
  i32.shl
  local.set $2
  local.get $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XSraQ (; 289 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $3
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 896
  local.get $2
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $4
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $2
  i32.const 128
  i32.and
  local.get $2
  i32.const 1
  i32.shr_u
  i32.add
  local.set $2
  local.get $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XSllQ (; 290 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $3
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 752
  local.get $2
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $4
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $2
  i32.const 1
  i32.shl
  i32.const 1
  i32.add
  local.set $2
  local.get $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XSrlQ (; 291 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.set $3
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 800
  local.get $2
  call $~lib/array/Array<u8>#__get
  local.set $4
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $4
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $2
  i32.const 1
  i32.shr_u
  local.set $2
  local.get $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XBitN (; 292 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  local.set $3
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.set $2
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $2
  i32.const 40
  i32.and
  local.get $0
  i32.load16_u
  i32.const 1
  i32.and
  i32.const 16
  i32.or
  i32.or
  local.set $1
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $2
  i32.const 1
  local.get $3
  i32.shl
  i32.and
  local.tee $2
  i32.eqz
  if
   local.get $1
   i32.const 68
   i32.or
   local.set $1
  end
  local.get $1
  i32.const 128
  i32.or
  local.get $1
  local.get $2
  i32.const 0
  local.get $3
  i32.const 7
  i32.eq
  select
  select
  i32.const 255
  i32.and
  i32.or
  i32.store16
 )
 (func $src/assembly/Z80Cpu/XResNQ (; 293 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  i32.shl
  i32.const -1
  i32.xor
  i32.and
  local.set $2
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/XSetNQ (; 294 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 2
  global.set $~argumentsLength
  local.get $1
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  i32.const 1
  local.get $0
  i32.load8_u offset=69
  i32.const 56
  i32.and
  i32.const 3
  i32.shr_u
  i32.shl
  i32.or
  local.set $2
  local.get $0
  i32.load8_u offset=69
  i32.const 7
  i32.and
  local.tee $3
  i32.const 6
  i32.ne
  if
   local.get $0
   local.get $3
   local.get $2
   call $src/assembly/Z80Cpu/Z80Cpu#setReg8
  end
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $1
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  i32.const 3
  global.set $~argumentsLength
  local.get $1
  local.get $2
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $start:src/assembly/Z80Cpu (; 295 ;)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  loop $for-loop|0
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 160
    local.get $0
    local.get $0
    i32.const 1
    i32.add
    local.tee $1
    i32.const 255
    i32.and
    local.tee $2
    i32.const 8
    i32.and
    local.get $2
    i32.const 32
    i32.and
    i32.or
    i32.const 128
    i32.const 0
    local.get $1
    i32.const 128
    i32.and
    select
    i32.or
    i32.const 0
    i32.const 64
    local.get $1
    i32.const 255
    i32.and
    select
    i32.or
    i32.const 16
    i32.const 0
    local.get $0
    i32.const 15
    i32.and
    i32.const 15
    i32.eq
    select
    i32.or
    i32.const 4
    i32.const 0
    local.get $0
    i32.const 255
    i32.and
    i32.const 127
    i32.eq
    select
    i32.or
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|1
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 368
    local.get $0
    local.get $0
    i32.const 1
    i32.sub
    local.tee $1
    i32.const 255
    i32.and
    local.tee $2
    i32.const 8
    i32.and
    local.get $2
    i32.const 32
    i32.and
    i32.or
    i32.const 128
    i32.const 0
    local.get $1
    i32.const 128
    i32.and
    select
    i32.or
    i32.const 0
    i32.const 64
    local.get $1
    i32.const 255
    i32.and
    select
    i32.or
    i32.const 0
    i32.const 16
    local.get $0
    i32.const 15
    i32.and
    select
    i32.or
    i32.const 4
    i32.const 0
    local.get $0
    i32.const 255
    i32.and
    i32.const 128
    i32.eq
    select
    i32.or
    i32.const 2
    i32.or
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|2
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 4
    i32.shr_s
    local.set $5
    local.get $0
    i32.const 15
    i32.and
    local.set $2
    i32.const 0
    local.set $1
    loop $for-loop|3
     local.get $1
     i32.const 1
     i32.le_s
     if
      i32.const 0
      local.set $6
      loop $for-loop|4
       local.get $6
       i32.const 1
       i32.le_s
       if
        i32.const 0
        local.set $7
        loop $for-loop|5
         local.get $7
         i32.const 1
         i32.le_s
         if
          i32.const 0
          local.tee $4
          local.set $8
          local.get $7
          if
           i32.const 1
           local.set $8
           local.get $2
           i32.const 9
           i32.le_s
           i32.const 0
           local.get $2
           i32.const 0
           i32.ge_s
           select
           if (result i32)
            i32.const 102
            i32.const 96
            local.get $1
            select
           else
            i32.const 102
            i32.const 0
            local.get $2
            i32.const 15
            i32.le_s
            i32.const 0
            local.get $2
            i32.const 10
            i32.ge_s
            select
            select
           end
           local.set $4
          else
           local.get $2
           i32.const 9
           i32.le_s
           i32.const 0
           local.get $2
           i32.const 0
           i32.ge_s
           i32.const 0
           local.get $5
           i32.const 9
           i32.le_s
           i32.const 0
           local.get $5
           i32.const 0
           i32.ge_s
           select
           select
           select
           if
            i32.const 6
            i32.const 0
            local.get $1
            select
            local.set $4
           else
            local.get $2
            i32.const 15
            i32.le_s
            i32.const 0
            local.get $2
            i32.const 10
            i32.ge_s
            i32.const 0
            local.get $5
            i32.const 8
            i32.le_s
            i32.const 0
            local.get $5
            i32.const 0
            i32.ge_s
            select
            select
            select
            if
             i32.const 6
             local.set $4
            else
             local.get $1
             i32.eqz
             i32.const 0
             local.get $2
             i32.const 9
             i32.le_s
             i32.const 0
             local.get $2
             i32.const 0
             i32.ge_s
             i32.const 0
             local.get $5
             i32.const 15
             i32.le_s
             i32.const 0
             local.get $5
             i32.const 10
             i32.ge_s
             select
             select
             select
             select
             if (result i32)
              i32.const 96
              local.set $4
              i32.const 1
             else
              local.get $2
              i32.const 15
              i32.le_s
              i32.const 0
              local.get $2
              i32.const 10
              i32.ge_s
              i32.const 0
              local.get $5
              i32.const 15
              i32.le_s
              i32.const 0
              local.get $5
              i32.const 9
              i32.ge_s
              select
              select
              select
              if (result i32)
               i32.const 102
               local.set $4
               i32.const 1
              else
               local.get $2
               i32.const 9
               i32.le_s
               i32.const 0
               local.get $2
               i32.const 0
               i32.ge_s
               i32.const 0
               local.get $5
               i32.const 15
               i32.le_s
               i32.const 0
               local.get $5
               i32.const 10
               i32.ge_s
               select
               select
               select
               if (result i32)
                i32.const 102
                i32.const 0
                local.get $1
                i32.const 1
                i32.eq
                select
                local.set $4
                i32.const 1
               else
                i32.const 0
               end
              end
             end
             local.set $8
            end
           end
          end
          i32.const 1
          i32.const 0
          local.get $6
          i32.eqz
          i32.const 0
          local.get $2
          i32.const 15
          i32.le_s
          i32.const 0
          local.get $2
          i32.const 10
          i32.ge_s
          select
          select
          if (result i32)
           i32.const 1
          else
           local.get $1
           i32.const 1
           i32.eq
           i32.const 0
           local.get $6
           i32.const 1
           i32.eq
           i32.const 0
           local.get $2
           i32.const 5
           i32.le_s
           i32.const 0
           local.get $2
           i32.const 0
           i32.ge_s
           select
           select
           select
          end
          select
          local.set $11
          local.get $0
          local.get $4
          i32.sub
          local.get $0
          local.get $4
          i32.add
          local.get $6
          select
          i32.const 255
          i32.and
          local.tee $4
          local.set $3
          i32.const 0
          local.tee $9
          local.set $10
          loop $for-loop|6
           local.get $10
           i32.const 8
           i32.lt_s
           if
            local.get $3
            i32.const 1
            i32.and
            local.get $9
            i32.add
            local.set $9
            local.get $3
            i32.const 1
            i32.shr_s
            local.set $3
            local.get $10
            i32.const 1
            i32.add
            local.set $10
            br $for-loop|6
           end
          end
          local.get $1
          i32.const 2
          i32.shl
          local.get $6
          i32.const 1
          i32.shl
          i32.add
          local.get $7
          i32.add
          i32.const 255
          i32.and
          i32.const 8
          i32.shl
          local.get $0
          i32.add
          local.get $9
          i32.const 2
          i32.rem_s
          if (result i32)
           i32.const 0
          else
           i32.const 4
          end
          local.get $4
          i32.const 8
          i32.and
          local.get $4
          i32.const 32
          i32.and
          i32.or
          i32.const 128
          i32.const 0
          local.get $4
          i32.const 128
          i32.and
          select
          i32.or
          i32.const 0
          i32.const 64
          local.get $4
          select
          i32.or
          i32.or
          i32.const 2
          i32.const 0
          local.get $6
          i32.const 1
          i32.eq
          select
          i32.or
          i32.const 16
          i32.const 0
          local.get $11
          i32.const 1
          i32.eq
          select
          i32.or
          i32.const 1
          i32.const 0
          local.get $8
          i32.const 1
          i32.eq
          select
          i32.or
          i32.const 255
          i32.and
          local.get $4
          i32.const 8
          i32.shl
          i32.or
          i32.const 65535
          i32.and
          call $~lib/array/Array<u16>#__set
          local.get $7
          i32.const 1
          i32.add
          local.set $7
          br $for-loop|5
         end
        end
        local.get $6
        i32.const 1
        i32.add
        local.set $6
        br $for-loop|4
       end
      end
      local.get $1
      i32.const 1
      i32.add
      local.set $1
      br $for-loop|3
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|2
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|7
   local.get $0
   i32.const 2
   i32.lt_s
   if
    i32.const 0
    local.set $5
    loop $for-loop|8
     local.get $5
     i32.const 256
     i32.lt_s
     if
      i32.const 0
      local.set $1
      loop $for-loop|9
       local.get $1
       i32.const 256
       i32.lt_s
       if
        local.get $1
        local.get $5
        i32.add
        local.get $0
        i32.add
        i32.const 65535
        i32.and
        local.tee $3
        i32.const 255
        i32.and
        if (result i32)
         i32.const 0
        else
         i32.const 64
        end
        local.get $3
        i32.const 168
        i32.and
        i32.or
        local.tee $4
        i32.const 1
        i32.or
        local.get $4
        local.get $3
        i32.const 256
        i32.ge_s
        select
        local.tee $4
        i32.const 16
        i32.or
        local.get $4
        local.get $5
        i32.const 15
        i32.and
        local.get $1
        i32.const 15
        i32.and
        i32.add
        local.get $0
        i32.add
        i32.const 16
        i32.and
        select
        local.set $4
        i32.const 464
        local.get $0
        i32.const 16
        i32.shl
        local.get $5
        i32.const 8
        i32.shl
        i32.add
        local.get $1
        i32.add
        local.get $5
        i32.const 24
        i32.shl
        i32.const 24
        i32.shr_s
        local.get $1
        i32.const 24
        i32.shl
        i32.const 24
        i32.shr_s
        i32.add
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        local.get $0
        i32.add
        local.tee $3
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        i32.const 128
        i32.ge_s
        if (result i32)
         i32.const 1
        else
         local.get $3
         i32.const 16
         i32.shl
         i32.const 16
         i32.shr_s
         i32.const -129
         i32.le_s
        end
        if (result i32)
         local.get $4
         i32.const 4
         i32.or
        else
         local.get $4
        end
        call $~lib/array/Array<u8>#__set
        local.get $1
        i32.const 1
        i32.add
        local.set $1
        br $for-loop|9
       end
      end
      local.get $5
      i32.const 1
      i32.add
      local.set $5
      br $for-loop|8
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|7
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|10
   local.get $0
   i32.const 2
   i32.lt_s
   if
    i32.const 0
    local.set $5
    loop $for-loop|11
     local.get $5
     i32.const 256
     i32.lt_s
     if
      i32.const 0
      local.set $1
      loop $for-loop|12
       local.get $1
       i32.const 256
       i32.lt_s
       if
        local.get $5
        local.get $1
        i32.sub
        local.get $0
        i32.sub
        local.tee $3
        i32.const 168
        i32.and
        local.tee $4
        local.get $4
        i32.const 64
        i32.or
        local.get $3
        i32.const 255
        i32.and
        select
        local.tee $4
        i32.const 1
        i32.or
        local.get $4
        local.get $3
        i32.const 65536
        i32.and
        select
        local.set $4
        i32.const 512
        local.get $0
        i32.const 16
        i32.shl
        local.get $5
        i32.const 8
        i32.shl
        i32.add
        local.get $1
        i32.add
        local.get $5
        i32.const 24
        i32.shl
        i32.const 24
        i32.shr_s
        local.get $1
        i32.const 24
        i32.shl
        i32.const 24
        i32.shr_s
        i32.sub
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        local.get $0
        i32.sub
        local.tee $2
        i32.const 16
        i32.shl
        i32.const 16
        i32.shr_s
        i32.const 128
        i32.ge_s
        if (result i32)
         i32.const 1
        else
         local.get $2
         i32.const 16
         i32.shl
         i32.const 16
         i32.shr_s
         i32.const -128
         i32.lt_s
        end
        if
         local.get $4
         i32.const 4
         i32.or
         local.set $4
        end
        local.get $4
        i32.const 16
        i32.or
        local.get $4
        local.get $5
        i32.const 15
        i32.and
        local.get $3
        i32.const 15
        i32.and
        i32.sub
        local.get $0
        i32.sub
        i32.const 16
        i32.and
        select
        i32.const 2
        i32.or
        call $~lib/array/Array<u8>#__set
        local.get $1
        i32.const 1
        i32.add
        local.set $1
        br $for-loop|12
       end
      end
      local.get $5
      i32.const 1
      i32.add
      local.set $5
      br $for-loop|11
     end
    end
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|10
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|13
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 168
    i32.and
    local.set $4
    i32.const 4
    local.set $3
    i32.const 128
    local.set $1
    loop $for-loop|14
     local.get $1
     if
      local.get $3
      i32.const 4
      i32.xor
      local.get $3
      local.get $0
      local.get $1
      i32.and
      select
      local.set $3
      local.get $1
      i32.const 2
      i32.div_s
      local.set $1
      br $for-loop|14
     end
    end
    i32.const 560
    local.get $0
    local.get $3
    local.get $4
    i32.or
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|13
   end
  end
  i32.const 560
  i32.const 0
  i32.const 560
  i32.const 0
  call $~lib/array/Array<u8>#__get
  i32.const 64
  i32.or
  call $~lib/array/Array<u8>#__set
  i32.const 0
  local.set $0
  loop $for-loop|15
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $3
    i32.const 256
    i32.and
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    local.tee $4
    if
     local.get $3
     i32.const 1
     i32.or
     i32.const 255
     i32.and
     local.set $3
    end
    i32.const 4
    local.set $1
    i32.const 128
    local.set $2
    loop $for-loop|16
     local.get $2
     if
      local.get $1
      i32.const 4
      i32.xor
      local.get $1
      local.get $2
      local.get $3
      i32.and
      select
      local.set $1
      local.get $2
      i32.const 2
      i32.div_s
      local.set $2
      br $for-loop|16
     end
    end
    i32.const 608
    local.get $0
    local.get $3
    i32.const 168
    i32.and
    local.get $1
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $2
    local.get $2
    i32.const 64
    i32.or
    local.get $3
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|15
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|17
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shr_s
    local.set $2
    i32.const 1
    i32.const 0
    local.get $0
    i32.const 1
    i32.and
    select
    local.tee $4
    if
     local.get $2
     i32.const 128
     i32.or
     local.set $2
    end
    i32.const 4
    local.set $5
    i32.const 128
    local.set $3
    loop $for-loop|18
     local.get $3
     if
      local.get $5
      i32.const 4
      i32.xor
      local.get $5
      local.get $2
      local.get $3
      i32.and
      select
      local.set $5
      local.get $3
      i32.const 2
      i32.div_s
      local.set $3
      br $for-loop|18
     end
    end
    i32.const 656
    local.get $0
    local.get $2
    i32.const 168
    i32.and
    local.get $5
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $3
    local.get $3
    i32.const 64
    i32.or
    local.get $2
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|17
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|19
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    local.tee $3
    i32.const 256
    i32.and
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    local.set $4
    i32.const 4
    local.set $1
    i32.const 128
    local.set $2
    loop $for-loop|20
     local.get $2
     if
      local.get $1
      i32.const 4
      i32.xor
      local.get $1
      local.get $2
      local.get $3
      i32.and
      select
      local.set $1
      local.get $2
      i32.const 2
      i32.div_s
      local.set $2
      br $for-loop|20
     end
    end
    i32.const 704
    local.get $0
    local.get $3
    i32.const 168
    i32.and
    local.get $1
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $2
    local.get $2
    i32.const 64
    i32.or
    local.get $3
    i32.const 255
    i32.and
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|19
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|21
   local.get $0
   i32.const 256
   i32.lt_s
   if
    local.get $0
    i32.const 1
    i32.shl
    i32.const 1
    i32.add
    local.tee $1
    i32.const 256
    i32.and
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    local.set $4
    i32.const 4
    local.set $5
    i32.const 128
    local.set $3
    loop $for-loop|22
     local.get $3
     if
      local.get $5
      i32.const 4
      i32.xor
      local.get $5
      local.get $1
      local.get $3
      i32.and
      select
      local.set $5
      local.get $3
      i32.const 2
      i32.div_s
      local.set $3
      br $for-loop|22
     end
    end
    i32.const 752
    local.get $0
    local.get $1
    i32.const 168
    i32.and
    local.get $5
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $3
    local.get $3
    i32.const 64
    i32.or
    local.get $1
    i32.const 511
    i32.and
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|21
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|23
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 1
    i32.const 0
    local.get $0
    i32.const 1
    i32.and
    select
    local.set $4
    local.get $0
    i32.const 1
    i32.shr_s
    local.set $3
    i32.const 4
    local.set $1
    i32.const 128
    local.set $2
    loop $for-loop|24
     local.get $2
     if
      local.get $1
      i32.const 4
      i32.xor
      local.get $1
      local.get $2
      local.get $3
      i32.and
      select
      local.set $1
      local.get $2
      i32.const 2
      i32.div_s
      local.set $2
      br $for-loop|24
     end
    end
    i32.const 800
    local.get $0
    local.get $3
    i32.const 168
    i32.and
    local.get $1
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $2
    local.get $2
    i32.const 64
    i32.or
    local.get $3
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|23
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|25
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 1
    i32.const 0
    local.get $0
    i32.const 1
    i32.and
    select
    local.set $4
    local.get $0
    i32.const 1
    i32.shr_s
    i32.const 128
    i32.add
    local.set $1
    i32.const 4
    local.set $5
    i32.const 128
    local.set $3
    loop $for-loop|26
     local.get $3
     if
      local.get $5
      i32.const 4
      i32.xor
      local.get $5
      local.get $1
      local.get $3
      i32.and
      select
      local.set $5
      local.get $3
      i32.const 2
      i32.div_s
      local.set $3
      br $for-loop|26
     end
    end
    i32.const 848
    local.get $0
    local.get $1
    i32.const 168
    i32.and
    local.get $5
    i32.or
    local.get $4
    i32.or
    i32.const 255
    i32.and
    local.tee $3
    local.get $3
    i32.const 64
    i32.or
    local.get $1
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|25
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|27
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 1
    i32.const 0
    local.get $0
    i32.const 1
    i32.and
    select
    local.set $3
    local.get $0
    i32.const 128
    i32.and
    local.get $0
    i32.const 1
    i32.shr_s
    i32.add
    local.set $4
    i32.const 4
    local.set $1
    i32.const 128
    local.set $2
    loop $for-loop|28
     local.get $2
     if
      local.get $1
      i32.const 4
      i32.xor
      local.get $1
      local.get $2
      local.get $4
      i32.and
      select
      local.set $1
      local.get $2
      i32.const 2
      i32.div_s
      local.set $2
      br $for-loop|28
     end
    end
    i32.const 896
    local.get $0
    local.get $4
    i32.const 168
    i32.and
    local.get $1
    i32.or
    local.get $3
    i32.or
    i32.const 255
    i32.and
    local.tee $2
    local.get $2
    i32.const 64
    i32.or
    local.get $4
    i32.const 255
    i32.and
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|27
   end
  end
  i32.const 0
  local.set $0
  loop $for-loop|29
   local.get $0
   i32.const 256
   i32.lt_s
   if
    i32.const 944
    local.get $0
    local.get $0
    i32.const 1
    i32.shl
    local.get $0
    i32.const 7
    i32.shr_s
    i32.add
    call $~lib/array/Array<u8>#__set
    i32.const 992
    local.get $0
    local.get $0
    i32.const 7
    i32.shl
    local.get $0
    i32.const 1
    i32.shr_s
    i32.add
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|29
   end
  end
 )
 (func $~lib/arraybuffer/ArrayBufferView#constructor (; 296 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  local.get $1
  i32.const 1073741808
  local.get $2
  i32.shr_u
  i32.gt_u
  if
   i32.const 304
   i32.const 6640
   i32.const 23
   i32.const 56
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $2
  i32.shl
  local.tee $3
  i32.const 0
  call $~lib/rt/tlsf/__alloc
  local.tee $2
  local.get $3
  call $~lib/memory/memory.fill
  local.get $0
  i32.eqz
  if
   i32.const 12
   i32.const 2
   call $~lib/rt/tlsf/__alloc
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    local.get $1
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $2
  local.tee $1
  local.get $0
  i32.load
  local.tee $4
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $5
    local.get $5
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $4
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $1
  i32.store
  local.get $0
  local.get $2
  i32.store offset=4
  local.get $0
  local.get $3
  i32.store offset=8
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#constructor (; 297 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 12
  i32.const 11
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
 )
 (func $~lib/typedarray/Uint32Array#constructor (; 298 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 12
  i32.const 7
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
 )
 (func $src/assembly/MemoryStatusArray/MemoryStatusArray#clearAll (; 299 ;) (param $0 i32)
  (local $1 i32)
  loop $for-loop|0
   local.get $1
   i32.const 2048
   i32.lt_s
   if
    local.get $0
    i32.load
    local.get $1
    i32.const 0
    call $~lib/typedarray/Uint32Array#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
 )
 (func $src/assembly/MemoryStatusArray/MemoryStatusArray#constructor (; 300 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 4
  i32.const 6
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 2048
  call $~lib/typedarray/Uint32Array#constructor
  i32.store
  local.get $0
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#clearAll
  local.get $0
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#turnOn (; 301 ;) (param $0 i32)
  local.get $0
  i32.const 65535
  i32.store16
  local.get $0
  i32.const 65535
  i32.store16 offset=2
  local.get $0
  i32.const 65535
  i32.store16 offset=4
  local.get $0
  i32.const 65535
  i32.store16 offset=6
  local.get $0
  i32.const 65535
  i32.store16 offset=8
  local.get $0
  i32.const 65535
  i32.store16 offset=10
  local.get $0
  i32.const 65535
  i32.store16 offset=12
  local.get $0
  i32.const 65535
  i32.store16 offset=14
  local.get $0
  i32.const 255
  i32.store8 offset=16
  local.get $0
  i32.const 255
  i32.store8 offset=17
  local.get $0
  i32.const 65535
  i32.store16 offset=96
  local.get $0
  i32.const 65535
  i32.store16 offset=98
  local.get $0
  i32.const 65535
  i32.store16 offset=18
  local.get $0
  i32.const 65535
  i32.store16 offset=20
  local.get $0
  i32.const 65535
  i32.store16 offset=22
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store8 offset=40
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
  local.get $0
  i32.const 0
  i32.store8 offset=43
  local.get $0
  i32.const 0
  i32.store8 offset=44
  local.get $0
  i32.const 0
  i32.store8 offset=45
  local.get $0
  i32.load offset=48
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#clearAll
  local.get $0
  i32.load offset=52
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#clearAll
  local.get $0
  i32.load offset=56
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#clearAll
  local.get $0
  i32.const 0
  i32.store offset=60
  local.get $0
  i32.const 0
  i32.store offset=64
  local.get $0
  i32.const 0
  i32.store8 offset=68
  local.get $0
  i32.const 255
  i32.store8 offset=69
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|0 (; 302 ;) (param $0 i32) (param $1 i32) (result i32)
  i32.const 255
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|1 (; 303 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  nop
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|2 (; 304 ;) (param $0 i32) (result i32)
  i32.const 255
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|3 (; 305 ;) (param $0 i32) (param $1 i32)
  nop
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor~anonymous|4 (; 306 ;) (param $0 i32)
  nop
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor (; 307 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  local.get $0
  i32.eqz
  if
   i32.const 100
   i32.const 5
   call $~lib/rt/tlsf/__alloc
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
  end
  local.get $0
  i32.const 0
  i32.store16
  local.get $0
  i32.const 0
  i32.store16 offset=2
  local.get $0
  i32.const 0
  i32.store16 offset=4
  local.get $0
  i32.const 0
  i32.store16 offset=6
  local.get $0
  i32.const 0
  i32.store16 offset=8
  local.get $0
  i32.const 0
  i32.store16 offset=10
  local.get $0
  i32.const 0
  i32.store16 offset=12
  local.get $0
  i32.const 0
  i32.store16 offset=14
  local.get $0
  i32.const 0
  i32.store8 offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=17
  local.get $0
  i32.const 0
  i32.store16 offset=18
  local.get $0
  i32.const 0
  i32.store16 offset=20
  local.get $0
  i32.const 0
  i32.store16 offset=22
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store8 offset=40
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
  local.get $0
  i32.const 0
  i32.store8 offset=43
  local.get $0
  i32.const 0
  i32.store8 offset=44
  local.get $0
  i32.const 0
  i32.store8 offset=45
  local.get $0
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#constructor
  i32.store offset=48
  local.get $0
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#constructor
  i32.store offset=52
  local.get $0
  call $src/assembly/MemoryStatusArray/MemoryStatusArray#constructor
  i32.store offset=56
  local.get $0
  i32.const 0
  i32.store offset=60
  local.get $0
  i32.const 0
  i32.store offset=64
  local.get $0
  i32.const 0
  i32.store8 offset=68
  local.get $0
  i32.const 0
  i32.store8 offset=69
  local.get $0
  local.get $1
  i32.store8 offset=70
  local.get $0
  i32.const 0
  i32.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=76
  local.get $0
  i32.const 0
  i32.store offset=80
  local.get $0
  i32.const 0
  i32.store offset=84
  local.get $0
  i32.const 0
  i32.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=92
  local.get $0
  i32.const 0
  i32.store16 offset=96
  local.get $0
  i32.const 0
  i32.store16 offset=98
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#turnOn
  local.get $0
  i32.const 226
  i32.store offset=72
  local.get $0
  i32.const 227
  i32.store offset=76
  local.get $0
  i32.const 228
  i32.store offset=80
  local.get $0
  i32.const 229
  i32.store offset=84
  local.get $0
  i32.const 230
  i32.store offset=88
  local.get $0
  i32.const 231
  i32.store offset=92
  local.get $0
  i32.const 100000
  i32.store offset=24
  local.get $0
 )
 (func $~lib/typedarray/Uint8Array#__set (; 308 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 192
   i32.const 1104
   i32.const 163
   i32.const 44
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i32.load offset=4
  i32.add
  local.get $2
  i32.store8
 )
 (func $~lib/rt/__allocArray (; 309 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 16
  local.get $0
  call $~lib/rt/tlsf/__alloc
  local.tee $2
  i32.const 0
  i32.const 0
  call $~lib/rt/tlsf/__alloc
  local.set $0
  local.get $1
  if
   local.get $0
   local.get $1
   i32.const 0
   call $~lib/memory/memory.copy
  end
  local.get $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.store
  local.get $2
  local.get $0
  i32.store offset=4
  local.get $2
  i32.const 0
  i32.store offset=8
  local.get $2
  i32.const 0
  i32.store offset=12
  local.get $2
 )
 (func $src/assembly/test-machine/test-devices/clearMemoryAccessLog (; 310 ;)
  (local $0 i32)
  (local $1 i32)
  i32.const 13
  i32.const 6848
  call $~lib/rt/__allocArray
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  global.get $src/assembly/test-machine/test-devices/memoryAccessLog
  call $~lib/rt/pure/__release
  local.get $0
  global.set $src/assembly/test-machine/test-devices/memoryAccessLog
 )
 (func $src/assembly/test-machine/test-devices/resetMemory (; 311 ;)
  (local $0 i32)
  loop $for-loop|0
   local.get $0
   i32.const 65536
   i32.lt_s
   if
    global.get $src/assembly/test-machine/test-devices/simpleMemory
    local.get $0
    i32.const 255
    call $~lib/typedarray/Uint8Array#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  call $src/assembly/test-machine/test-devices/clearMemoryAccessLog
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#reset (; 312 ;) (param $0 i32)
  local.get $0
  i32.const 0
  i32.store16 offset=4
  local.get $0
  i32.const 4
  i32.store offset=8
  local.get $0
  i32.load
  call $src/assembly/Z80Cpu/Z80Cpu#turnOn
  call $src/assembly/test-machine/test-devices/resetMemory
 )
 (func $~lib/typedarray/Uint8Array#__get (; 313 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.ge_u
  if
   i32.const 192
   i32.const 1104
   i32.const 152
   i32.const 44
   call $~lib/builtins/abort
   unreachable
  end
  local.get $1
  local.get $0
  i32.load offset=4
  i32.add
  i32.load8_u
 )
 (func $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push (; 314 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $0
  i32.load offset=12
  local.tee $2
  i32.const 1
  i32.add
  local.tee $3
  i32.const 2
  call $~lib/array/ensureSize
  local.get $0
  i32.load offset=4
  local.get $2
  i32.const 2
  i32.shl
  i32.add
  local.get $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.store
  local.get $0
  local.get $3
  i32.store offset=12
 )
 (func $src/assembly/test-machine/test-devices/readSimpleMemory (; 315 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $src/assembly/test-machine/test-devices/simpleMemory
  local.get $0
  i32.const 65535
  i32.and
  call $~lib/typedarray/Uint8Array#__get
  local.set $2
  global.get $src/assembly/test-machine/test-devices/memoryAccessLog
  i32.const 4
  i32.const 12
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.store16
  local.get $1
  local.get $2
  i32.store8 offset=2
  local.get $1
  i32.const 0
  i32.store8 offset=3
  local.get $1
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $src/assembly/test-machine/test-devices/writeSimpleMemory (; 316 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $src/assembly/test-machine/test-devices/simpleMemory
  local.get $0
  i32.const 65535
  i32.and
  local.get $1
  i32.const 255
  i32.and
  call $~lib/typedarray/Uint8Array#__set
  global.get $src/assembly/test-machine/test-devices/memoryAccessLog
  i32.const 4
  i32.const 12
  call $~lib/rt/tlsf/__alloc
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $2
  local.get $0
  i32.store16
  local.get $2
  local.get $1
  i32.store8 offset=2
  local.get $2
  i32.const 1
  i32.store8 offset=3
  local.get $2
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setMemoryHandlers (; 317 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $1
  i32.store offset=72
  local.get $0
  local.get $2
  i32.store offset=76
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#delay (; 318 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/test-machine/test-devices/readSimpleIo (; 319 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $src/assembly/test-machine/test-devices/inputIndex
  i32.const 0
  i32.lt_s
  if (result i32)
   i32.const 1
  else
   global.get $src/assembly/test-machine/test-devices/inputIndex
   global.get $src/assembly/test-machine/test-devices/fakeInput
   i32.load offset=8
   i32.ge_s
  end
  if (result i32)
   i32.const 255
  else
   global.get $src/assembly/test-machine/test-devices/inputIndex
   local.tee $2
   i32.const 1
   i32.add
   global.set $src/assembly/test-machine/test-devices/inputIndex
   global.get $src/assembly/test-machine/test-devices/fakeInput
   local.get $2
   call $~lib/typedarray/Uint8Array#__get
  end
  local.set $2
  global.get $src/assembly/test-machine/test-devices/cpu
  i32.const 4
  call $src/assembly/Z80Cpu/Z80Cpu#delay
  global.get $src/assembly/test-machine/test-devices/ioAccessLog
  i32.const 4
  i32.const 14
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.store16
  local.get $1
  local.get $2
  i32.store8 offset=2
  local.get $1
  i32.const 0
  i32.store8 offset=3
  local.get $1
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $src/assembly/test-machine/test-devices/writeSimpleIo (; 320 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $src/assembly/test-machine/test-devices/ioAccessLog
  i32.const 4
  i32.const 14
  call $~lib/rt/tlsf/__alloc
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $2
  local.get $0
  i32.store16
  local.get $2
  local.get $1
  i32.store8 offset=2
  local.get $2
  i32.const 1
  i32.store8 offset=3
  local.get $2
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  global.get $src/assembly/test-machine/test-devices/cpu
  i32.const 4
  call $src/assembly/Z80Cpu/Z80Cpu#delay
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setPortHandlers (; 321 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $0
  local.get $1
  i32.store offset=80
  local.get $0
  local.get $2
  i32.store offset=84
 )
 (func $src/assembly/test-machine/test-devices/simpleWriteTbBlueIndex (; 322 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
  i32.const 2
  i32.const 16
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.const 1
  i32.store8
  local.get $1
  local.get $0
  i32.store8 offset=1
  local.get $1
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/test-machine/test-devices/simpleWriteTbBlueValue (; 323 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
  i32.const 2
  i32.const 16
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.const 0
  i32.store8
  local.get $1
  local.get $0
  i32.store8 offset=1
  local.get $1
  call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#push
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#constructor (; 324 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 12
  i32.const 18
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store16 offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  i32.const 0
  i32.const 0
  call $src/assembly/Z80Cpu/Z80Cpu#constructor
  local.set $1
  local.get $0
  i32.load
  call $~lib/rt/pure/__release
  local.get $0
  local.get $1
  i32.store
  local.get $0
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#reset
  local.get $0
  i32.load
  local.tee $1
  i32.const 232
  i32.store offset=72
  local.get $1
  i32.const 233
  i32.store offset=76
  local.get $0
  i32.load
  local.tee $1
  i32.const 234
  i32.store offset=80
  local.get $1
  i32.const 235
  i32.store offset=84
  local.get $0
  i32.load
  i32.const 236
  i32.store offset=88
  local.get $0
  i32.load
  i32.const 237
  i32.store offset=92
  local.get $0
  i32.load
  local.tee $1
  global.get $src/assembly/test-machine/test-devices/cpu
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    local.get $3
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $1
  global.set $src/assembly/test-machine/test-devices/cpu
  local.get $0
 )
 (func $~lib/array/Array<u8>#constructor (; 325 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 16
  i32.const 3
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.const 0
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $1
  i32.const 0
  i32.store offset=12
  local.get $1
  local.get $0
  i32.store offset=12
  local.get $1
 )
 (func $~lib/staticarray/StaticArray.fromArray<u8> (; 326 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=12
  local.tee $2
  i32.const 37
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  local.get $0
  i32.load offset=4
  local.get $2
  call $~lib/memory/memory.copy
  local.get $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $0
   local.get $0
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
 )
 (func $src/assembly/index/initTestMachine (; 327 ;)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#reset
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#constructor (; 328 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.eqz
  if
   i32.const 58
   i32.const 20
   call $~lib/rt/tlsf/__alloc
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    local.get $1
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
  end
  local.get $0
  i32.const 0
  i32.store16
  local.get $0
  i32.const 0
  i32.store16 offset=2
  local.get $0
  i32.const 0
  i32.store16 offset=4
  local.get $0
  i32.const 0
  i32.store16 offset=6
  local.get $0
  i32.const 0
  i32.store16 offset=8
  local.get $0
  i32.const 0
  i32.store16 offset=10
  local.get $0
  i32.const 0
  i32.store16 offset=12
  local.get $0
  i32.const 0
  i32.store16 offset=14
  local.get $0
  i32.const 0
  i32.store8 offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=17
  local.get $0
  i32.const 0
  i32.store16 offset=18
  local.get $0
  i32.const 0
  i32.store16 offset=20
  local.get $0
  i32.const 0
  i32.store16 offset=22
  local.get $0
  i32.const 0
  i32.store16 offset=24
  local.get $0
  i32.const 0
  i32.store16 offset=26
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store8 offset=40
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
  local.get $0
  i32.const 0
  i32.store8 offset=43
  local.get $0
  i32.const 0
  i32.store8 offset=44
  local.get $0
  i32.const 0
  i32.store8 offset=45
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i32.const 0
  i32.store8 offset=56
  local.get $0
  i32.const 0
  i32.store8 offset=57
  local.get $0
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:xl (; 329 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=22
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:yh (; 330 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=24
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=24
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:yl (; 331 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=24
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=24
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:iy (; 332 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=24
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wh (; 333 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=26
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=26
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wl (; 334 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=26
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=26
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:wz (; 335 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=26
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#getCpuState (; 336 ;) (param $0 i32) (result i32)
  (local $1 i32)
  i32.const 0
  call $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#constructor
  local.tee $1
  local.get $1
  i32.load16_u
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $1
  local.get $1
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $1
  local.get $0
  i32.load16_u
  i32.store16
  local.get $1
  local.get $0
  i32.load16_u offset=8
  i32.store16 offset=8
  local.get $1
  local.get $1
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $1
  local.get $1
  i32.load16_u offset=2
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=2
  local.get $1
  local.get $0
  i32.load16_u offset=2
  i32.store16 offset=2
  local.get $1
  local.get $0
  i32.load16_u offset=10
  i32.store16 offset=10
  local.get $1
  local.get $1
  i32.load16_u offset=4
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=4
  local.get $1
  local.get $1
  i32.load16_u offset=4
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=4
  local.get $1
  local.get $0
  i32.load16_u offset=4
  i32.store16 offset=4
  local.get $1
  local.get $0
  i32.load16_u offset=12
  i32.store16 offset=12
  local.get $1
  local.get $1
  i32.load16_u offset=6
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=6
  local.get $1
  local.get $1
  i32.load16_u offset=6
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=6
  local.get $1
  local.get $0
  i32.load16_u offset=6
  i32.store16 offset=6
  local.get $1
  local.get $0
  i32.load16_u offset=14
  i32.store16 offset=14
  local.get $1
  local.get $0
  i32.load8_u offset=16
  i32.store8 offset=16
  local.get $1
  local.get $0
  i32.load8_u offset=41
  i32.store8 offset=41
  local.get $1
  local.get $0
  i32.load8_u offset=42
  i32.store8 offset=42
  local.get $1
  local.get $0
  i32.load offset=64
  i32.store offset=52
  local.get $1
  local.get $0
  i32.load8_u offset=43
  i32.store8 offset=43
  local.get $1
  local.get $0
  i32.load8_u offset=45
  i32.store8 offset=45
  local.get $1
  local.get $0
  i32.load8_u offset=44
  i32.store8 offset=44
  local.get $1
  local.get $1
  i32.load16_u offset=22
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=18
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=22
  local.get $1
  local.get $1
  i32.load16_u offset=22
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=18
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=22
  local.get $1
  local.get $0
  i32.load16_u offset=18
  i32.store16 offset=22
  local.get $1
  local.get $1
  i32.load16_u offset=24
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=20
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=24
  local.get $1
  local.get $1
  i32.load16_u offset=24
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=20
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=24
  local.get $1
  local.get $0
  i32.load16_u offset=20
  i32.store16 offset=24
  local.get $1
  local.get $0
  i32.load8_u offset=68
  i32.store8 offset=56
  local.get $1
  local.get $0
  i32.load8_u offset=69
  i32.store8 offset=57
  local.get $1
  local.get $0
  i32.load16_u offset=96
  i32.store16 offset=18
  local.get $1
  local.get $0
  i32.load offset=60
  i32.store offset=48
  local.get $1
  local.get $0
  i32.load8_u offset=17
  i32.store8 offset=17
  local.get $1
  local.get $0
  i32.load16_u offset=98
  i32.store16 offset=20
  local.get $1
  local.get $0
  i32.load offset=36
  i32.store offset=36
  local.get $1
  local.get $0
  i32.load offset=28
  i32.store offset=32
  local.get $1
  local.get $0
  i32.load offset=32
  i32.store offset=28
  local.get $1
  local.get $0
  i32.load8_u offset=40
  i32.store8 offset=40
  local.get $1
  local.get $1
  i32.load16_u offset=26
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=22
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=26
  local.get $1
  local.get $1
  i32.load16_u offset=26
  i32.const 65280
  i32.and
  local.get $0
  i32.load16_u offset=22
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=26
  local.get $1
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=26
  local.get $1
 )
 (func $src/assembly/index/getTestMachineState (; 337 ;) (result i32)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  i32.load
  call $src/assembly/Z80Cpu/Z80Cpu#getCpuState
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:a (; 338 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:af (; 339 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:f (; 340 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:b (; 341 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:c (; 342 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:bc (; 343 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=2
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:e (; 344 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:de (; 345 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=4
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:h (; 346 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:l (; 347 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:hl (; 348 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=6
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:i (; 349 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=16
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xh (; 350 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=22
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:xh (; 351 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=18
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=18
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:xl (; 352 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=22
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:xl (; 353 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=18
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=18
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:ix (; 354 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=22
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:yh (; 355 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=24
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:yh (; 356 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=20
  i32.const 255
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=20
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:yl (; 357 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=24
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:yl (; 358 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u offset=20
  i32.const 65280
  i32.and
  local.get $1
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=20
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:iy (; 359 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=24
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:pc (; 360 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=18
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:r (; 361 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=17
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:sp (; 362 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=20
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wh (; 363 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=26
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wl (; 364 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=26
  i32.const 255
  i32.and
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:wz (; 365 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=26
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#updateCpuState (; 366 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16
  local.get $0
  local.get $0
  i32.load16_u
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u
  i32.const 255
  i32.and
  i32.or
  i32.store16
  local.get $0
  local.get $1
  i32.load16_u
  i32.store16
  local.get $0
  local.get $1
  i32.load16_u offset=8
  i32.store16 offset=8
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u offset=2
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $0
  i32.load16_u offset=2
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=2
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=2
  local.get $0
  local.get $1
  i32.load16_u offset=2
  i32.store16 offset=2
  local.get $0
  local.get $1
  i32.load16_u offset=10
  i32.store16 offset=10
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 255
  i32.and
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=4
  local.get $0
  local.get $0
  i32.load16_u offset=4
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=4
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=4
  local.get $0
  local.get $1
  i32.load16_u offset=4
  i32.store16 offset=4
  local.get $0
  local.get $1
  i32.load16_u offset=12
  i32.store16 offset=12
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u offset=6
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=6
  local.get $0
  local.get $0
  i32.load16_u offset=6
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=6
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=6
  local.get $0
  local.get $1
  i32.load16_u offset=6
  i32.store16 offset=6
  local.get $0
  local.get $1
  i32.load16_u offset=14
  i32.store16 offset=14
  local.get $0
  local.get $1
  i32.load8_u offset=16
  i32.store8 offset=16
  local.get $0
  local.get $1
  i32.load8_u offset=41
  i32.store8 offset=41
  local.get $0
  local.get $1
  i32.load8_u offset=42
  i32.store8 offset=42
  local.get $0
  local.get $1
  i32.load offset=52
  i32.store offset=64
  local.get $0
  local.get $1
  i32.load8_u offset=43
  i32.store8 offset=43
  local.get $0
  local.get $1
  i32.load8_u offset=44
  i32.store8 offset=45
  local.get $0
  local.get $1
  i32.load8_u offset=44
  i32.store8 offset=44
  local.get $0
  local.get $0
  i32.load16_u offset=18
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u offset=22
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=18
  local.get $0
  local.get $0
  i32.load16_u offset=18
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=22
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=18
  local.get $0
  local.get $1
  i32.load16_u offset=22
  i32.store16 offset=18
  local.get $0
  local.get $0
  i32.load16_u offset=20
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u offset=24
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=20
  local.get $0
  local.get $0
  i32.load16_u offset=20
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=24
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=20
  local.get $0
  local.get $1
  i32.load16_u offset=24
  i32.store16 offset=20
  local.get $0
  local.get $1
  i32.load8_u offset=56
  i32.store8 offset=68
  local.get $0
  local.get $1
  i32.load8_u offset=57
  i32.store8 offset=69
  local.get $0
  local.get $1
  i32.load16_u offset=18
  i32.store16 offset=96
  local.get $0
  local.get $1
  i32.load offset=48
  i32.store offset=60
  local.get $0
  local.get $1
  i32.load8_u offset=17
  i32.store8 offset=17
  local.get $0
  local.get $1
  i32.load16_u offset=20
  i32.store16 offset=98
  local.get $0
  local.get $1
  i32.load offset=36
  i32.store offset=36
  local.get $0
  local.get $1
  i32.load offset=32
  i32.store offset=28
  local.get $0
  local.get $1
  i32.load offset=28
  i32.store offset=32
  local.get $0
  local.get $1
  i32.load8_u offset=40
  i32.store8 offset=40
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 255
  i32.and
  local.get $1
  i32.load16_u offset=26
  i32.const 8
  i32.shr_u
  i32.const 8
  i32.shl
  i32.or
  i32.store16 offset=22
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.const 65280
  i32.and
  local.get $1
  i32.load16_u offset=26
  i32.const 255
  i32.and
  i32.or
  i32.store16 offset=22
  local.get $0
  local.get $1
  i32.load16_u offset=26
  i32.store16 offset=22
 )
 (func $src/assembly/index/updateTestMachineState (; 367 ;) (param $0 i32)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  i32.load
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#updateCpuState
 )
 (func $src/assembly/index/getTestMachineMemory (; 368 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/test-machine/test-devices/simpleMemory
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#set:memory (; 369 ;) (param $0 i32)
  (local $1 i32)
  loop $for-loop|0
   local.get $1
   global.get $src/assembly/test-machine/test-devices/simpleMemory
   i32.load offset=8
   i32.lt_s
   if
    global.get $src/assembly/test-machine/test-devices/simpleMemory
    local.get $1
    local.get $0
    local.get $1
    call $~lib/typedarray/Uint8Array#__get
    call $~lib/typedarray/Uint8Array#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
 )
 (func $src/assembly/index/updateTestMachineMemory (; 370 ;) (param $0 i32)
  local.get $0
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#set:memory
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#executeReset (; 371 ;) (param $0 i32)
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
  local.get $0
  i32.const 0
  i32.store8 offset=43
  local.get $0
  i32.const 0
  i32.store8 offset=44
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store offset=60
  local.get $0
  i32.const 0
  i32.store offset=64
  local.get $0
  i32.const 0
  i32.store16 offset=96
  local.get $0
  i32.const 0
  i32.store8 offset=16
  local.get $0
  i32.const 0
  i32.store8 offset=17
  local.get $0
  i32.const 0
  i32.store8 offset=45
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#reset (; 372 ;) (param $0 i32)
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#executeReset
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#initCode (; 373 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $1
  local.set $3
  i32.const 0
  local.set $1
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.load offset=8
   i32.lt_s
   if
    local.get $2
    local.tee $4
    i32.const 1
    i32.add
    local.set $2
    local.get $4
    local.get $3
    local.get $1
    call $~lib/typedarray/Uint8Array#__get
    i32.const 0
    call $src/assembly/test-machine/test-devices/writeSimpleMemory
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $0
  local.get $2
  i32.store16 offset=4
  local.get $2
  i32.const 65535
  i32.and
  local.set $1
  loop $while-continue|1
   local.get $1
   i32.const 65536
   i32.lt_s
   if
    local.get $1
    local.tee $2
    i32.const 1
    i32.add
    local.set $1
    local.get $2
    i32.const 0
    i32.const 0
    call $src/assembly/test-machine/test-devices/writeSimpleMemory
    br $while-continue|1
   end
  end
  local.get $0
  i32.load
  call $src/assembly/Z80Cpu/Z80Cpu#executeReset
  local.get $0
  i32.load
  i32.const 0
  i32.store16 offset=96
 )
 (func $src/assembly/index/initTestMachineCode (; 374 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  local.tee $2
  local.get $0
  i32.store offset=8
  local.get $2
  local.get $1
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#initCode
 )
 (func $src/assembly/test-machine/test-devices/setTestInput (; 375 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=8
  i32.const 0
  i32.gt_s
  if
   local.get $0
   global.get $src/assembly/test-machine/test-devices/fakeInput
   local.tee $1
   i32.ne
   if
    local.get $0
    i32.const 24700
    i32.gt_u
    if
     local.get $0
     i32.const 16
     i32.sub
     local.tee $2
     local.get $2
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    call $~lib/rt/pure/__release
   end
   local.get $0
   global.set $src/assembly/test-machine/test-devices/fakeInput
   i32.const 0
   global.set $src/assembly/test-machine/test-devices/inputIndex
  end
 )
 (func $src/assembly/index/initTestMachineInput (; 376 ;) (param $0 i32)
  local.get $0
  call $src/assembly/test-machine/test-devices/setTestInput
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#executeInterrupt (; 377 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=36
  i32.const 8
  i32.and
  if
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 1
   i32.add
   i32.store16 offset=96
   local.get $0
   local.get $0
   i32.load offset=36
   i32.const 247
   i32.and
   i32.store offset=36
  end
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  i32.const 0
  i32.store8 offset=42
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 255
  i32.and
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  block $break|0
   block $case2|0
    block $case1|0
     local.get $0
     i32.load8_u offset=43
     local.tee $1
     i32.eqz
     br_if $case1|0
     local.get $1
     i32.const 1
     i32.eq
     br_if $case1|0
     br $case2|0
    end
    local.get $0
    i32.const 56
    i32.store16 offset=22
    local.get $0
    i32.const 5
    call $src/assembly/Z80Cpu/Z80Cpu#incTact
    br $break|0
   end
   local.get $0
   i32.const 2
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   i32.load8_u offset=17
   local.get $0
   i32.load8_u offset=16
   i32.const 8
   i32.shl
   i32.or
   drop
   local.get $0
   i32.const 5
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   i32.const 255
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   i32.const 255
   i32.and
   local.set $1
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   i32.const 2
   global.set $~argumentsLength
   i32.const 256
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   i32.const 255
   i32.and
   local.set $2
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   local.get $1
   local.get $2
   i32.const 8
   i32.shl
   i32.or
   i32.const 255
   i32.and
   i32.store16 offset=22
   local.get $0
   i32.const 6
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
  end
  local.get $0
  local.get $0
  i32.load16_u offset=22
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#refreshMemory (; 378 ;) (param $0 i32)
  local.get $0
  local.get $0
  i32.load8_u offset=17
  i32.const 1
  i32.add
  i32.const 127
  i32.and
  local.get $0
  i32.load8_u offset=17
  i32.const 128
  i32.and
  i32.or
  i32.store8 offset=17
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#executeNmi (; 379 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=36
  i32.const 8
  i32.and
  if
   local.get $0
   local.get $0
   i32.load16_u offset=96
   i32.const 1
   i32.add
   i32.store16 offset=96
   local.get $0
   local.get $0
   i32.load offset=36
   i32.const 247
   i32.and
   i32.store offset=36
  end
  local.get $0
  local.get $0
  i32.load8_u offset=41
  i32.store8 offset=42
  local.get $0
  i32.const 0
  i32.store8 offset=41
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 8
  i32.shr_u
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=98
  i32.const 1
  i32.sub
  i32.store16 offset=98
  local.get $0
  i32.load16_u offset=98
  local.get $0
  i32.load16_u offset=96
  i32.const 255
  i32.and
  i32.const 3
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=76
  call_indirect (type $i32_i32_i32_=>_none)
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  i32.const 102
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#processCpuSignals (; 380 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=36
  i32.const 1
  i32.and
  if (result i32)
   local.get $0
   i32.load8_u offset=44
   i32.eqz
  else
   i32.const 0
  end
  if (result i32)
   local.get $0
   i32.load8_u offset=41
  else
   i32.const 0
  end
  if
   local.get $0
   call $src/assembly/Z80Cpu/Z80Cpu#executeInterrupt
   i32.const 1
   return
  end
  local.get $0
  i32.load offset=36
  i32.const 8
  i32.and
  if
   local.get $0
   i32.const 3
   call $src/assembly/Z80Cpu/Z80Cpu#incTact
   local.get $0
   call $src/assembly/Z80Cpu/Z80Cpu#refreshMemory
   i32.const 1
   return
  end
  local.get $0
  i32.load offset=36
  i32.const 4
  i32.and
  if
   local.get $0
   call $src/assembly/Z80Cpu/Z80Cpu#executeReset
   i32.const 1
   return
  end
  local.get $0
  i32.load offset=36
  i32.const 2
  i32.and
  if
   local.get $0
   call $src/assembly/Z80Cpu/Z80Cpu#executeNmi
   i32.const 1
   return
  end
  i32.const 0
 )
 (func "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get" (; 381 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 192
   i32.const 256
   i32.const 93
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#processStandardOrIndexedOperations (; 382 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=64
  if (result i32)
   i32.const 5536
   local.get $0
   i32.load8_u offset=69
   call "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get"
  else
   i32.const 2320
   local.get $0
   i32.load8_u offset=69
   call "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get"
  end
  local.tee $1
  if
   i32.const 1
   global.set $~argumentsLength
   local.get $0
   local.get $1
   call_indirect (type $i32_=>_none)
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#processCBPrefixedOperations (; 383 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=64
  i32.eqz
  if
   i32.const 4464
   local.get $0
   i32.load8_u offset=69
   call "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get"
   local.tee $1
   if
    i32.const 1
    global.set $~argumentsLength
    local.get $0
    local.get $1
    call_indirect (type $i32_=>_none)
   end
   return
  end
  local.get $0
  local.get $0
  i32.load offset=64
  i32.const 1
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=18
  else
   local.get $0
   i32.load16_u offset=20
  end
  local.get $0
  i32.load8_s offset=69
  i32.add
  i32.store16 offset=22
  local.get $0
  i32.load8_u offset=40
  i32.eqz
  if
   local.get $0
   i32.load16_u offset=96
   i32.const 1
   i32.sub
   i32.const 2
   global.set $~argumentsLength
   i32.const 0
   local.get $0
   i32.load offset=72
   call_indirect (type $i32_i32_=>_i32)
   drop
  end
  local.get $0
  i32.const 1
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  i32.store8 offset=69
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  i32.const 6608
  local.get $0
  i32.load8_u offset=69
  call "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get"
  local.tee $1
  if
   i32.const 2
   global.set $~argumentsLength
   local.get $0
   local.get $0
   i32.load16_u offset=22
   local.get $1
   call_indirect (type $i32_i32_=>_none)
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#processEDOperations (; 384 ;) (param $0 i32)
  (local $1 i32)
  i32.const 3392
  local.get $0
  i32.load8_u offset=69
  call "$~lib/array/Array<((cpu: src/assembly/Z80Cpu/Z80Cpu) => void) | null>#__get"
  local.tee $1
  if
   i32.const 1
   global.set $~argumentsLength
   local.get $0
   local.get $1
   call_indirect (type $i32_=>_none)
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#executeCpuCycle (; 385 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  i32.load offset=36
  if (result i32)
   local.get $0
   call $src/assembly/Z80Cpu/Z80Cpu#processCpuSignals
  else
   i32.const 0
  end
  if
   return
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#readCodeMemory
  local.set $1
  local.get $0
  i32.const 3
  call $src/assembly/Z80Cpu/Z80Cpu#incTact
  local.get $0
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.store16 offset=96
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#refreshMemory
  block $folding-inner0
   local.get $0
   i32.load offset=60
   i32.eqz
   if
    block $case4|0
     block $case3|0
      block $case2|0
       block $case1|0
        local.get $1
        i32.const 221
        i32.ne
        if
         local.get $1
         i32.const 253
         i32.eq
         br_if $case1|0
         local.get $1
         i32.const 203
         i32.eq
         br_if $case2|0
         local.get $1
         i32.const 237
         i32.eq
         br_if $case3|0
         br $case4|0
        end
        local.get $0
        i32.const 1
        i32.store offset=64
        br $folding-inner0
       end
       local.get $0
       i32.const 2
       i32.store offset=64
       br $folding-inner0
      end
      local.get $0
      i32.const 2
      i32.store offset=60
      br $folding-inner0
     end
     local.get $0
     i32.const 1
     i32.store offset=60
     br $folding-inner0
    end
    local.get $0
    i32.const 0
    i32.store8 offset=44
    local.get $0
    local.get $1
    i32.store8 offset=69
    local.get $0
    call $src/assembly/Z80Cpu/Z80Cpu#processStandardOrIndexedOperations
    local.get $0
    i32.const 0
    i32.store offset=60
    local.get $0
    i32.const 0
    i32.store offset=64
    local.get $0
    i32.const 0
    i32.store8 offset=45
    return
   end
   local.get $0
   i32.load offset=60
   i32.const 2
   i32.eq
   if
    local.get $0
    i32.const 0
    i32.store8 offset=44
    local.get $0
    local.get $1
    i32.store8 offset=69
    local.get $0
    call $src/assembly/Z80Cpu/Z80Cpu#processCBPrefixedOperations
    local.get $0
    i32.const 0
    i32.store offset=64
    local.get $0
    i32.const 0
    i32.store offset=60
    local.get $0
    i32.const 0
    i32.store8 offset=45
    return
   end
   local.get $0
   i32.load offset=60
   i32.const 1
   i32.eq
   if
    local.get $0
    i32.const 0
    i32.store8 offset=44
    local.get $0
    local.get $1
    i32.store8 offset=69
    local.get $0
    call $src/assembly/Z80Cpu/Z80Cpu#processEDOperations
    local.get $0
    i32.const 0
    i32.store offset=64
    local.get $0
    i32.const 0
    i32.store offset=60
    local.get $0
    i32.const 0
    i32.store8 offset=45
   end
   return
  end
  local.get $0
  i32.const 1
  i32.store8 offset=44
  local.get $0
  i32.const 1
  i32.store8 offset=45
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#run (; 386 ;) (param $0 i32)
  (local $1 i32)
  loop $while-continue|0
   local.get $1
   i32.eqz
   if
    local.get $0
    i32.load
    call $src/assembly/Z80Cpu/Z80Cpu#executeCpuCycle
    block $break|1 (result i32)
     block $case4|1
      block $case3|1
       block $case2|1
        block $case1|1
         local.get $0
         i32.load offset=8
         local.tee $1
         i32.eqz
         br_if $case1|1
         block $tablify|0
          local.get $1
          i32.const 1
          i32.sub
          br_table $case1|1 $case2|1 $case3|1 $tablify|0
         end
         br $case4|1
        end
        i32.const 1
        br $break|1
       end
       local.get $0
       i32.load
       i32.load8_u offset=45
       i32.eqz
       br $break|1
      end
      local.get $0
      i32.load
      i32.load offset=36
      i32.const 8
      i32.and
      i32.const 0
      i32.ne
      br $break|1
     end
     local.get $0
     i32.load
     i32.load16_u offset=96
     local.get $0
     i32.load16_u offset=4
     i32.ge_u
    end
    local.set $1
    br $while-continue|0
   end
  end
 )
 (func $src/assembly/index/runTestMachine (; 387 ;)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#run
 )
 (func $src/assembly/index/resetMemoryAccessLog (; 388 ;)
  call $src/assembly/test-machine/test-devices/clearMemoryAccessLog
 )
 (func $src/assembly/index/resetIoAccessLog (; 389 ;)
  (local $0 i32)
  (local $1 i32)
  i32.const 15
  i32.const 23504
  call $~lib/rt/__allocArray
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  global.get $src/assembly/test-machine/test-devices/ioAccessLog
  call $~lib/rt/pure/__release
  local.get $0
  global.set $src/assembly/test-machine/test-devices/ioAccessLog
 )
 (func $src/assembly/index/resetTbBlueAccessLog (; 390 ;)
  (local $0 i32)
  (local $1 i32)
  i32.const 17
  i32.const 23520
  call $~lib/rt/__allocArray
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
  call $~lib/rt/pure/__release
  local.get $0
  global.set $src/assembly/test-machine/test-devices/tbBlueAccessLog
 )
 (func $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get (; 391 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   i32.const 192
   i32.const 256
   i32.const 93
   i32.const 41
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.eqz
  if
   local.get $0
   call $~lib/rt/pure/__release
   i32.const 1168
   i32.const 256
   i32.const 97
   i32.const 39
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:ioAccessLog (; 392 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $src/assembly/test-machine/test-devices/ioAccessLog
  i32.load offset=12
  call $~lib/typedarray/Uint32Array#constructor
  local.set $2
  loop $for-loop|0
   local.get $0
   global.get $src/assembly/test-machine/test-devices/ioAccessLog
   i32.load offset=12
   i32.lt_s
   if
    local.get $2
    local.get $0
    global.get $src/assembly/test-machine/test-devices/ioAccessLog
    local.get $0
    call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
    local.tee $1
    i32.load16_u
    i32.const 16
    i32.shl
    local.get $1
    i32.load8_u offset=2
    i32.const 8
    i32.shl
    i32.or
    local.get $1
    i32.load8_u offset=3
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    i32.or
    call $~lib/typedarray/Uint32Array#__set
    local.get $1
    call $~lib/rt/pure/__release
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $2
 )
 (func $src/assembly/index/getTestMachineIoAccessLog (; 393 ;) (result i32)
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:ioAccessLog
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:memoryAccessLog (; 394 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $src/assembly/test-machine/test-devices/memoryAccessLog
  i32.load offset=12
  call $~lib/typedarray/Uint32Array#constructor
  local.set $2
  loop $for-loop|0
   local.get $0
   global.get $src/assembly/test-machine/test-devices/memoryAccessLog
   i32.load offset=12
   i32.lt_s
   if
    local.get $2
    local.get $0
    global.get $src/assembly/test-machine/test-devices/memoryAccessLog
    local.get $0
    call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
    local.tee $1
    i32.load16_u
    i32.const 16
    i32.shl
    local.get $1
    i32.load8_u offset=2
    i32.const 8
    i32.shl
    i32.or
    local.get $1
    i32.load8_u offset=3
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    i32.or
    call $~lib/typedarray/Uint32Array#__set
    local.get $1
    call $~lib/rt/pure/__release
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $2
 )
 (func $src/assembly/index/getTestMachineMemoryAccessLog (; 395 ;) (result i32)
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:memoryAccessLog
 )
 (func $~lib/typedarray/Uint16Array#__set (; 396 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.load offset=8
  i32.const 1
  i32.shr_u
  i32.ge_u
  if
   i32.const 192
   i32.const 1104
   i32.const 547
   i32.const 63
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 1
  i32.shl
  i32.add
  local.get $2
  i32.store16
 )
 (func $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:tbBlueAccessLog (; 397 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
  i32.load offset=12
  local.set $1
  i32.const 12
  i32.const 19
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  local.get $1
  i32.const 1
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.set $0
  loop $for-loop|0
   local.get $2
   global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
   i32.load offset=12
   i32.lt_s
   if
    local.get $0
    local.get $2
    global.get $src/assembly/test-machine/test-devices/tbBlueAccessLog
    local.get $2
    call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
    local.tee $1
    i32.load8_u offset=1
    i32.const 8
    i32.shl
    local.get $1
    i32.load8_u
    if (result i32)
     i32.const 1
    else
     i32.const 0
    end
    i32.or
    i32.const 65535
    i32.and
    call $~lib/typedarray/Uint16Array#__set
    local.get $1
    call $~lib/rt/pure/__release
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
  local.get $0
 )
 (func $src/assembly/index/getTestMachineTbBlueAccessLog (; 398 ;) (result i32)
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#get:tbBlueAccessLog
 )
 (func $src/assembly/index/enableExtendedInstructions (; 399 ;) (param $0 i32)
  global.get $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  i32.load
  local.get $0
  i32.store8 offset=70
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#constructor (; 400 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 332
  i32.const 22
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store8 offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store8 offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store8 offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=44
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  i32.const 0
  i32.store offset=56
  local.get $0
  i32.const 0
  i32.store offset=60
  local.get $0
  i32.const 0
  i32.store offset=64
  local.get $0
  i32.const 0
  i32.store offset=68
  local.get $0
  i32.const 0
  i32.store offset=72
  local.get $0
  i32.const 0
  i32.store offset=76
  local.get $0
  i32.const 0
  i32.store offset=80
  local.get $0
  i32.const 0
  i32.store offset=84
  local.get $0
  i32.const 0
  i32.store offset=88
  local.get $0
  i32.const 0
  i32.store offset=92
  local.get $0
  i32.const 0
  i32.store offset=96
  local.get $0
  i32.const 0
  i32.store offset=100
  local.get $0
  i32.const 0
  i32.store offset=104
  local.get $0
  i32.const 0
  i32.store offset=108
  local.get $0
  i32.const 0
  i32.store offset=112
  local.get $0
  i32.const 0
  i32.store offset=116
  local.get $0
  i32.const 0
  i32.store offset=120
  local.get $0
  i32.const 0
  i32.store offset=124
  local.get $0
  i32.const 0
  i32.store offset=128
  local.get $0
  i32.const 0
  i32.store offset=132
  local.get $0
  i32.const 0
  i32.store offset=136
  local.get $0
  i32.const 0
  i32.store offset=140
  local.get $0
  i32.const 0
  i32.store offset=144
  local.get $0
  i32.const 0
  i32.store offset=148
  local.get $0
  i32.const 0
  i32.store offset=152
  local.get $0
  i32.const 0
  i32.store offset=156
  local.get $0
  i32.const 0
  i32.store offset=160
  local.get $0
  i32.const 0
  i32.store offset=164
  local.get $0
  i32.const 0
  i32.store offset=168
  local.get $0
  i32.const 0
  i32.store offset=172
  local.get $0
  i32.const 0
  i32.store offset=176
  local.get $0
  i32.const 0
  i32.store offset=180
  local.get $0
  i32.const 0
  i32.store offset=184
  local.get $0
  i32.const 0
  i32.store offset=188
  local.get $0
  i32.const 0
  i32.store offset=192
  local.get $0
  i32.const 0
  i32.store offset=196
  local.get $0
  i32.const 0
  i32.store offset=200
  local.get $0
  i32.const 0
  i32.store offset=204
  local.get $0
  i32.const 0
  i32.store offset=208
  local.get $0
  i32.const 0
  i32.store offset=212
  local.get $0
  i32.const 0
  i32.store offset=216
  local.get $0
  i32.const 0
  i32.store offset=220
  local.get $0
  i32.const 0
  i32.store offset=224
  local.get $0
  i32.const 0
  i32.store offset=228
  local.get $0
  i32.const 0
  i32.store offset=232
  local.get $0
  i32.const 0
  i32.store offset=236
  local.get $0
  i32.const 0
  i32.store offset=240
  local.get $0
  i32.const 0
  i32.store offset=244
  local.get $0
  i32.const 0
  i32.store offset=248
  local.get $0
  i32.const 0
  i32.store offset=252
  local.get $0
  i32.const 0
  i32.store offset=256
  local.get $0
  i32.const 0
  i32.store offset=260
  local.get $0
  i32.const 0
  i32.store offset=264
  local.get $0
  i32.const 0
  i32.store offset=268
  local.get $0
  i32.const 0
  i32.store offset=272
  local.get $0
  i32.const 0
  i32.store offset=276
  local.get $0
  i32.const 0
  i32.store offset=280
  local.get $0
  i32.const 0
  i32.store offset=284
  local.get $0
  i32.const 0
  i32.store offset=288
  local.get $0
  i32.const 0
  i32.store offset=292
  local.get $0
  i32.const 0
  i32.store offset=296
  local.get $0
  i32.const 0
  i32.store offset=300
  local.get $0
  i32.const 0
  i32.store offset=304
  local.get $0
  i32.const 0
  i32.store offset=308
  local.get $0
  i32.const 0
  i32.store offset=312
  local.get $0
  i32.const 0
  i32.store offset=316
  local.get $0
  i32.const 0
  i32.store offset=320
  local.get $0
  i32.const 0
  i32.store offset=324
  local.get $0
  i32.const 0
  i32.store offset=328
  i32.const 0
  i32.const 0
  call $src/assembly/Z80Cpu/Z80Cpu#constructor
  local.set $1
  local.get $0
  i32.load
  call $~lib/rt/pure/__release
  local.get $0
  local.get $1
  i32.store
  local.get $0
  i32.const 3
  i32.store8 offset=4
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetCpuConfiguration (; 401 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 6
  i32.const 26
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 3500000
  i32.store
  local.get $0
  i32.const 1
  i32.store8 offset=4
  local.get $0
  i32.const 0
  i32.store8 offset=5
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetMemoryConfiguration (; 402 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 13
  i32.const 27
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 23376
  i32.store
  local.get $0
  i32.const 0
  i32.store8 offset=4
  local.get $0
  i32.const 0
  i32.store8 offset=5
  local.get $0
  i32.const 1
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store8 offset=12
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetScreenConfiguration (; 403 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 56
  i32.const 24
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 14
  i32.store
  local.get $0
  i32.const 8
  i32.store offset=4
  local.get $0
  i32.const 7
  i32.store offset=8
  local.get $0
  i32.const 48
  i32.store offset=12
  local.get $0
  i32.const 48
  i32.store offset=20
  local.get $0
  i32.const 8
  i32.store offset=24
  local.get $0
  i32.const 192
  i32.store offset=16
  local.get $0
  i32.const 24
  i32.store offset=32
  local.get $0
  i32.const 24
  i32.store offset=40
  local.get $0
  i32.const 128
  i32.store offset=36
  local.get $0
  i32.const 40
  i32.store offset=28
  local.get $0
  i32.const 12
  i32.store offset=44
  local.get $0
  i32.const 2
  i32.store offset=48
  local.get $0
  i32.const 1
  i32.store offset=52
  local.get $0
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#_extend (; 404 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.load offset=4
  i32.load offset=12
  local.get $1
  local.get $0
  i32.load
  i32.add
  i32.ge_u
  if
   return
  end
  local.get $1
  local.get $0
  i32.load
  i32.add
  i32.const 4096
  i32.add
  call $~lib/array/Array<u8>#constructor
  local.set $2
  i32.const 0
  local.set $1
  loop $for-loop|0
   local.get $1
   local.get $0
   i32.load offset=4
   i32.load offset=12
   i32.lt_s
   if
    local.get $2
    local.get $1
    local.get $0
    i32.load offset=4
    local.get $1
    call $~lib/array/Array<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $2
  local.tee $1
  local.get $0
  i32.load offset=4
  local.tee $3
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $4
    local.get $4
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $3
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $1
  i32.store offset=4
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte (; 405 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  call $src/assembly/utils/BinaryWriter/BinaryWriter#_extend
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $0
  i32.const 1
  i32.add
  i32.store
  local.get $0
  local.get $1
  call $~lib/array/Array<u8>#__set
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32 (; 406 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 4
  call $src/assembly/utils/BinaryWriter/BinaryWriter#_extend
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $3
  i32.const 1
  i32.add
  i32.store
  local.get $3
  local.get $1
  call $~lib/array/Array<u8>#__set
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $3
  i32.const 1
  i32.add
  i32.store
  local.get $3
  local.get $1
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__set
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $3
  i32.const 1
  i32.add
  i32.store
  local.get $3
  local.get $1
  i32.const 16
  i32.shr_u
  call $~lib/array/Array<u8>#__set
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $0
  i32.const 1
  i32.add
  i32.store
  local.get $0
  local.get $1
  i32.const 24
  i32.shr_u
  call $~lib/array/Array<u8>#__set
 )
 (func $~lib/staticarray/StaticArray<u8>#__get (; 407 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.ge_u
  if
   i32.const 192
   i32.const 23536
   i32.const 95
   i32.const 40
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  i32.add
  i32.load8_u
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#writeBytes (; 408 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.const 4
  i32.add
  call $src/assembly/utils/BinaryWriter/BinaryWriter#_extend
  local.get $0
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  loop $for-loop|0
   local.get $2
   local.get $1
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.lt_s
   if
    local.get $0
    i32.load offset=4
    local.get $0
    local.get $0
    i32.load
    local.tee $4
    i32.const 1
    i32.add
    i32.store
    local.get $4
    local.get $1
    local.get $2
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $2
    i32.const 1
    i32.add
    local.set $2
    br $for-loop|0
   end
  end
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16 (; 409 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $0
  i32.const 2
  call $src/assembly/utils/BinaryWriter/BinaryWriter#_extend
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $3
  i32.const 1
  i32.add
  i32.store
  local.get $3
  local.get $1
  call $~lib/array/Array<u8>#__set
  local.get $0
  i32.load offset=4
  local.get $0
  local.get $0
  i32.load
  local.tee $0
  i32.const 1
  i32.add
  i32.store
  local.get $0
  local.get $1
  i32.const 65535
  i32.and
  i32.const 8
  i32.shr_u
  call $~lib/array/Array<u8>#__set
 )
 (func $src/assembly/spectrum/machine/spectrum-48/serializeScreenState (; 410 ;) (param $0 i32)
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  i32.const 1
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
  select
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeBytes
 )
 (func $src/assembly/spectrum/machine/spectrum-48/serializePortState (; 411 ;) (param $0 i32)
  local.get $0
  i32.const 1
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue
  select
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  i32.const 1
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
  select
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48SerializeMachineState (; 412 ;) (param $0 i32)
  local.get $0
  i32.const 1
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/interruptRaised
  select
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  i32.const 1
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
  select
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeBytes
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/serializeScreenState
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/serializePortState
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/memory
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeBytes
 )
 (func $src/assembly/utils/BinaryReader/BinaryReader#readByte (; 413 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load
  i32.load offset=12
  i32.ge_s
  if
   i32.const 23600
   i32.const 23664
   i32.const 105
   i32.const 6
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  i32.load
  local.get $0
  local.get $0
  i32.load offset=4
  local.tee $0
  i32.const 1
  i32.add
  i32.store offset=4
  local.get $0
  call $~lib/array/Array<u8>#__get
 )
 (func $src/assembly/utils/BinaryReader/BinaryReader#readUint32 (; 414 ;) (param $0 i32) (result i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 8
  i32.shl
  i32.add
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 16
  i32.shl
  i32.add
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 24
  i32.shl
  i32.add
 )
 (func $~lib/staticarray/StaticArray<u8>#__set (; 415 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  local.get $1
  local.get $0
  i32.const 16
  i32.sub
  i32.load offset=12
  i32.ge_u
  if
   i32.const 192
   i32.const 23536
   i32.const 110
   i32.const 40
   call $~lib/builtins/abort
   unreachable
  end
  local.get $0
  local.get $1
  i32.add
  local.get $2
  i32.store8
 )
 (func $src/assembly/utils/BinaryReader/BinaryReader#readBytes (; 416 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  local.tee $3
  call $~lib/array/Array<u8>#constructor
  local.tee $4
  call $~lib/staticarray/StaticArray.fromArray<u8>
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $3
   i32.lt_s
   if
    local.get $2
    local.get $1
    local.get $0
    call $src/assembly/utils/BinaryReader/BinaryReader#readByte
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $4
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $src/assembly/utils/BinaryReader/BinaryReader#readUint16 (; 417 ;) (param $0 i32) (result i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 8
  i32.shl
  i32.add
 )
 (func $src/assembly/spectrum/machine/spectrum-48/restoreScreenState (; 418 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  global.set $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  global.set $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  global.set $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.const 65535
  i32.and
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readBytes
  local.set $1
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  i32.const 16
  i32.sub
  i32.load offset=12
  local.tee $0
  local.set $2
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  local.get $0
  i32.lt_s
  if
   local.get $1
   i32.const 16
   i32.sub
   i32.load offset=12
   local.set $2
  end
  i32.const 0
  local.set $0
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
    local.get $0
    local.get $1
    local.get $0
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/restorePortState (; 419 ;) (param $0 i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
 )
 (func $src/assembly/spectrum/machine/spectrum-48/restoreMemoryState (; 420 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readBytes
  local.set $1
  global.get $src/assembly/spectrum/machine/spectrum-48/memory
  i32.const 16
  i32.sub
  i32.load offset=12
  local.tee $0
  local.set $2
  local.get $1
  i32.const 16
  i32.sub
  i32.load offset=12
  local.get $0
  i32.lt_s
  if
   local.get $1
   i32.const 16
   i32.sub
   i32.load offset=12
   local.set $2
  end
  i32.const 0
  local.set $0
  loop $for-loop|0
   local.get $0
   local.get $2
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/memory
    local.get $0
    local.get $1
    local.get $0
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48RestoreMachineState (; 421 ;) (param $0 i32)
  (local $1 i32)
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  global.set $src/assembly/spectrum/machine/spectrum-48/interruptRaised
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  global.set $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
  local.get $0
  call $src/assembly/utils/BinaryReader/BinaryReader#readBytes
  global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/restoreScreenState
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/restorePortState
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/restoreMemoryState
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetMemoryDevice (; 422 ;)
  (local $0 i32)
  loop $for-loop|0
   local.get $0
   i32.const 23388
   i32.load
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/memory
    local.get $0
    i32.const 23376
    local.get $0
    call $~lib/array/Array<u8>#__get
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  i32.const 23388
  i32.load
  local.set $0
  loop $for-loop|1
   local.get $0
   global.get $src/assembly/spectrum/machine/spectrum-48/memory
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/memory
    local.get $0
    i32.const 0
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|1
   end
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetKnownRomAddress (; 423 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $0
  i32.const 23760
  i32.eq
  if
   i32.const 1462
   return
  end
  local.get $0
  i32.const 23840
  i32.eq
  if
   i32.const 4780
   return
  end
  local.get $0
  i32.const 23888
  i32.eq
  if
   i32.const 1218
   return
  end
  local.get $0
  i32.const 23952
  i32.eq
  if
   i32.const 1388
   return
  end
  local.get $0
  i32.const 24016
  i32.eq
  if
   i32.const 1506
   return
  end
  local.get $0
  i32.const 24080
  i32.eq
  if
   i32.const 149
   return
  end
  local.get $0
  i32.const 24144
  i32.eq
  if
   i32.const 91
   return
  end
  local.get $0
  i32.const 24192
  i32.eq
  if
   i32.const 165
   return
  end
  i32.const -1
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48Read|trampoline (; 424 ;) (param $0 i32) (param $1 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $1
  end
  global.get $src/assembly/spectrum/machine/spectrum-48/memory
  local.get $0
  i32.const 65535
  i32.and
  call $~lib/staticarray/StaticArray<u8>#__get
  block $__inlined_func$src/assembly/spectrum/machine/spectrum-48/sp48Read
   local.get $1
   br_if $__inlined_func$src/assembly/spectrum/machine/spectrum-48/sp48Read
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48Write|trampoline (; 425 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  block $1of1
   block $outOfRange
    global.get $~argumentsLength
    i32.const 2
    i32.sub
    br_table $1of1 $1of1 $outOfRange
   end
   unreachable
  end
  local.get $0
  i32.const 49152
  i32.and
  if
   global.get $src/assembly/spectrum/machine/spectrum-48/memory
   local.get $0
   i32.const 65535
   i32.and
   local.get $1
   call $~lib/staticarray/StaticArray<u8>#__set
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48CloneMemory (; 426 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/memory
  i32.const 16
  i32.sub
  i32.load offset=12
  call $~lib/array/Array<u8>#constructor
  local.set $1
  loop $for-loop|0
   local.get $0
   global.get $src/assembly/spectrum/machine/spectrum-48/memory
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.lt_s
   if
    local.get $1
    local.get $0
    global.get $src/assembly/spectrum/machine/spectrum-48/memory
    local.get $0
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|1 (; 427 ;) (result i32)
  i32.const 0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetRamBank (; 428 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 16384
  call $~lib/array/Array<u8>#constructor
  local.set $1
  loop $for-loop|0
   local.get $0
   i32.const 49152
   i32.lt_s
   if
    local.get $1
    local.get $0
    global.get $src/assembly/spectrum/machine/spectrum-48/memory
    local.get $0
    i32.const 16384
    i32.add
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetRamBank|trampoline (; 429 ;) (param $0 i32) (param $1 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     i32.const 1
     i32.sub
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
  end
  call $src/assembly/spectrum/machine/spectrum-48/sp48GetRamBank
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|7 (; 430 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 65535
  i32.and
  i32.const 16384
  i32.lt_u
  if
   i32.const 24
   i32.const 28
   call $~lib/rt/tlsf/__alloc
   local.tee $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   i32.const 1
   i32.store8
   local.get $1
   f64.const 0
   f64.store offset=8
   local.get $1
   local.get $0
   f64.convert_i32_u
   f64.store offset=16
  else
   i32.const 24
   i32.const 28
   call $~lib/rt/tlsf/__alloc
   local.tee $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   i32.const 0
   i32.store8
   local.get $1
   f64.const 0
   f64.store offset=8
   local.get $1
   local.get $0
   i32.const 16384
   i32.sub
   f64.convert_i32_u
   f64.store offset=16
  end
  local.get $1
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|8 (; 431 ;) (param $0 i32) (result i32)
  (local $1 i32)
  i32.const 16
  i32.const 29
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 0
  i32.store8
  local.get $0
  f64.const 16384
  f64.store offset=8
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetPortDevice (; 432 ;)
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact (; 433 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.load offset=32
  local.get $0
  i32.load8_u offset=12
  i32.div_u
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/ioContentionWait (; 434 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 1
  i32.and
  i32.const 0
  i32.ne
  local.set $3
  local.get $2
  local.set $1
  local.get $0
  i32.const 49152
  i32.and
  i32.const 16384
  i32.eq
  if (result i32)
   i32.const 1
  else
   local.get $0
   i32.const 49152
   i32.and
   i32.const 49152
   i32.eq
   if (result i32)
    i32.const 0
    global.set $~argumentsLength
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=128
    call_indirect (type $none_=>_i32)
   else
    i32.const 0
   end
  end
  if
   local.get $3
   if
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
   else
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 3
    call $src/assembly/Z80Cpu/Z80Cpu#delay
   end
  else
   local.get $3
   if
    local.get $1
    i32.const 4
    call $src/assembly/Z80Cpu/Z80Cpu#delay
   else
    local.get $1
    i32.const 1
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    i32.const 1
    global.set $~argumentsLength
    local.get $1
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=192
    call_indirect (type $i32_=>_i32)
    call $src/assembly/Z80Cpu/Z80Cpu#delay
    local.get $1
    i32.const 3
    call $src/assembly/Z80Cpu/Z80Cpu#delay
   end
  end
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ReadPort (; 435 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/ioContentionWait
  local.get $0
  i32.const 1
  i32.and
  i32.eqz
  if
   i32.const 1
   global.set $~argumentsLength
   local.get $0
   i32.const 65535
   i32.and
   i32.const 8
   i32.shr_u
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load offset=256
   call_indirect (type $i32_=>_i32)
   local.set $4
   i32.const 0
   global.set $~argumentsLength
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load offset=260
   call_indirect (type $none_=>_i32)
   if
    i32.const 2
    global.set $~argumentsLength
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $1
    i32.const 24700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     local.tee $0
     local.get $0
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    i32.load offset=28
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $0
    i32.const 24700
    i32.gt_u
    if
     local.get $0
     i32.const 16
     i32.sub
     local.tee $2
     local.get $2
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $0
    i32.load offset=32
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load offset=264
    call_indirect (type $i32_i32_=>_i32)
    i32.eqz
    if
     local.get $4
     i32.const 191
     i32.and
     local.set $4
    end
    local.get $1
    call $~lib/rt/pure/__release
    local.get $0
    call $~lib/rt/pure/__release
   else
    global.get $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
    local.tee $0
    i32.eqz
    if
     global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
     global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
     i32.gt_u
     i32.const 0
     global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
     global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
     i32.ge_u
     select
     if
      global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
      global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
      i32.sub
      i32.const 16777215
      i32.and
      global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
      global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
      i32.sub
      i32.const 15
      i32.and
      i32.const 24
      i32.shl
      i32.or
      local.tee $1
      i32.const 700
      i32.gt_u
      if (result i32)
       i32.const 2800
      else
       local.get $1
       i32.const 2
       i32.shl
      end
      local.set $2
      global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
      i32.load
      local.tee $1
      i32.const 24700
      i32.gt_u
      if
       local.get $1
       i32.const 16
       i32.sub
       local.tee $3
       local.get $3
       i32.load offset=4
       i32.const 1
       i32.add
       i32.store offset=4
      end
      local.get $1
      i32.load offset=28
      global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
      i32.const 1
      i32.add
      i32.le_u
      if
       global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
       global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
       i32.sub
       i32.const 16777215
       i32.and
       global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
       global.get $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
       i32.sub
       i32.const 15
       i32.and
       i32.const 24
       i32.shl
       i32.or
       local.get $2
       i32.lt_s
       local.set $0
      end
      local.get $1
      call $~lib/rt/pure/__release
     end
    end
    i32.const 64
    i32.const 0
    i32.const 1
    local.get $0
    global.get $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue
    local.tee $1
    select
    select
    local.set $2
    local.get $0
    i32.eqz
    i32.const 0
    local.get $1
    select
    if (result i32)
     global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
     i32.load8_u offset=4
     i32.const 3
     i32.eq
    else
     i32.const 0
    end
    if (result i32)
     i32.const 0
    else
     local.get $2
    end
    local.get $4
    i32.const 191
    i32.and
    i32.or
    local.set $4
   end
   local.get $4
   return
  end
  i32.const 0
  global.set $~argumentsLength
  block $break|0
   block $case5|0
    block $case2|0
     global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
     i32.load offset=172
     call_indirect (type $none_=>_i32)
     local.tee $1
     global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
     call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
     local.get $1
     i32.load offset=12
     i32.rem_u
     call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
     local.tee $3
     i32.load
     local.tee $0
     i32.const 2
     i32.eq
     br_if $case2|0
     block $tablify|0
      local.get $0
      i32.const 3
      i32.sub
      br_table $case5|0 $tablify|0 $tablify|0 $case2|0 $case5|0 $case2|0 $case5|0 $tablify|0
     end
     br $break|0
    end
    local.get $3
    i32.load16_u offset=8
    local.set $2
    br $break|0
   end
   local.get $3
   i32.load16_u offset=10
   local.set $2
  end
  local.get $2
  if (result i32)
   i32.const 2
   global.set $~argumentsLength
   local.get $2
   i32.const 1
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load offset=76
   call_indirect (type $i32_i32_=>_i32)
  else
   i32.const 255
  end
  local.get $1
  call $~lib/rt/pure/__release
  local.get $3
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48WritePort (; 436 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-48/ioContentionWait
  local.get $0
  i32.const 1
  i32.and
  if
   return
  end
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 7
  i32.and
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=184
  call_indirect (type $i32_=>_none)
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $1
  i32.const 16
  i32.and
  i32.const 0
  i32.ne
  local.tee $0
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=236
  call_indirect (type $i32_i32_=>_none)
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  i32.const 8
  i32.and
  i32.const 0
  i32.ne
  local.tee $1
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=272
  call_indirect (type $i32_=>_none)
  local.get $1
  global.set $src/assembly/spectrum/machine/spectrum-48/portBit3LastValue
  i32.const 0
  local.get $0
  global.get $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
  select
  if
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    local.get $1
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $0
   i32.load offset=32
   global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0L
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load
   local.tee $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   i32.load offset=28
   global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom0H
   i32.const 1
   global.set $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
   local.get $0
   call $~lib/rt/pure/__release
   local.get $1
   call $~lib/rt/pure/__release
  else
   local.get $0
   i32.eqz
   i32.const 0
   global.get $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
   select
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $0
    i32.const 24700
    i32.gt_u
    if
     local.get $0
     i32.const 16
     i32.sub
     local.tee $1
     local.get $1
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $0
    i32.load offset=32
    global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1L
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $1
    i32.const 24700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     local.tee $2
     local.get $2
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    i32.load offset=28
    global.set $src/assembly/spectrum/machine/spectrum-48/portBit4ChangedFrom1H
    i32.const 0
    global.set $src/assembly/spectrum/machine/spectrum-48/portBit4LastValue
    local.get $0
    call $~lib/rt/pure/__release
    local.get $1
    call $~lib/rt/pure/__release
   end
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetInterruptDevice (; 437 ;)
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/interruptRaised
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48IsInterruptRaised (; 438 ;) (result i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/interruptRaised
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48IsInterruptRevoked (; 439 ;) (result i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48CheckForInterrupt (; 440 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $3
  i32.const 24700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $3
  i32.load
  local.set $1
  block $folding-inner0
   global.get $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
   br_if $folding-inner0
   local.get $0
   local.get $1
   i32.lt_u
   br_if $folding-inner0
   local.get $0
   local.get $1
   i32.const 23
   i32.add
   i32.gt_u
   if
    i32.const 1
    global.set $src/assembly/spectrum/machine/spectrum-48/interruptRevoked
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $0
    i32.const 24700
    i32.gt_u
    if
     local.get $0
     i32.const 16
     i32.sub
     local.tee $1
     local.get $1
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $0
    global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
    i32.load
    local.tee $1
    i32.const 24700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     local.tee $4
     local.get $4
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    i32.load offset=36
    i32.const 254
    i32.and
    i32.store offset=36
    local.get $1
    call $~lib/rt/pure/__release
    local.get $0
    call $~lib/rt/pure/__release
    br $folding-inner0
   end
   global.get $src/assembly/spectrum/machine/spectrum-48/interruptRaised
   br_if $folding-inner0
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    local.get $1
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $0
   i32.load8_u offset=44
   if
    local.get $3
    call $~lib/rt/pure/__release
    local.get $0
    call $~lib/rt/pure/__release
    return
   end
   i32.const 1
   global.set $src/assembly/spectrum/machine/spectrum-48/interruptRaised
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load
   local.tee $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
   i32.load
   local.tee $2
   i32.const 24700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $5
    local.get $5
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $2
   i32.load offset=36
   i32.const 1
   i32.or
   i32.store offset=36
   local.get $3
   call $~lib/rt/pure/__release
   local.get $0
   call $~lib/rt/pure/__release
   local.get $2
   call $~lib/rt/pure/__release
   local.get $1
   call $~lib/rt/pure/__release
   return
  end
  local.get $3
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#isTactVisible (; 441 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  (local $3 i32)
  local.get $2
  i32.const 65535
  i32.and
  i32.const 0
  i32.ge_u
  i32.const 0
  local.get $1
  i32.const 65535
  i32.and
  local.get $0
  i32.load offset=20
  local.get $0
  i32.load offset=16
  local.get $0
  i32.load offset=4
  local.get $0
  i32.load offset=8
  i32.add
  local.tee $3
  local.get $0
  i32.load offset=12
  i32.add
  i32.add
  i32.add
  i32.lt_u
  i32.const 0
  local.get $1
  i32.const 65535
  i32.and
  local.get $3
  i32.ge_u
  select
  select
  if (result i32)
   local.get $2
   i32.const 65535
   i32.and
   local.get $0
   i32.load offset=84
   local.get $0
   i32.load offset=44
   i32.sub
   local.get $0
   i32.load offset=28
   i32.sub
   i32.lt_u
  else
   i32.const 0
  end
 )
 (func $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#isTactInDisplayArea (; 442 ;) (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
  local.get $1
  i32.const 65535
  i32.and
  local.get $0
  i32.load offset=60
  i32.ge_u
  if (result i32)
   local.get $1
   i32.const 65535
   i32.and
   local.get $0
   i32.load offset=64
   i32.le_u
  else
   i32.const 0
  end
  if (result i32)
   local.get $2
   i32.const 65535
   i32.and
   local.get $0
   i32.load offset=32
   i32.ge_u
  else
   i32.const 0
  end
  if (result i32)
   local.get $2
   i32.const 65535
   i32.and
   local.get $0
   i32.load offset=32
   local.get $0
   i32.load offset=36
   i32.add
   i32.lt_u
  else
   i32.const 0
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/calculatePixelByteAddress (; 443 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 65535
  i32.and
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.load offset=60
  i32.sub
  local.set $3
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $2
  i32.load offset=32
  i32.sub
  i32.const 1
  i32.shl
  i32.const 3
  i32.shr_s
  i32.const 16384
  i32.or
  local.get $3
  i32.const 5
  i32.shl
  i32.or
  local.set $1
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
  local.get $1
  i32.const 63519
  i32.and
  local.get $1
  i32.const 1792
  i32.and
  i32.const 3
  i32.shr_s
  i32.or
  local.get $1
  i32.const 224
  i32.and
  i32.const 3
  i32.shl
  i32.or
 )
 (func $src/assembly/spectrum/machine/spectrum-48/calculateAttributeAddress (; 444 ;) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  local.get $0
  i32.const 65535
  i32.and
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.load offset=60
  i32.sub
  i32.const 3
  i32.shr_u
  i32.const 5
  i32.shl
  local.get $1
  i32.const 65535
  i32.and
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $4
   local.get $4
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.load offset=32
  i32.sub
  i32.const 1
  i32.shl
  i32.const 3
  i32.shr_s
  i32.or
  local.get $0
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
  i32.const 22528
  i32.add
 )
 (func $~lib/array/Array<src/assembly/spectrum/screen/rendering/RenderingTact>#__unchecked_set (; 445 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $2
  local.get $0
  i32.load offset=4
  local.get $1
  i32.const 2
  i32.shl
  i32.add
  local.tee $0
  i32.load
  local.tee $1
  i32.ne
  if
   local.get $2
   i32.const 24700
   i32.gt_u
   if
    local.get $2
    i32.const 16
    i32.sub
    local.tee $3
    local.get $3
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $0
   local.get $2
   i32.store
   local.get $1
   call $~lib/rt/pure/__release
  end
 )
 (func $~lib/array/Array<src/assembly/spectrum/screen/rendering/RenderingTact>#__set (; 446 ;) (param $0 i32) (param $1 i32) (param $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=12
  i32.ge_u
  if
   local.get $1
   i32.const 0
   i32.lt_s
   if
    i32.const 192
    i32.const 256
    i32.const 109
    i32.const 21
    call $~lib/builtins/abort
    unreachable
   end
   local.get $0
   local.get $1
   i32.const 1
   i32.add
   local.tee $3
   i32.const 2
   call $~lib/array/ensureSize
   local.get $0
   local.get $3
   i32.store offset=12
  end
  local.get $0
  local.get $1
  local.get $2
  call $~lib/array/Array<src/assembly/spectrum/screen/rendering/RenderingTact>#__unchecked_set
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetScreenDevice (; 447 ;)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  (local $7 i32)
  (local $8 i32)
  (local $9 i32)
  (local $10 i32)
  (local $11 i32)
  (local $12 f64)
  (local $13 i32)
  (local $14 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=8
  local.get $2
  i32.load offset=100
  i32.div_u
  i32.const 2
  i32.div_u
  f64.convert_i32_u
  local.tee $12
  f64.const 0.5
  f64.add
  f64.floor
  local.get $12
  f64.copysign
  i32.trunc_f64_u
  i32.const 65535
  i32.and
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames
  i32.const 256
  call $~lib/array/Array<u8>#constructor
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors
  i32.const 256
  call $~lib/array/Array<u8>#constructor
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors
  loop $for-loop|0
   local.get $0
   i32.const 256
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors
    local.get $0
    local.get $0
    i32.const 64
    i32.and
    i32.const 3
    i32.shr_s
    local.tee $1
    local.get $0
    i32.const 56
    i32.and
    i32.const 3
    i32.shr_s
    i32.or
    local.tee $3
    call $~lib/array/Array<u8>#__set
    global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors
    local.get $0
    i32.const 256
    i32.add
    local.tee $5
    local.get $1
    local.get $0
    i32.const 7
    i32.and
    i32.or
    local.tee $1
    call $~lib/array/Array<u8>#__set
    global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors
    local.get $0
    local.get $1
    local.get $3
    local.get $0
    i32.const 128
    i32.and
    local.tee $4
    select
    call $~lib/array/Array<u8>#__set
    global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors
    local.get $5
    local.get $3
    local.get $1
    local.get $4
    select
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $2
  i32.load offset=80
  local.get $2
  i32.load offset=56
  i32.mul
  call $~lib/array/Array<u8>#constructor
  local.tee $13
  call $~lib/staticarray/StaticArray.fromArray<u8>
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  local.get $2
  i32.load offset=100
  local.set $9
  i32.const 16
  i32.const 31
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  local.get $9
  i32.const 2
  call $~lib/arraybuffer/ArrayBufferView#constructor
  local.tee $0
  i32.const 0
  i32.store offset=12
  local.get $0
  local.get $9
  i32.store offset=12
  global.get $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
  call $~lib/rt/pure/__release
  local.get $0
  global.set $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
  i32.const 0
  global.set $~argumentsLength
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=60
  call_indirect (type $none_=>_i32)
  local.tee $14
  i32.load offset=8
  local.set $5
  loop $for-loop|1
   local.get $6
   local.get $9
   i32.lt_s
   if
    i32.const 0
    local.set $0
    i32.const 0
    local.set $3
    i32.const 0
    local.set $7
    i32.const 0
    local.set $8
    i32.const 0
    local.set $11
    local.get $2
    local.get $6
    local.get $2
    i32.load offset=84
    i32.div_s
    f64.convert_i32_s
    f64.floor
    i32.trunc_f64_u
    local.tee $4
    local.get $6
    local.get $2
    i32.load offset=84
    i32.rem_s
    local.tee $1
    call $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#isTactVisible
    if
     local.get $2
     i32.load offset=80
     local.get $4
     i32.const 65535
     i32.and
     local.get $2
     i32.load offset=4
     i32.sub
     local.get $2
     i32.load offset=8
     i32.sub
     i32.const 65535
     i32.and
     i32.mul
     local.get $1
     i32.const 1
     i32.shl
     i32.const 65535
     i32.and
     i32.add
     local.set $11
     local.get $2
     local.get $4
     local.get $1
     call $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#isTactInDisplayArea
     if
      block $break|2
       block $case7|2
        block $case6|2
         block $case5|2
          block $case4|2
           block $case3|2
            block $case2|2
             block $case1|2
              local.get $1
              i32.const 65535
              i32.and
              local.get $2
              i32.load offset=32
              i32.sub
              i32.const 7
              i32.and
              local.tee $10
              if
               local.get $10
               i32.const 1
               i32.sub
               br_table $case1|2 $case2|2 $case3|2 $case4|2 $case5|2 $case6|2 $case7|2 $break|2
              end
              i32.const 6
              local.set $0
              local.get $4
              local.get $1
              i32.const 4
              i32.add
              i32.const 65535
              i32.and
              call $src/assembly/spectrum/machine/spectrum-48/calculatePixelByteAddress
              local.set $7
              i32.const 5
              i32.const 0
              local.get $5
              i32.const 1
              i32.eq
              select
              local.set $3
              br $break|2
             end
             i32.const 7
             local.set $0
             local.get $4
             local.get $1
             i32.const 3
             i32.add
             call $src/assembly/spectrum/machine/spectrum-48/calculateAttributeAddress
             local.set $8
             i32.const 4
             i32.const 7
             local.get $5
             i32.const 1
             i32.eq
             select
             local.set $3
             br $break|2
            end
            i32.const 4
            local.set $0
            i32.const 3
            i32.const 6
            local.get $5
            i32.const 1
            i32.eq
            select
            local.set $3
            br $break|2
           end
           i32.const 4
           local.set $0
           i32.const 2
           i32.const 5
           local.get $5
           i32.const 1
           i32.eq
           select
           local.set $3
           br $break|2
          end
          i32.const 5
          local.set $0
          i32.const 1
          i32.const 4
          local.get $5
          i32.const 1
          i32.eq
          select
          local.set $3
          br $break|2
         end
         i32.const 5
         local.set $0
         i32.const 0
         i32.const 3
         local.get $5
         i32.const 1
         i32.eq
         select
         local.set $3
         br $break|2
        end
        local.get $1
        i32.const 65535
        i32.and
        local.get $2
        i32.load offset=32
        local.get $2
        i32.load offset=36
        i32.add
        i32.const 2
        i32.sub
        i32.lt_u
        if (result i32)
         local.get $4
         local.get $1
         i32.const 2
         i32.add
         i32.const 65535
         i32.and
         call $src/assembly/spectrum/machine/spectrum-48/calculatePixelByteAddress
         local.set $7
         i32.const 0
         i32.const 2
         local.get $5
         i32.const 1
         i32.eq
         select
         local.set $3
         i32.const 8
        else
         i32.const 5
        end
        local.set $0
        br $break|2
       end
       local.get $1
       i32.const 65535
       i32.and
       local.get $2
       i32.load offset=32
       local.get $2
       i32.load offset=36
       i32.add
       i32.const 1
       i32.sub
       i32.lt_u
       if (result i32)
        local.get $4
        local.get $1
        i32.const 1
        i32.add
        call $src/assembly/spectrum/machine/spectrum-48/calculateAttributeAddress
        local.set $8
        i32.const 6
        i32.const 1
        local.get $5
        i32.const 1
        i32.eq
        select
        local.set $3
        i32.const 9
       else
        i32.const 5
       end
       local.set $0
      end
     else
      i32.const 1
      local.set $0
      local.get $4
      i32.const 65535
      i32.and
      local.get $2
      i32.load offset=60
      i32.ge_u
      if (result i32)
       local.get $4
       i32.const 65535
       i32.and
       local.get $2
       i32.load offset=64
       i32.le_u
      else
       i32.const 0
      end
      if
       local.get $2
       i32.load offset=32
       local.get $2
       i32.load offset=48
       i32.sub
       local.get $1
       i32.const 65535
       i32.and
       i32.eq
       if (result i32)
        i32.const 2
        local.set $0
        local.get $4
        local.get $1
        i32.const 2
        i32.add
        i32.const 65535
        i32.and
        call $src/assembly/spectrum/machine/spectrum-48/calculatePixelByteAddress
        local.set $7
        i32.const 0
        i32.const 2
        local.get $5
        i32.const 1
        i32.eq
        select
       else
        local.get $2
        i32.load offset=32
        local.get $2
        i32.load offset=52
        i32.sub
        local.get $1
        i32.const 65535
        i32.and
        i32.eq
        if (result i32)
         i32.const 3
         local.set $0
         local.get $4
         local.get $1
         i32.const 1
         i32.add
         call $src/assembly/spectrum/machine/spectrum-48/calculateAttributeAddress
         local.set $8
         i32.const 6
         i32.const 1
         local.get $5
         i32.const 1
         i32.eq
         select
        else
         i32.const 0
        end
       end
       local.set $3
      end
     end
    end
    global.get $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
    i32.const 16
    i32.const 30
    call $~lib/rt/tlsf/__alloc
    local.tee $1
    i32.const 24700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     local.tee $10
     local.get $10
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    local.get $0
    i32.store
    local.get $1
    local.get $3
    i32.store offset=4
    local.get $1
    local.get $7
    i32.store16 offset=8
    local.get $1
    local.get $8
    i32.store16 offset=10
    local.get $1
    local.get $11
    i32.store offset=12
    local.get $6
    local.get $1
    call $~lib/array/Array<src/assembly/spectrum/screen/rendering/RenderingTact>#__set
    local.get $1
    call $~lib/rt/pure/__release
    local.get $6
    i32.const 1
    i32.add
    local.set $6
    br $for-loop|1
   end
  end
  local.get $2
  call $~lib/rt/pure/__release
  local.get $13
  call $~lib/rt/pure/__release
  local.get $14
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:overflow (; 448 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=36
 )
 (func $src/assembly/spectrum/machine/spectrum-48/getColor (; 449 ;) (param $0 i32) (param $1 i32) (result i32)
  local.get $1
  i32.const 255
  i32.and
  i32.const 256
  i32.const 0
  local.get $0
  i32.const 255
  i32.and
  select
  i32.add
  local.set $0
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
  if (result i32)
   global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOnColors
   local.get $0
   call $~lib/array/Array<u8>#__get
  else
   global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashOffColors
   local.get $0
   call $~lib/array/Array<u8>#__get
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48RenderScreen (; 450 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  local.set $3
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.le_u
   if
    local.get $3
    local.get $0
    i32.const 0
    call $~lib/staticarray/StaticArray<u8>#__set
    block $break|1
     global.get $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
     local.get $0
     call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
     local.tee $2
     i32.load
     local.tee $4
     i32.eqz
     br_if $break|1
     block $case9|1
      block $case8|1
       block $case7|1
        block $case6|1
         block $case5|1
          block $case4|1
           block $case3|1
            block $case2|1
             block $case1|1
              local.get $4
              i32.const 1
              i32.sub
              br_table $case1|1 $case2|1 $case3|1 $case4|1 $case7|1 $case5|1 $case6|1 $case8|1 $case9|1 $break|1
             end
             local.get $3
             local.get $2
             i32.load offset=12
             global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
             call $~lib/staticarray/StaticArray<u8>#__set
             local.get $3
             local.get $2
             i32.load offset=12
             i32.const 1
             i32.add
             global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
             call $~lib/staticarray/StaticArray<u8>#__set
             br $break|1
            end
            local.get $3
            local.get $2
            i32.load offset=12
            global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
            call $~lib/staticarray/StaticArray<u8>#__set
            local.get $3
            local.get $2
            i32.load offset=12
            i32.const 1
            i32.add
            global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
            call $~lib/staticarray/StaticArray<u8>#__set
            i32.const 2
            global.set $~argumentsLength
            local.get $2
            i32.load16_u offset=8
            i32.const 1
            global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
            i32.load offset=76
            call_indirect (type $i32_i32_=>_i32)
            i32.const 255
            i32.and
            global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
            br $break|1
           end
           local.get $3
           local.get $2
           i32.load offset=12
           global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
           call $~lib/staticarray/StaticArray<u8>#__set
           local.get $3
           local.get $2
           i32.load offset=12
           i32.const 1
           i32.add
           global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
           call $~lib/staticarray/StaticArray<u8>#__set
           i32.const 2
           global.set $~argumentsLength
           local.get $2
           i32.load16_u offset=10
           i32.const 1
           global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
           i32.load offset=76
           call_indirect (type $i32_i32_=>_i32)
           i32.const 255
           i32.and
           global.set $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
           br $break|1
          end
          local.get $3
          local.get $2
          i32.load offset=12
          global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
          i32.const 128
          i32.and
          global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
          call $src/assembly/spectrum/machine/spectrum-48/getColor
          call $~lib/staticarray/StaticArray<u8>#__set
          local.get $3
          local.get $2
          i32.load offset=12
          i32.const 1
          i32.add
          global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
          i32.const 64
          i32.and
          global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
          call $src/assembly/spectrum/machine/spectrum-48/getColor
          call $~lib/staticarray/StaticArray<u8>#__set
          global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
          i32.const 2
          i32.shl
          i32.const 255
          i32.and
          global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
          br $break|1
         end
         local.get $3
         local.get $2
         i32.load offset=12
         global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
         i32.const 128
         i32.and
         global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
         call $src/assembly/spectrum/machine/spectrum-48/getColor
         call $~lib/staticarray/StaticArray<u8>#__set
         local.get $3
         local.get $2
         i32.load offset=12
         i32.const 1
         i32.add
         global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
         i32.const 64
         i32.and
         global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
         call $src/assembly/spectrum/machine/spectrum-48/getColor
         call $~lib/staticarray/StaticArray<u8>#__set
         global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
         i32.const 2
         i32.shl
         i32.const 255
         i32.and
         global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
         i32.const 2
         global.set $~argumentsLength
         local.get $2
         i32.load16_u offset=8
         i32.const 1
         global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
         i32.load offset=76
         call_indirect (type $i32_i32_=>_i32)
         i32.const 255
         i32.and
         global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
         br $break|1
        end
        local.get $3
        local.get $2
        i32.load offset=12
        global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
        i32.const 128
        i32.and
        global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
        call $src/assembly/spectrum/machine/spectrum-48/getColor
        call $~lib/staticarray/StaticArray<u8>#__set
        local.get $3
        local.get $2
        i32.load offset=12
        i32.const 1
        i32.add
        global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
        i32.const 64
        i32.and
        global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
        call $src/assembly/spectrum/machine/spectrum-48/getColor
        call $~lib/staticarray/StaticArray<u8>#__set
        global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
        i32.const 2
        i32.shl
        i32.const 255
        i32.and
        global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
        i32.const 2
        global.set $~argumentsLength
        local.get $2
        i32.load16_u offset=10
        i32.const 1
        global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
        i32.load offset=76
        call_indirect (type $i32_i32_=>_i32)
        i32.const 255
        i32.and
        global.set $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
        br $break|1
       end
       local.get $3
       local.get $2
       i32.load offset=12
       global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
       i32.const 128
       i32.and
       global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
       call $src/assembly/spectrum/machine/spectrum-48/getColor
       call $~lib/staticarray/StaticArray<u8>#__set
       local.get $3
       local.get $2
       i32.load offset=12
       i32.const 1
       i32.add
       global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
       i32.const 64
       i32.and
       global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
       call $src/assembly/spectrum/machine/spectrum-48/getColor
       call $~lib/staticarray/StaticArray<u8>#__set
       global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
       i32.const 2
       i32.shl
       i32.const 255
       i32.and
       global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
       br $break|1
      end
      local.get $3
      local.get $2
      i32.load offset=12
      global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
      i32.const 128
      i32.and
      global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
      call $src/assembly/spectrum/machine/spectrum-48/getColor
      call $~lib/staticarray/StaticArray<u8>#__set
      local.get $3
      local.get $2
      i32.load offset=12
      i32.const 1
      i32.add
      global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
      i32.const 64
      i32.and
      global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
      call $src/assembly/spectrum/machine/spectrum-48/getColor
      call $~lib/staticarray/StaticArray<u8>#__set
      global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
      i32.const 2
      i32.shl
      i32.const 255
      i32.and
      global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
      i32.const 2
      global.set $~argumentsLength
      local.get $2
      i32.load16_u offset=8
      i32.const 1
      global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
      i32.load offset=76
      call_indirect (type $i32_i32_=>_i32)
      i32.const 255
      i32.and
      global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte1
      br $break|1
     end
     local.get $3
     local.get $2
     i32.load offset=12
     global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
     i32.const 128
     i32.and
     global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
     call $src/assembly/spectrum/machine/spectrum-48/getColor
     call $~lib/staticarray/StaticArray<u8>#__set
     local.get $3
     local.get $2
     i32.load offset=12
     i32.const 1
     i32.add
     global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
     i32.const 64
     i32.and
     global.get $src/assembly/spectrum/machine/spectrum-48/screenAttrByte2
     call $src/assembly/spectrum/machine/spectrum-48/getColor
     call $~lib/staticarray/StaticArray<u8>#__set
     global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
     i32.const 2
     i32.shl
     i32.const 255
     i32.and
     global.set $src/assembly/spectrum/machine/spectrum-48/screenPixelByte2
     i32.const 2
     global.set $~argumentsLength
     local.get $2
     i32.load16_u offset=10
     i32.const 1
     global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
     i32.load offset=76
     call_indirect (type $i32_i32_=>_i32)
     i32.const 255
     i32.and
     global.set $src/assembly/spectrum/machine/spectrum-48/screenAttrByte1
    end
    local.get $2
    call $~lib/rt/pure/__release
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48StartNewScreenFrame (; 451 ;)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.load offset=28
  local.get $0
  call $~lib/rt/pure/__release
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames
  i32.rem_u
  i32.eqz
  if
   global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
   i32.eqz
   global.set $src/assembly/spectrum/machine/spectrum-48/screenFlashPhase
  end
  i32.const 0
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=36
  call $src/assembly/spectrum/machine/spectrum-48/sp48RenderScreen
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetRenderingTactTable (; 452 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetFlashToggleFrames (; 453 ;) (result i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenFlashToggleFrames
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetBorderColor (; 454 ;) (result i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48SetBorderColor (; 455 ;) (param $0 i32)
  local.get $0
  i32.const 255
  i32.and
  global.set $src/assembly/spectrum/machine/spectrum-48/screenBorderColor
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetContentionValue (; 456 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenRenderingTactTable
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=16
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  local.get $2
  i32.load offset=100
  i32.rem_u
  call $~lib/array/Array<src/assembly/test-machine/test-devices/IoOp>#__get
  local.tee $0
  i32.load offset=4
  local.get $2
  call $~lib/rt/pure/__release
  local.get $0
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetPixelBuffer (; 457 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
  i32.const 16
  i32.sub
  i32.load offset=12
  call $~lib/array/Array<u8>#constructor
  local.set $1
  loop $for-loop|0
   local.get $0
   global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
   i32.const 16
   i32.sub
   i32.load offset=12
   i32.lt_s
   if
    local.get $1
    local.get $0
    global.get $src/assembly/spectrum/machine/spectrum-48/screenPixelBuffer
    local.get $0
    call $~lib/staticarray/StaticArray<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetBeeperDevice (; 458 ;)
  nop
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48StartNewBeeperFrame (; 459 ;)
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  i32.load offset=36
  drop
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetBeeperSamples (; 460 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 32
  i32.const 24240
  call $~lib/rt/__allocArray
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetLastEarBit (; 461 ;) (result i32)
  i32.const 1
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetSamplesPerFrame (; 462 ;) (result f32)
  f32.const 0
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48ResetKeyboardDevice (; 463 ;)
  (local $0 i32)
  (local $1 i32)
  i32.const 8
  call $~lib/array/Array<u8>#constructor
  local.tee $1
  call $~lib/staticarray/StaticArray.fromArray<u8>
  global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  i32.const 0
  local.set $0
  loop $for-loop|0
   local.get $0
   i32.const 8
   i32.lt_s
   if
    global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
    local.get $0
    i32.const 0
    call $~lib/staticarray/StaticArray<u8>#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48SetKeyStatus (; 464 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  i32.const 1
  local.get $0
  i32.const 5
  i32.rem_s
  i32.shl
  local.set $2
  global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  local.get $0
  i32.const 5
  i32.div_s
  f64.convert_i32_s
  f64.floor
  i32.trunc_f64_s
  local.tee $0
  local.get $1
  if (result i32)
   global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
   local.get $0
   call $~lib/staticarray/StaticArray<u8>#__get
   local.get $2
   i32.or
  else
   global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
   local.get $0
   call $~lib/staticarray/StaticArray<u8>#__get
   local.get $2
   i32.const -1
   i32.xor
   i32.and
  end
  call $~lib/staticarray/StaticArray<u8>#__set
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetKeyStatus (; 465 ;) (param $0 i32) (result i32)
  i32.const 1
  local.get $0
  i32.const 5
  i32.rem_s
  i32.shl
  global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
  local.get $0
  i32.const 5
  i32.div_s
  f64.convert_i32_s
  f64.floor
  i32.trunc_f64_s
  call $~lib/staticarray/StaticArray<u8>#__get
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/spectrum/machine/spectrum-48/sp48GetKeyLineStatus (; 466 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const -1
  i32.xor
  local.set $0
  loop $while-continue|1
   local.get $0
   i32.const 255
   i32.and
   i32.const 0
   i32.gt_u
   if
    local.get $0
    i32.const 1
    i32.and
    if
     global.get $src/assembly/spectrum/machine/spectrum-48/keyboardLineStatus
     local.get $1
     call $~lib/staticarray/StaticArray<u8>#__get
     local.get $2
     i32.or
     local.set $2
    end
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    local.get $0
    i32.const 255
    i32.and
    i32.const 1
    i32.shr_u
    local.set $0
    br $while-continue|1
   end
  end
  local.get $2
  i32.const -1
  i32.xor
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine~anonymous|12 (; 467 ;) (param $0 i32) (param $1 i32) (result i32)
  i32.const 1
 )
 (func $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#constructor (; 468 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  i32.const 104
  i32.const 23
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
  i32.const 0
  i32.store offset=8
  local.get $1
  i32.const 0
  i32.store offset=12
  local.get $1
  i32.const 0
  i32.store offset=16
  local.get $1
  i32.const 0
  i32.store offset=20
  local.get $1
  i32.const 0
  i32.store offset=24
  local.get $1
  i32.const 0
  i32.store offset=28
  local.get $1
  i32.const 0
  i32.store offset=32
  local.get $1
  i32.const 0
  i32.store offset=36
  local.get $1
  i32.const 0
  i32.store offset=40
  local.get $1
  i32.const 0
  i32.store offset=44
  local.get $1
  i32.const 0
  i32.store offset=48
  local.get $1
  i32.const 0
  i32.store offset=52
  local.get $1
  i32.const 0
  i32.store offset=56
  local.get $1
  i32.const 0
  i32.store offset=60
  local.get $1
  i32.const 0
  i32.store offset=64
  local.get $1
  i32.const 0
  i32.store offset=68
  local.get $1
  i32.const 0
  i32.store offset=72
  local.get $1
  i32.const 0
  i32.store offset=76
  local.get $1
  i32.const 0
  i32.store offset=80
  local.get $1
  i32.const 0
  i32.store offset=84
  local.get $1
  i32.const 0
  i32.store offset=88
  local.get $1
  i32.const 0
  i32.store offset=92
  local.get $1
  i32.const 0
  i32.store offset=96
  local.get $1
  i32.const 0
  i32.store offset=100
  local.get $1
  local.get $0
  i32.load
  i32.store
  local.get $1
  local.get $0
  i32.load offset=4
  i32.store offset=4
  local.get $1
  local.get $0
  i32.load offset=8
  i32.store offset=8
  local.get $1
  local.get $0
  i32.load offset=12
  i32.store offset=12
  local.get $1
  local.get $0
  i32.load offset=20
  i32.store offset=20
  local.get $1
  local.get $0
  i32.load offset=24
  i32.store offset=24
  local.get $1
  local.get $0
  i32.load offset=16
  i32.store offset=16
  local.get $1
  local.get $0
  i32.load offset=32
  i32.store offset=32
  local.get $1
  local.get $0
  i32.load offset=40
  i32.store offset=40
  local.get $1
  local.get $0
  i32.load offset=36
  i32.store offset=36
  local.get $1
  local.get $0
  i32.load offset=28
  i32.store offset=28
  local.get $1
  local.get $0
  i32.load offset=44
  i32.store offset=44
  local.get $1
  local.get $0
  i32.load offset=48
  i32.store offset=48
  local.get $1
  local.get $0
  i32.load offset=52
  i32.store offset=52
  local.get $1
  local.get $1
  i32.load offset=20
  local.get $1
  i32.load offset=12
  local.get $1
  i32.load offset=16
  i32.add
  i32.add
  i32.store offset=56
  local.get $1
  local.get $1
  i32.load offset=12
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  i32.add
  i32.add
  i32.store offset=60
  local.get $1
  local.get $1
  i32.load offset=60
  local.get $1
  i32.load offset=16
  i32.add
  i32.const 1
  i32.sub
  i32.store offset=64
  local.get $1
  local.get $1
  i32.load offset=32
  i32.const 1
  i32.shl
  i32.store offset=68
  local.get $1
  local.get $1
  i32.load offset=40
  i32.const 1
  i32.shl
  i32.store offset=76
  local.get $1
  local.get $1
  i32.load offset=36
  i32.const 1
  i32.shl
  i32.store offset=72
  local.get $1
  local.get $1
  i32.load offset=76
  local.get $1
  i32.load offset=68
  local.get $1
  i32.load offset=72
  i32.add
  i32.add
  i32.store offset=80
  local.get $1
  local.get $1
  i32.load offset=28
  local.get $1
  i32.load offset=44
  local.get $1
  i32.load offset=40
  local.get $1
  i32.load offset=32
  local.get $1
  i32.load offset=36
  i32.add
  i32.add
  i32.add
  i32.add
  i32.store offset=84
  local.get $1
  local.get $1
  i32.load offset=24
  local.get $1
  i32.load offset=20
  local.get $1
  i32.load offset=60
  local.get $1
  i32.load offset=16
  i32.add
  i32.add
  i32.add
  i32.store offset=96
  local.get $1
  local.get $1
  i32.load offset=96
  local.get $1
  i32.load offset=84
  i32.mul
  i32.store offset=100
  local.get $1
  local.get $1
  i32.load offset=32
  local.get $1
  i32.load offset=60
  local.get $1
  i32.load offset=84
  i32.mul
  i32.add
  i32.store offset=88
  local.get $1
  local.get $1
  i32.load offset=84
  local.get $1
  i32.load offset=4
  local.get $1
  i32.load offset=8
  i32.add
  i32.mul
  i32.store offset=92
  local.get $1
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setTactsInFrame (; 469 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=24
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#setup (; 470 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  local.get $0
  i32.load offset=56
  call_indirect (type $none_=>_i32)
  local.tee $2
  i32.load
  i32.store offset=8
  local.get $0
  local.get $2
  i32.load8_u offset=4
  i32.store8 offset=12
  local.get $0
  i32.load
  local.get $2
  i32.load8_u offset=5
  i32.store8 offset=70
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=64
  call_indirect (type $none_=>_i32)
  local.tee $4
  call $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#constructor
  local.set $1
  local.get $0
  i32.load offset=16
  call $~lib/rt/pure/__release
  local.get $0
  local.get $1
  i32.store offset=16
  local.get $0
  i32.const 1
  i32.store8 offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=44
  local.get $0
  i32.load
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $0
  i32.load offset=16
  i32.load offset=100
  local.get $0
  i32.load8_u offset=12
  i32.mul
  i32.store offset=24
  i32.const 1
  global.set $~argumentsLength
  i32.const 24000
  local.get $0
  i32.load offset=220
  call_indirect (type $i32_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=68
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=132
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=164
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=144
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=200
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=244
  call_indirect (type $none_=>_none)
  i32.const 1
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=88
  call_indirect (type $i32_=>_none)
  local.get $0
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $3
   local.get $3
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#executeReset
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
  local.get $4
  call $~lib/rt/pure/__release
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine (; 471 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.const 1
  local.get $0
  select
  global.set $src/assembly/spectrum/machine/spectrum-machine/machineType
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#constructor
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  call $~lib/rt/pure/__release
  global.set $src/assembly/spectrum/machine/spectrum-machine/spectrum
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  local.tee $0
  global.get $src/assembly/spectrum/machine/spectrum-48/spectrum
  local.tee $1
  i32.ne
  if
   local.get $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   call $~lib/rt/pure/__release
  end
  local.get $0
  global.set $src/assembly/spectrum/machine/spectrum-48/spectrum
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  local.tee $0
  i32.const 238
  i32.store offset=56
  local.get $0
  i32.const 239
  i32.store offset=60
  local.get $0
  i32.const 240
  i32.store offset=64
  local.get $0
  i32.const 241
  i32.store offset=324
  local.get $0
  i32.const 242
  i32.store offset=328
  local.get $0
  i32.const 243
  i32.store offset=68
  local.get $0
  i32.const 244
  i32.store offset=72
  local.get $0
  i32.const 245
  i32.store offset=76
  local.get $0
  i32.const 246
  i32.store offset=80
  local.get $0
  i32.const 247
  i32.store offset=84
  local.get $0
  i32.const 248
  i32.store offset=88
  local.get $0
  i32.const 249
  i32.store offset=92
  local.get $0
  i32.const 250
  i32.store offset=96
  local.get $0
  i32.const 251
  i32.store offset=92
  local.get $0
  i32.const 252
  i32.store offset=104
  local.get $0
  i32.const 253
  i32.store offset=108
  local.get $0
  i32.const 254
  i32.store offset=112
  local.get $0
  i32.const 255
  i32.store offset=116
  local.get $0
  i32.const 256
  i32.store offset=120
  local.get $0
  i32.const 257
  i32.store offset=124
  local.get $0
  i32.const 258
  i32.store offset=128
  local.get $0
  i32.const 259
  i32.store offset=132
  local.get $0
  i32.const 260
  i32.store offset=136
  local.get $0
  i32.const 261
  i32.store offset=140
  local.get $0
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 262
  i32.store offset=72
  local.get $0
  i32.const 263
  i32.store offset=76
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load
  local.tee $2
  i32.const 24700
  i32.gt_u
  if
   local.get $2
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $2
  i32.const 260
  i32.store offset=80
  local.get $2
  i32.const 261
  i32.store offset=84
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  local.tee $1
  i32.const 264
  i32.store offset=144
  local.get $1
  i32.const 265
  i32.store offset=148
  local.get $1
  i32.const 266
  i32.store offset=152
  local.get $1
  i32.const 267
  i32.store offset=156
  local.get $1
  i32.const 268
  i32.store offset=160
  local.get $1
  i32.const 269
  i32.store offset=164
  local.get $1
  i32.const 270
  i32.store offset=168
  local.get $1
  i32.const 271
  i32.store offset=172
  local.get $1
  i32.const 272
  i32.store offset=176
  local.get $1
  i32.const 273
  i32.store offset=180
  local.get $1
  i32.const 274
  i32.store offset=184
  local.get $1
  i32.const 275
  i32.store offset=188
  local.get $1
  i32.const 276
  i32.store offset=192
  local.get $1
  i32.const 277
  i32.store offset=196
  local.get $1
  i32.const 278
  i32.store offset=200
  local.get $1
  i32.const 279
  i32.store offset=204
  local.get $1
  i32.const 280
  i32.store offset=208
  local.get $1
  i32.const 281
  i32.store offset=212
  local.get $1
  i32.const 282
  i32.store offset=216
  local.get $1
  i32.const 283
  i32.store offset=220
  local.get $1
  i32.const 284
  i32.store offset=224
  local.get $1
  i32.const 285
  i32.store offset=228
  local.get $1
  i32.const 286
  i32.store offset=232
  local.get $1
  i32.const 287
  i32.store offset=236
  local.get $1
  i32.const 288
  i32.store offset=240
  local.get $1
  i32.const 289
  i32.store offset=244
  local.get $1
  i32.const 290
  i32.store offset=248
  local.get $1
  i32.const 291
  i32.store offset=252
  local.get $1
  i32.const 292
  i32.store offset=256
  local.get $1
  i32.const 293
  i32.store offset=276
  local.get $1
  i32.const 294
  i32.store offset=260
  local.get $1
  i32.const 295
  i32.store offset=264
  local.get $1
  i32.const 296
  i32.store offset=268
  local.get $1
  i32.const 297
  i32.store offset=272
  local.get $1
  i32.const 298
  i32.store offset=276
  local.get $0
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#setup
 )
 (func $src/assembly/index/initSpectrumMachine (; 472 ;) (param $0 i32)
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-machine/initSpectrumMachine
 )
 (func $src/assembly/index/getCurrentMachineType (; 473 ;) (result i32)
  global.get $src/assembly/spectrum/machine/spectrum-machine/machineType
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/turnOnSpectrumMachine (; 474 ;)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.eqz
  if
   i32.const 23408
   i32.const 24256
   i32.const 184
   i32.const 4
   call $~lib/builtins/abort
   unreachable
  end
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#turnOn
  local.get $0
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/index/turnOnSpectrumMachine (; 475 ;)
  call $src/assembly/spectrum/machine/spectrum-machine/turnOnSpectrumMachine
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/resetSpectrumMachine (; 476 ;)
  (local $0 i32)
  (local $1 i32)
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.eqz
  if
   i32.const 23408
   i32.const 24256
   i32.const 194
   i32.const 4
   call $~lib/builtins/abort
   unreachable
  end
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  call $src/assembly/Z80Cpu/Z80Cpu#executeReset
  i32.const 0
  global.set $~argumentsLength
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load offset=68
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load offset=132
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load offset=144
  call_indirect (type $none_=>_none)
  i32.const 0
  global.set $~argumentsLength
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.load offset=164
  call_indirect (type $none_=>_none)
  local.get $0
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/index/resetSpectrumMachine (; 477 ;)
  call $src/assembly/spectrum/machine/spectrum-machine/resetSpectrumMachine
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#serializeCpuState (; 478 ;) (param $0 i32) (param $1 i32)
  local.get $1
  local.get $0
  i32.load16_u
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=2
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=4
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=6
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=8
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=10
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=12
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=14
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load8_u offset=16
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=17
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load16_u offset=96
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=98
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=18
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=20
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load16_u offset=22
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint16
  local.get $1
  local.get $0
  i32.load8_u offset=41
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=42
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=64
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=43
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=45
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=44
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=68
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load8_u offset=69
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=60
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=36
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=28
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=32
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load8_u offset=40
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
 )
 (func $src/assembly/spectrum/machine/configuration/serializeScreenConfiguration (; 479 ;) (param $0 i32) (param $1 i32)
  local.get $1
  local.get $0
  i32.load
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=4
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=8
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=12
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=16
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=20
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=24
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=28
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=32
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=36
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=40
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=44
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=48
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=52
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
 )
 (func $src/assembly/utils/BinaryWriter/BinaryWriter#get:buffer (; 480 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load
  call $~lib/array/Array<u8>#constructor
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $2
   i32.load offset=12
   i32.lt_s
   if
    local.get $2
    local.get $1
    local.get $0
    i32.load offset=4
    local.get $1
    call $~lib/array/Array<u8>#__get
    call $~lib/array/Array<u8>#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  local.get $2
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#serializeEngineState (; 481 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 8
  i32.const 36
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.const 0
  i32.store
  i32.const 3
  i32.const 24384
  call $~lib/rt/__allocArray
  local.tee $3
  i32.const 24700
  i32.gt_u
  if
   local.get $3
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  local.get $3
  i32.store offset=4
  local.get $0
  i32.load
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#serializeCpuState
  local.get $1
  local.get $0
  i32.load8_u offset=4
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=8
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load8_u offset=12
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $0
  i32.load offset=16
  local.get $1
  call $src/assembly/spectrum/machine/configuration/serializeScreenConfiguration
  local.get $1
  local.get $0
  i32.load offset=20
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=24
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=28
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load8_u offset=32
  if (result i32)
   i32.const 1
  else
   i32.const 0
  end
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  local.get $1
  local.get $0
  i32.load offset=36
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=40
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=44
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeUint32
  local.get $1
  local.get $0
  i32.load offset=52
  call $src/assembly/utils/BinaryWriter/BinaryWriter#writeByte
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=324
  call_indirect (type $i32_=>_none)
  local.get $1
  call $src/assembly/utils/BinaryWriter/BinaryWriter#get:buffer
  local.get $1
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/getSpectrumMachineState (; 482 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  (local $2 i32)
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#serializeEngineState
  local.tee $1
  i32.load offset=12
  call $~lib/typedarray/Uint8Array#constructor
  local.set $2
  loop $for-loop|0
   local.get $0
   local.get $1
   i32.load offset=12
   i32.lt_s
   if
    local.get $2
    local.get $0
    local.get $1
    local.get $0
    call $~lib/array/Array<u8>#__get
    call $~lib/typedarray/Uint8Array#__set
    local.get $0
    i32.const 1
    i32.add
    local.set $0
    br $for-loop|0
   end
  end
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
 )
 (func $src/assembly/index/getSpectrumMachineState (; 483 ;) (result i32)
  call $src/assembly/spectrum/machine/spectrum-machine/getSpectrumMachineState
 )
 (func $src/assembly/utils/BinaryReader/BinaryReader#constructor (; 484 ;) (param $0 i32) (result i32)
  (local $1 i32)
  (local $2 i32)
  (local $3 i32)
  i32.const 8
  i32.const 35
  call $~lib/rt/tlsf/__alloc
  local.tee $1
  i32.const 24700
  i32.gt_u
  if
   local.get $1
   i32.const 16
   i32.sub
   local.tee $2
   local.get $2
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $1
  i32.const 0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $0
  local.get $1
  i32.load
  local.tee $3
  i32.ne
  if
   local.get $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $3
   call $~lib/rt/pure/__release
  end
  local.get $1
  local.get $0
  i32.store
  local.get $1
  i32.const 0
  i32.store offset=4
  local.get $1
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#restoreCpuState (; 485 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=2
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=4
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=6
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=8
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=10
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=12
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=14
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=16
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=17
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=96
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=98
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=18
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=20
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint16
  i32.store16 offset=22
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=41
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=42
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store offset=64
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=43
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=45
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=44
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=68
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=69
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store offset=60
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store offset=36
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=28
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=32
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=40
 )
 (func $src/assembly/spectrum/machine/configuration/ScreenConfiguration#constructor (; 486 ;) (result i32)
  (local $0 i32)
  (local $1 i32)
  i32.const 56
  i32.const 24
  call $~lib/rt/tlsf/__alloc
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store offset=8
  local.get $0
  i32.const 0
  i32.store offset=12
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
  i32.const 0
  i32.store offset=20
  local.get $0
  i32.const 0
  i32.store offset=24
  local.get $0
  i32.const 0
  i32.store offset=28
  local.get $0
  i32.const 0
  i32.store offset=32
  local.get $0
  i32.const 0
  i32.store offset=36
  local.get $0
  i32.const 0
  i32.store offset=40
  local.get $0
  i32.const 0
  i32.store offset=44
  local.get $0
  i32.const 0
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
 )
 (func $src/assembly/spectrum/machine/configuration/restoreScreenConfiguration (; 487 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=4
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=8
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=12
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=16
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=20
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=24
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=28
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=32
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=36
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=40
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=44
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=48
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=52
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#restoreEngineState (; 488 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#constructor
  local.set $1
  local.get $0
  i32.load
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#restoreCpuState
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=4
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=8
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store8 offset=12
  call $src/assembly/spectrum/machine/configuration/ScreenConfiguration#constructor
  local.tee $2
  local.get $1
  call $src/assembly/spectrum/machine/configuration/restoreScreenConfiguration
  local.get $2
  call $src/assembly/spectrum/screen/ScreenConfigurationEx/ScreenConfigurationEx#constructor
  local.set $3
  local.get $0
  i32.load offset=16
  call $~lib/rt/pure/__release
  local.get $0
  local.get $3
  i32.store offset=16
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=20
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=24
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=28
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.const 0
  i32.ne
  i32.store8 offset=32
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=36
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=40
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readUint32
  i32.store offset=44
  local.get $0
  local.get $1
  call $src/assembly/utils/BinaryReader/BinaryReader#readByte
  i32.store offset=52
  i32.const 1
  global.set $~argumentsLength
  local.get $1
  local.get $0
  i32.load offset=328
  call_indirect (type $i32_=>_none)
  local.get $1
  call $~lib/rt/pure/__release
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/spectrum/machine/spectrum-machine/updateSpectrumMachineState (; 489 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=8
  call $~lib/array/Array<u8>#constructor
  local.set $2
  loop $for-loop|0
   local.get $1
   local.get $0
   i32.load offset=8
   i32.lt_s
   if
    local.get $2
    local.get $1
    local.get $0
    local.get $1
    call $~lib/typedarray/Uint8Array#__get
    call $~lib/array/Array<u8>#__set
    local.get $1
    i32.const 1
    i32.add
    local.set $1
    br $for-loop|0
   end
  end
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  local.get $2
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#restoreEngineState
  local.get $2
  call $~lib/rt/pure/__release
 )
 (func $src/assembly/index/updateSpectrumMachineState (; 490 ;) (param $0 i32)
  local.get $0
  call $src/assembly/spectrum/machine/spectrum-machine/updateSpectrumMachineState
 )
 (func $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#executeCycle (; 491 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  (local $4 i32)
  (local $5 i32)
  (local $6 i32)
  local.get $1
  local.tee $4
  local.get $0
  i32.load offset=48
  local.tee $1
  i32.ne
  if
   local.get $4
   i32.const 24700
   i32.gt_u
   if
    local.get $4
    i32.const 16
    i32.sub
    local.tee $2
    local.get $2
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $1
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $4
  i32.store offset=48
  local.get $0
  i32.const 0
  i32.store offset=52
  local.get $0
  local.get $0
  i32.load
  i32.load offset=28
  i32.store offset=20
  local.get $0
  local.get $0
  i32.load
  i32.load offset=32
  i32.store offset=24
  local.get $0
  local.get $0
  i32.load offset=40
  i32.store offset=44
  i32.const -1
  local.set $6
  local.get $0
  i32.load8_u offset=32
  if
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   i32.load offset=148
   call_indirect (type $none_=>_none)
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   i32.load offset=168
   call_indirect (type $none_=>_none)
   i32.const 0
   global.set $~argumentsLength
   local.get $0
   i32.load offset=204
   call_indirect (type $none_=>_none)
   local.get $0
   local.get $0
   i32.load offset=36
   i32.store offset=28
   local.get $0
   i32.const 0
   i32.store8 offset=32
  end
  loop $while-continue|0
   local.get $0
   i32.load8_u offset=32
   i32.eqz
   if
    local.get $0
    i32.load
    local.tee $1
    i32.const 24700
    i32.gt_u
    if
     local.get $1
     i32.const 16
     i32.sub
     local.tee $2
     local.get $2
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $1
    i32.load8_u offset=45
    i32.eqz
    if
     local.get $6
     i32.const 1
     i32.add
     local.set $6
     local.get $4
     i32.load
     i32.const 4
     i32.eq
     if
      local.get $4
      i32.load16_u offset=10
      i32.const 16384
      i32.lt_u
      if
       local.get $4
       i32.load8_u offset=9
       i32.const 0
       global.set $~argumentsLength
       local.get $0
       i32.load offset=92
       call_indirect (type $none_=>_i32)
       i32.const 255
       i32.and
       i32.eq
       if
        local.get $4
        i32.load16_u offset=10
        local.get $0
        i32.load
        local.tee $2
        i32.const 24700
        i32.gt_u
        if
         local.get $2
         i32.const 16
         i32.sub
         local.tee $5
         local.get $5
         i32.load offset=4
         i32.const 1
         i32.add
         i32.store offset=4
        end
        local.get $2
        i32.load16_u offset=96
        i32.eq
        local.set $3
        local.get $2
        call $~lib/rt/pure/__release
       else
        i32.const 0
        local.set $3
       end
       local.get $3
       if
        local.get $0
        i32.const 3
        i32.store offset=52
        local.get $1
        call $~lib/rt/pure/__release
        return
       end
      else
       local.get $4
       i32.load16_u offset=10
       local.get $0
       i32.load
       local.tee $2
       i32.const 24700
       i32.gt_u
       if
        local.get $2
        i32.const 16
        i32.sub
        local.tee $5
        local.get $5
        i32.load offset=4
        i32.const 1
        i32.add
        i32.store offset=4
       end
       local.get $2
       i32.load16_u offset=96
       i32.eq
       if
        local.get $0
        i32.const 3
        i32.store offset=52
        local.get $1
        call $~lib/rt/pure/__release
        local.get $2
        call $~lib/rt/pure/__release
        return
       end
       local.get $2
       call $~lib/rt/pure/__release
      end
     end
     local.get $4
     i32.load
     drop
    end
    i32.const 1
    global.set $~argumentsLength
    local.get $0
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    local.get $0
    i32.load offset=160
    call_indirect (type $i32_=>_none)
    local.get $0
    i32.load
    local.tee $2
    i32.const 24700
    i32.gt_u
    if
     local.get $2
     i32.const 16
     i32.sub
     local.tee $3
     local.get $3
     i32.load offset=4
     i32.const 1
     i32.add
     i32.store offset=4
    end
    local.get $2
    call $src/assembly/Z80Cpu/Z80Cpu#executeCpuCycle
    local.get $0
    call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
    local.set $3
    i32.const 2
    global.set $~argumentsLength
    local.get $0
    i32.load offset=28
    i32.const 1
    i32.add
    local.get $3
    local.get $0
    i32.load offset=188
    call_indirect (type $i32_i32_=>_none)
    local.get $0
    local.get $3
    i32.store offset=28
    local.get $4
    i32.load
    i32.const 1
    i32.eq
    if
     local.get $0
     i32.load
     local.tee $5
     i32.const 24700
     i32.gt_u
     if
      local.get $5
      i32.const 16
      i32.sub
      local.tee $3
      local.get $3
      i32.load offset=4
      i32.const 1
      i32.add
      i32.store offset=4
     end
     local.get $5
     i32.load offset=36
     i32.const 8
     i32.and
     i32.const 0
     i32.ne
     local.set $3
     local.get $5
     call $~lib/rt/pure/__release
    else
     i32.const 0
     local.set $3
    end
    local.get $3
    if
     local.get $0
     i32.const 5
     i32.store offset=52
     local.get $1
     call $~lib/rt/pure/__release
     local.get $2
     call $~lib/rt/pure/__release
     return
    end
    i32.const 0
    global.set $~argumentsLength
    local.get $0
    i32.load offset=276
    call_indirect (type $none_=>_none)
    local.get $0
    local.get $0
    i32.load
    i32.load8_u offset=45
    if (result i32)
     i32.const 0
    else
     local.get $0
     i32.load
     i32.load offset=28
     local.get $0
     i32.load offset=20
     i32.gt_u
    end
    i32.store8 offset=32
    local.get $1
    call $~lib/rt/pure/__release
    local.get $2
    call $~lib/rt/pure/__release
    br $while-continue|0
   end
  end
  i32.const 0
  global.set $~argumentsLength
  local.get $0
  i32.load offset=208
  call_indirect (type $none_=>_none)
  local.get $0
  local.get $0
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#get:currentFrameTact
  i32.store offset=36
  local.get $0
  i32.const 7
  i32.store offset=52
 )
 (func $src/assembly/index/executeCycle (; 492 ;) (param $0 i32)
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  i32.eqz
  if
   i32.const 23408
   i32.const 24256
   i32.const 234
   i32.const 4
   call $~lib/builtins/abort
   unreachable
  end
  global.get $src/assembly/spectrum/machine/spectrum-machine/spectrum
  local.get $0
  call $src/assembly/spectrum/machine/SpectrumEngine/SpectrumEngine#executeCycle
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:tactsInFrame (; 493 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=24
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:frameCount (; 494 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=28
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:frameCount (; 495 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=28
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:frameTacts (; 496 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=32
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:frameTacts (; 497 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=32
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:stateFlags (; 498 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=36
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:useGateArrayContention (; 499 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=40
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:useGateArrayContention (; 500 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=40
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:iff1 (; 501 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=41
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:iff1 (; 502 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=41
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:iff2 (; 503 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=42
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:iff2 (; 504 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=42
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:interruptMode (; 505 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=43
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:interruptMode (; 506 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=43
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:isInterruptBlocked (; 507 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=44
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:isInterruptBlocked (; 508 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=44
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:isInOpExecution (; 509 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=45
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:isInOpExecution (; 510 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=45
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:executionFlowStatus (; 511 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=48
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:executionFlowStatus (; 512 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=48
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    local.get $3
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $1
  i32.store offset=48
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryReadStatus (; 513 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=52
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryReadStatus (; 514 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=52
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    local.get $3
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $1
  i32.store offset=52
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryWriteStatus (; 515 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load offset=56
  local.tee $0
  i32.const 24700
  i32.gt_u
  if
   local.get $0
   i32.const 16
   i32.sub
   local.tee $1
   local.get $1
   i32.load offset=4
   i32.const 1
   i32.add
   i32.store offset=4
  end
  local.get $0
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryWriteStatus (; 516 ;) (param $0 i32) (param $1 i32)
  (local $2 i32)
  (local $3 i32)
  local.get $1
  local.get $0
  i32.load offset=56
  local.tee $2
  i32.ne
  if
   local.get $1
   i32.const 24700
   i32.gt_u
   if
    local.get $1
    i32.const 16
    i32.sub
    local.tee $3
    local.get $3
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
   local.get $2
   call $~lib/rt/pure/__release
  end
  local.get $0
  local.get $1
  i32.store offset=56
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:prefixMode (; 517 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=60
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:prefixMode (; 518 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=60
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:indexMode (; 519 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=64
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:indexMode (; 520 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=64
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:maskableInterruptModeEntered (; 521 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=68
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:maskableInterruptModeEntered (; 522 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=68
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:opCode (; 523 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=69
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:opCode (; 524 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=69
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:allowExtendedInstructionSet (; 525 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=70
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:allowExtendedInstructionSet (; 526 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=70
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryReader (; 527 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=72
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryReader (; 528 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=72
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:memoryWriter (; 529 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=76
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:memoryWriter (; 530 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=76
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:portReader (; 531 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=80
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:portReader (; 532 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=80
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:portWriter (; 533 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=84
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:portWriter (; 534 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=84
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:tbBlueIndexWriter (; 535 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=88
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:tbBlueIndexWriter (; 536 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=88
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:tbBlueValueWriter (; 537 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=92
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:tbBlueValueWriter (; 538 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=92
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:d (; 539 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=4
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:pc (; 540 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:pc (; 541 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=96
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:sp (; 542 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=98
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#set:sp (; 543 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store16 offset=98
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:xh (; 544 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=18
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:xl (; 545 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=18
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:yh (; 546 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=20
  i32.const 8
  i32.shr_u
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:yl (; 547 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u offset=20
  i32.const 255
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#getIndexReg (; 548 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if (result i32)
   local.get $0
   i32.load16_u offset=20
  else
   local.get $0
   i32.load16_u offset=18
  end
  i32.const 65535
  i32.and
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#setIndexReg (; 549 ;) (param $0 i32) (param $1 i32)
  local.get $0
  i32.load offset=64
  i32.const 2
  i32.eq
  if
   local.get $0
   local.get $1
   i32.store16 offset=20
  else
   local.get $0
   local.get $1
   i32.store16 offset=18
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:sFlag (; 550 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 128
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:zFlag (; 551 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 64
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:r5Flag (; 552 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 32
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:hFlag (; 553 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 16
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:r3Flag (; 554 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 8
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:pvFlag (; 555 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 4
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#get:nFlag (; 556 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load16_u
  i32.const 2
  i32.and
  i32.const 0
  i32.ne
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#getCallInstructionLength (; 557 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.load16_u offset=96
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 255
  i32.and
  local.tee $1
  i32.const 205
  i32.eq
  if
   i32.const 3
   return
  end
  local.get $1
  i32.const 199
  i32.and
  i32.const 196
  i32.eq
  if
   i32.const 3
   return
  end
  local.get $1
  i32.const 199
  i32.and
  i32.const 199
  i32.eq
  if
   i32.const 1
   return
  end
  local.get $1
  i32.const 118
  i32.eq
  if
   i32.const 1
   return
  end
  local.get $1
  i32.const 237
  i32.ne
  if
   i32.const 0
   return
  end
  local.get $0
  i32.load16_u offset=96
  i32.const 1
  i32.add
  i32.const 65535
  i32.and
  i32.const 2
  global.set $~argumentsLength
  i32.const 0
  local.get $0
  i32.load offset=72
  call_indirect (type $i32_i32_=>_i32)
  i32.const 180
  i32.and
  i32.const 176
  i32.eq
  if (result i32)
   i32.const 2
  else
   i32.const 0
  end
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:prefixMode (; 558 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=48
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:prefixMode (; 559 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=48
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:indexMode (; 560 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=52
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:indexMode (; 561 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=52
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:maskableInterruptModeEntered (; 562 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=56
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:maskableInterruptModeEntered (; 563 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=56
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#get:opCode (; 564 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=57
 )
 (func $src/assembly/test-machine/TestZ80MachineState/TestZ80MachineState#set:opCode (; 565 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=57
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#constructor (; 566 ;) (param $0 i32) (result i32)
  (local $1 i32)
  local.get $0
  i32.eqz
  if
   i32.const 20
   i32.const 25
   call $~lib/rt/tlsf/__alloc
   local.tee $0
   i32.const 24700
   i32.gt_u
   if
    local.get $0
    i32.const 16
    i32.sub
    local.tee $1
    local.get $1
    i32.load offset=4
    i32.const 1
    i32.add
    i32.store offset=4
   end
  end
  local.get $0
  i32.const 0
  i32.store
  local.get $0
  i32.const 0
  i32.store offset=4
  local.get $0
  i32.const 0
  i32.store8 offset=8
  local.get $0
  i32.const 0
  i32.store8 offset=9
  local.get $0
  i32.const 0
  i32.store16 offset=10
  local.get $0
  i32.const 0
  i32.store8 offset=12
  local.get $0
  i32.const 0
  i32.store8 offset=13
  local.get $0
  i32.const 0
  i32.store offset=16
  local.get $0
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:emulationMode (; 567 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:emulationMode (; 568 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:debugStepMode (; 569 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=4
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:debugStepMode (; 570 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=4
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:fastTapeMode (; 571 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=8
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:fastTapeMode (; 572 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=8
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:terminationRom (; 573 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=9
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:terminationRom (; 574 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=9
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:fastVmMode (; 575 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=12
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:fastVmMode (; 576 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=12
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:disableScreenRendering (; 577 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load8_u offset=13
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:disableScreenRendering (; 578 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store8 offset=13
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#get:timeoutTacts (; 579 ;) (param $0 i32) (result i32)
  local.get $0
  i32.load offset=16
 )
 (func $src/assembly/spectrum/machine/ExecuteCycleOptions/ExecuteCycleOptions#set:timeoutTacts (; 580 ;) (param $0 i32) (param $1 i32)
  local.get $0
  local.get $1
  i32.store offset=16
 )
 (func $~start (; 581 ;)
  (local $0 i32)
  call $start:src/assembly/Z80Cpu
  i32.const 65536
  call $~lib/typedarray/Uint8Array#constructor
  global.set $src/assembly/test-machine/test-devices/simpleMemory
  i32.const 0
  call $~lib/typedarray/Uint8Array#constructor
  global.set $src/assembly/test-machine/test-devices/fakeInput
  call $src/assembly/test-machine/WaTestZ80Machine/WaTestZ80Machine#constructor
  global.set $src/assembly/test-machine/WaTestZ80Machine/waTestZ80Machine
  i32.const 65536
  call $~lib/array/Array<u8>#constructor
  local.tee $0
  call $~lib/staticarray/StaticArray.fromArray<u8>
  global.set $src/assembly/spectrum/machine/spectrum-48/memory
  local.get $0
  call $~lib/rt/pure/__release
  i32.const 0
  global.set $src/assembly/spectrum/machine/spectrum-machine/machineType
 )
 (func $~lib/rt/pure/decrement (; 582 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  i32.const 268435455
  i32.and
  local.tee $2
  i32.const 1
  i32.eq
  if
   local.get $0
   i32.const 16
   i32.add
   call $~lib/rt/__visit_members
   global.get $~lib/rt/tlsf/ROOT
   local.get $0
   call $~lib/rt/tlsf/freeBlock
  else
   local.get $0
   local.get $2
   i32.const 1
   i32.sub
   local.get $1
   i32.const -268435456
   i32.and
   i32.or
   i32.store offset=4
  end
 )
 (func $~lib/rt/pure/__visit (; 583 ;) (param $0 i32)
  local.get $0
  i32.const 24700
  i32.lt_u
  if
   return
  end
  local.get $0
  i32.const 16
  i32.sub
  call $~lib/rt/pure/decrement
 )
 (func $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#__visit_impl (; 584 ;) (param $0 i32)
  (local $1 i32)
  (local $2 i32)
  local.get $0
  i32.load offset=4
  local.tee $1
  local.get $0
  i32.load offset=12
  i32.const 2
  i32.shl
  i32.add
  local.set $0
  loop $while-continue|0
   local.get $1
   local.get $0
   i32.lt_u
   if
    local.get $1
    i32.load
    local.tee $2
    if
     local.get $2
     call $~lib/rt/pure/__visit
    end
    local.get $1
    i32.const 4
    i32.add
    local.set $1
    br $while-continue|0
   end
  end
 )
 (func $~lib/rt/__visit_members (; 585 ;) (param $0 i32)
  (local $1 i32)
  block $block$4$break
   block $switch$1$default
    block $switch$1$case$39
     block $switch$1$case$38
      block $switch$1$case$33
       block $switch$1$case$24
        block $switch$1$case$19
         block $switch$1$case$17
          block $switch$1$case$15
           block $switch$1$case$7
            block $switch$1$case$2
             local.get $0
             i32.const 8
             i32.sub
             i32.load
             br_table $switch$1$case$2 $switch$1$case$2 $block$4$break $block$4$break $block$4$break $switch$1$case$7 $block$4$break $block$4$break $block$4$break $block$4$break $block$4$break $block$4$break $switch$1$case$2 $switch$1$case$15 $switch$1$case$2 $switch$1$case$17 $switch$1$case$2 $switch$1$case$19 $block$4$break $block$4$break $switch$1$case$2 $block$4$break $switch$1$case$24 $switch$1$case$2 $switch$1$case$2 $switch$1$case$2 $switch$1$case$2 $block$4$break $switch$1$case$2 $switch$1$case$2 $switch$1$case$2 $switch$1$case$33 $block$4$break $block$4$break $block$4$break $block$4$break $switch$1$case$38 $switch$1$case$39 $block$4$break $switch$1$default
            end
            return
           end
           local.get $0
           i32.load offset=48
           local.tee $1
           if
            local.get $1
            call $~lib/rt/pure/__visit
           end
           local.get $0
           i32.load offset=52
           local.tee $1
           if
            local.get $1
            call $~lib/rt/pure/__visit
           end
           local.get $0
           i32.load offset=56
           local.tee $0
           if
            local.get $0
            call $~lib/rt/pure/__visit
           end
           return
          end
          local.get $0
          call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#__visit_impl
          br $block$4$break
         end
         local.get $0
         call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#__visit_impl
         br $block$4$break
        end
        local.get $0
        call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#__visit_impl
        br $block$4$break
       end
       local.get $0
       i32.load
       local.tee $1
       if
        local.get $1
        call $~lib/rt/pure/__visit
       end
       local.get $0
       i32.load offset=16
       local.tee $1
       if
        local.get $1
        call $~lib/rt/pure/__visit
       end
       local.get $0
       i32.load offset=48
       local.tee $0
       if
        local.get $0
        call $~lib/rt/pure/__visit
       end
       return
      end
      local.get $0
      call $~lib/array/Array<src/assembly/test-machine/test-devices/MemoryOp>#__visit_impl
      br $block$4$break
     end
     local.get $0
     i32.load offset=4
     local.tee $0
     if
      local.get $0
      call $~lib/rt/pure/__visit
     end
     return
    end
    return
   end
   unreachable
  end
  local.get $0
  i32.load
  local.tee $0
  if
   local.get $0
   call $~lib/rt/pure/__visit
  end
 )
 (func $src/assembly/Z80Cpu/Z80Cpu#constructor|trampoline (; 586 ;) (param $0 i32) (param $1 i32) (result i32)
  block $1of1
   block $0of1
    block $outOfRange
     global.get $~argumentsLength
     br_table $0of1 $1of1 $outOfRange
    end
    unreachable
   end
   i32.const 0
   local.set $1
  end
  local.get $0
  local.get $1
  call $src/assembly/Z80Cpu/Z80Cpu#constructor
 )
)
